{"ast":null,"code":"import * as Three from \"three\";\nlet scene, camera, renderer;\nexport const buildScene = el => {\n  scene = new Three.Scene();\n  camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n  renderer = new Three.WebGLRenderer();\n  el.appendChild(renderer.domElement);\n  let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n  let floorMaterial = new Three.MeshStandardMaterial();\n  let floor = new Three.Mesh(floorGeometry, floorMaterial);\n  floor.name = \"floor\";\n  let cubeGeometry = new Three.BoxGeometry(1, 1, 1);\n  let cubeMaterial = new Three.MeshNormalMaterial();\n  let cube = new Three.Mesh(cubeGeometry, cubeMaterial);\n  cube.name = 'cube';\n  let light = new Three.AmbientLight(\"blue\");\n  cube.position.y += 2;\n  scene.add(light);\n  scene.add(floor);\n  scene.add(cube);\n  camera.position.z = 5;\n  camera.position.y = 2;\n  run();\n};\n\nconst fitCanvasToDisplaySize = force => {\n  if (!renderer) return;\n  const canvas = renderer.domElement;\n  const width = canvas.clientWidth;\n  const height = canvas.clientHeight;\n\n  if (force || canvas.width !== width || canvas.height !== height) {\n    renderer.setSize(width, height, false);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n};\n\nconst animate = () => {\n  if (!renderer) return;\n  fitCanvasToDisplaySize(false); //animate stuff here--\n\n  let cube = scene.getObjectByName(\"cube\");\n  cube.rotation.y += 0.01;\n  cube.rotation.x += 0.01; //--\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\n\nconst run = () => {\n  animate();\n  fitCanvasToDisplaySize(true);\n  requestAnimationFrame(animate);\n};","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\App\\initialization.js"],"names":["Three","scene","camera","renderer","buildScene","el","Scene","PerspectiveCamera","WebGLRenderer","appendChild","domElement","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","name","cubeGeometry","cubeMaterial","MeshNormalMaterial","cube","light","AmbientLight","position","y","add","z","run","fitCanvasToDisplaySize","force","canvas","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","getObjectByName","rotation","x","render","requestAnimationFrame"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAIC,KAAJ,EAAWC,MAAX,EAAmBC,QAAnB;AACA,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ;AAC9BJ,EAAAA,KAAK,GAAG,IAAID,KAAK,CAACM,KAAV,EAAR;AACAJ,EAAAA,MAAM,GAAG,IAAIF,KAAK,CAACO,iBAAV,CAA4B,EAA5B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,IAAtC,CAAT;AACAJ,EAAAA,QAAQ,GAAG,IAAIH,KAAK,CAACQ,aAAV,EAAX;AAEAH,EAAAA,EAAE,CAACI,WAAH,CAAeN,QAAQ,CAACO,UAAxB;AAEA,MAAIC,aAAa,GAAG,IAAIX,KAAK,CAACY,WAAV,CAAsB,EAAtB,EAA0B,CAA1B,EAA6B,EAA7B,CAApB;AACA,MAAIC,aAAa,GAAG,IAAIb,KAAK,CAACc,oBAAV,EAApB;AACA,MAAIC,KAAK,GAAG,IAAIf,KAAK,CAACgB,IAAV,CAAeL,aAAf,EAA8BE,aAA9B,CAAZ;AACAE,EAAAA,KAAK,CAACE,IAAN,GAAa,OAAb;AAEA,MAAIC,YAAY,GAAG,IAAIlB,KAAK,CAACY,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAnB;AACA,MAAIO,YAAY,GAAG,IAAInB,KAAK,CAACoB,kBAAV,EAAnB;AACA,MAAIC,IAAI,GAAG,IAAIrB,KAAK,CAACgB,IAAV,CAAeE,YAAf,EAA6BC,YAA7B,CAAX;AACAE,EAAAA,IAAI,CAACJ,IAAL,GAAY,MAAZ;AAEA,MAAIK,KAAK,GAAG,IAAItB,KAAK,CAACuB,YAAV,CAAuB,MAAvB,CAAZ;AAEAF,EAAAA,IAAI,CAACG,QAAL,CAAcC,CAAd,IAAmB,CAAnB;AACAxB,EAAAA,KAAK,CAACyB,GAAN,CAAUJ,KAAV;AACArB,EAAAA,KAAK,CAACyB,GAAN,CAAUX,KAAV;AACAd,EAAAA,KAAK,CAACyB,GAAN,CAAUL,IAAV;AACAnB,EAAAA,MAAM,CAACsB,QAAP,CAAgBG,CAAhB,GAAoB,CAApB;AACAzB,EAAAA,MAAM,CAACsB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AAEAG,EAAAA,GAAG;AACN,CA3BM;;AA6BP,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACtC,MAAG,CAAC3B,QAAJ,EAAc;AACd,QAAM4B,MAAM,GAAG5B,QAAQ,CAACO,UAAxB;AACA,QAAMsB,KAAK,GAAGD,MAAM,CAACE,WAArB;AACA,QAAMC,MAAM,GAAGH,MAAM,CAACI,YAAtB;;AAEA,MAAIL,KAAK,IAAIC,MAAM,CAACC,KAAP,KAAiBA,KAA1B,IAAmCD,MAAM,CAACG,MAAP,KAAkBA,MAAzD,EAAiE;AAC/D/B,IAAAA,QAAQ,CAACiC,OAAT,CAAiBJ,KAAjB,EAAwBE,MAAxB,EAAgC,KAAhC;AACAhC,IAAAA,MAAM,CAACmC,MAAP,GAAgBL,KAAK,GAAGE,MAAxB;AACAhC,IAAAA,MAAM,CAACoC,sBAAP;AACD;AACJ,CAXD;;AAaA,MAAMC,OAAO,GAAG,MAAM;AAClB,MAAG,CAACpC,QAAJ,EAAc;AACd0B,EAAAA,sBAAsB,CAAC,KAAD,CAAtB,CAFkB,CAIlB;;AACA,MAAIR,IAAI,GAAGpB,KAAK,CAACuC,eAAN,CAAuB,MAAvB,CAAX;AACAnB,EAAAA,IAAI,CAACoB,QAAL,CAAchB,CAAd,IAAmB,IAAnB;AACAJ,EAAAA,IAAI,CAACoB,QAAL,CAAcC,CAAd,IAAmB,IAAnB,CAPkB,CASlB;;AACAvC,EAAAA,QAAQ,CAACwC,MAAT,CAAgB1C,KAAhB,EAAuBC,MAAvB;AACA0C,EAAAA,qBAAqB,CAACL,OAAD,CAArB;AACH,CAZD;;AAcA,MAAMX,GAAG,GAAG,MAAM;AACdW,EAAAA,OAAO;AACPV,EAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAe,EAAAA,qBAAqB,CAACL,OAAD,CAArB;AACH,CAJD","sourcesContent":["import * as Three from \"three\";\r\nlet scene, camera, renderer;\r\nexport const buildScene = (el) => {\r\n    scene = new Three.Scene();\r\n    camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\r\n    renderer = new Three.WebGLRenderer();\r\n\r\n    el.appendChild(renderer.domElement);\r\n\r\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\r\n    let floorMaterial = new Three.MeshStandardMaterial();\r\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\r\n    floor.name = \"floor\";\r\n\r\n    let cubeGeometry = new Three.BoxGeometry(1, 1, 1);\r\n    let cubeMaterial = new Three.MeshNormalMaterial();\r\n    let cube = new Three.Mesh(cubeGeometry, cubeMaterial);\r\n    cube.name = 'cube';\r\n    \r\n    let light = new Three.AmbientLight(\"blue\");\r\n\r\n    cube.position.y += 2;\r\n    scene.add(light);\r\n    scene.add(floor);\r\n    scene.add(cube);\r\n    camera.position.z = 5;\r\n    camera.position.y = 2;\r\n\r\n    run();\r\n}\r\n\r\nconst fitCanvasToDisplaySize = (force) => {\r\n    if(!renderer) return;\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    if (force || canvas.width !== width || canvas.height !== height) {\r\n      renderer.setSize(width, height, false);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n    }   \r\n}\r\n\r\nconst animate = () => {\r\n    if(!renderer) return;\r\n    fitCanvasToDisplaySize(false);\r\n\r\n    //animate stuff here--\r\n    let cube = scene.getObjectByName( \"cube\" );\r\n    cube.rotation.y += 0.01;\r\n    cube.rotation.x += 0.01;\r\n    \r\n    //--\r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nconst run = () => {\r\n    animate();\r\n    fitCanvasToDisplaySize(true);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}