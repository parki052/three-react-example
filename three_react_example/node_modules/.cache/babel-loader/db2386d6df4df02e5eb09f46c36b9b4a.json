{"ast":null,"code":"'use strict';\n\nmodule.exports = function (PromiseArgument) {\n  var Promise;\n\n  function throat(size, fn) {\n    var queue = new Queue();\n\n    function run(fn, self, args) {\n      if (size) {\n        size--;\n        var result = new Promise(function (resolve) {\n          resolve(fn.apply(self, args));\n        });\n        result.then(release, release);\n        return result;\n      } else {\n        return new Promise(function (resolve) {\n          queue.push(new Delayed(resolve, fn, self, args));\n        });\n      }\n    }\n\n    function release() {\n      size++;\n\n      if (!queue.isEmpty()) {\n        var next = queue.shift();\n        next.resolve(run(next.fn, next.self, next.args));\n      }\n    }\n\n    if (typeof size === 'function') {\n      var temp = fn;\n      fn = size;\n      size = temp;\n    }\n\n    if (typeof size !== 'number') {\n      throw new TypeError('Expected throat size to be a number but got ' + typeof size);\n    }\n\n    if (fn !== undefined && typeof fn !== 'function') {\n      throw new TypeError('Expected throat fn to be a function but got ' + typeof fn);\n    }\n\n    if (typeof fn === 'function') {\n      return function () {\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n\n        return run(fn, this, args);\n      };\n    } else {\n      return function (fn) {\n        if (typeof fn !== 'function') {\n          throw new TypeError('Expected throat fn to be a function but got ' + typeof fn);\n        }\n\n        var args = [];\n\n        for (var i = 1; i < arguments.length; i++) {\n          args.push(arguments[i]);\n        }\n\n        return run(fn, this, args);\n      };\n    }\n  }\n\n  if (arguments.length === 1 && typeof PromiseArgument === 'function') {\n    Promise = PromiseArgument;\n    return throat;\n  } else {\n    Promise = module.exports.Promise;\n\n    if (typeof Promise !== 'function') {\n      throw new Error('You must provide a Promise polyfill for this library to work in older environments');\n    }\n\n    return throat(arguments[0], arguments[1]);\n  }\n};\n/* istanbul ignore next */\n\n\nif (typeof Promise === 'function') {\n  module.exports.Promise = Promise;\n}\n\nfunction Delayed(resolve, fn, self, args) {\n  this.resolve = resolve;\n  this.fn = fn;\n  this.self = self || null;\n  this.args = args;\n}\n\nfunction Queue() {\n  this._s1 = [];\n  this._s2 = [];\n}\n\nQueue.prototype.push = function (value) {\n  this._s1.push(value);\n};\n\nQueue.prototype.shift = function () {\n  var s2 = this._s2;\n\n  if (s2.length === 0) {\n    var s1 = this._s1;\n\n    if (s1.length === 0) {\n      return;\n    }\n\n    this._s1 = s2;\n    s2 = this._s2 = s1.reverse();\n  }\n\n  return s2.pop();\n};\n\nQueue.prototype.isEmpty = function () {\n  return !this._s1.length && !this._s2.length;\n};","map":null,"metadata":{},"sourceType":"script"}