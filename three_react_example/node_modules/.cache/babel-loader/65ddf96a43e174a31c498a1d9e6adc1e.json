{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nvar _utils = require('./utils');\n\nvar _get_result_header = _interopRequireDefault(require('./get_result_header'));\n\nvar _get_snapshot_summary = _interopRequireDefault(require('./get_snapshot_summary'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst TEST_SUMMARY_THRESHOLD = 20;\nconst NPM_EVENTS = new Set(['prepublish', 'publish', 'postpublish', 'preinstall', 'install', 'postinstall', 'preuninstall', 'uninstall', 'postuninstall', 'preversion', 'version', 'postversion', 'pretest', 'test', 'posttest', 'prestop', 'stop', 'poststop', 'prestart', 'start', 'poststart', 'prerestart', 'restart', 'postrestart']);\nconst _process$env = process.env,\n      npm_config_user_agent = _process$env.npm_config_user_agent,\n      npm_lifecycle_event = _process$env.npm_lifecycle_event,\n      npm_lifecycle_script = _process$env.npm_lifecycle_script;\n\nclass SummaryReporter extends _base_reporter.default {\n  constructor(globalConfig) {\n    super();\n\n    _defineProperty(this, '_estimatedTime', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    this._globalConfig = globalConfig;\n    this._estimatedTime = 0;\n  } // If we write more than one character at a time it is possible that\n  // Node.js exits in the middle of printing the result. This was first observed\n  // in Node.js 0.10 and still persists in Node.js 6.7+.\n  // Let's print the test failure summary character by character which is safer\n  // when hundreds of tests are failing.\n\n\n  _write(string) {\n    for (let i = 0; i < string.length; i++) {\n      process.stderr.write(string.charAt(i));\n    }\n  }\n\n  onRunStart(aggregatedResults, options) {\n    super.onRunStart(aggregatedResults, options);\n    this._estimatedTime = options.estimatedTime;\n  }\n\n  onRunComplete(contexts, aggregatedResults) {\n    const numTotalTestSuites = aggregatedResults.numTotalTestSuites,\n          testResults = aggregatedResults.testResults,\n          wasInterrupted = aggregatedResults.wasInterrupted;\n\n    if (numTotalTestSuites) {\n      const lastResult = testResults[testResults.length - 1]; // Print a newline if the last test did not fail to line up newlines\n      // similar to when an error would have been thrown in the test.\n\n      if (!this._globalConfig.verbose && lastResult && !lastResult.numFailingTests && !lastResult.testExecError) {\n        this.log('');\n      }\n\n      this._printSummary(aggregatedResults, this._globalConfig);\n\n      this._printSnapshotSummary(aggregatedResults.snapshot, this._globalConfig);\n\n      if (numTotalTestSuites) {\n        let message = (0, _utils.getSummary)(aggregatedResults, {\n          estimatedTime: this._estimatedTime\n        });\n\n        if (!this._globalConfig.silent) {\n          message += '\\n' + (wasInterrupted ? _chalk().default.bold.red('Test run was interrupted.') : this._getTestSummary(contexts, this._globalConfig));\n        }\n\n        this.log(message);\n      }\n    }\n  }\n\n  _printSnapshotSummary(snapshots, globalConfig) {\n    if (snapshots.added || snapshots.filesRemoved || snapshots.unchecked || snapshots.unmatched || snapshots.updated) {\n      let updateCommand;\n      const event = npm_lifecycle_event || '';\n      const prefix = NPM_EVENTS.has(event) ? '' : 'run ';\n      const isYarn = typeof npm_config_user_agent === 'string' && npm_config_user_agent.includes('yarn');\n      const client = isYarn ? 'yarn' : 'npm';\n      const scriptUsesJest = typeof npm_lifecycle_script === 'string' && npm_lifecycle_script.includes('jest');\n\n      if (globalConfig.watch || globalConfig.watchAll) {\n        updateCommand = 'press `u`';\n      } else if (event && scriptUsesJest) {\n        updateCommand = \"run `\".concat(client + ' ' + prefix + event + (isYarn ? '' : ' --'), \" -u`\");\n      } else {\n        updateCommand = 're-run jest with `-u`';\n      }\n\n      const snapshotSummary = (0, _get_snapshot_summary.default)(snapshots, globalConfig, updateCommand);\n      snapshotSummary.forEach(this.log);\n      this.log(''); // print empty line\n    }\n  }\n\n  _printSummary(aggregatedResults, globalConfig) {\n    // If there were any failing tests and there was a large number of tests\n    // executed, re-print the failing results at the end of execution output.\n    const failedTests = aggregatedResults.numFailedTests;\n    const runtimeErrors = aggregatedResults.numRuntimeErrorTestSuites;\n\n    if (failedTests + runtimeErrors > 0 && aggregatedResults.numTotalTestSuites > TEST_SUMMARY_THRESHOLD) {\n      this.log(_chalk().default.bold('Summary of all failing tests'));\n      aggregatedResults.testResults.forEach(testResult => {\n        const failureMessage = testResult.failureMessage;\n\n        if (failureMessage) {\n          this._write((0, _get_result_header.default)(testResult, globalConfig) + '\\n' + failureMessage + '\\n');\n        }\n      });\n      this.log(''); // print empty line\n    }\n  }\n\n  _getTestSummary(contexts, globalConfig) {\n    const getMatchingTestsInfo = () => {\n      const prefix = globalConfig.findRelatedTests ? ' related to files matching ' : ' matching ';\n      return _chalk().default.dim(prefix) + (0, _jestUtil().testPathPatternToRegExp)(globalConfig.testPathPattern).toString();\n    };\n\n    let testInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      testInfo = _chalk().default.dim(' within paths');\n    } else if (globalConfig.onlyChanged) {\n      testInfo = _chalk().default.dim(' related to changed files');\n    } else if (globalConfig.testPathPattern) {\n      testInfo = getMatchingTestsInfo();\n    }\n\n    let nameInfo = '';\n\n    if (globalConfig.runTestsByPath) {\n      nameInfo = ' ' + globalConfig.nonFlagArgs.map(p => \"\\\"\".concat(p, \"\\\"\")).join(', ');\n    } else if (globalConfig.testNamePattern) {\n      nameInfo = _chalk().default.dim(' with tests matching ') + \"\\\"\".concat(globalConfig.testNamePattern, \"\\\"\");\n    }\n\n    const contextInfo = contexts.size > 1 ? _chalk().default.dim(' in ') + contexts.size + _chalk().default.dim(' projects') : '';\n    return _chalk().default.dim('Ran all test suites') + testInfo + nameInfo + contextInfo + _chalk().default.dim('.');\n  }\n\n}\n\nexports.default = SummaryReporter;","map":null,"metadata":{},"sourceType":"script"}