{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _defaultConfig = _interopRequireDefault(require('./defaultConfig'));\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nlet hasDeprecationWarnings = false;\n\nconst shouldSkipValidationForPath = (path, key, blacklist) => blacklist ? blacklist.includes([...path, key].join('.')) : false;\n\nconst _validate = (config, exampleConfig, options, path = []) => {\n  if (typeof config !== 'object' || config == null || typeof exampleConfig !== 'object' || exampleConfig == null) {\n    return {\n      hasDeprecationWarnings\n    };\n  }\n\n  for (const key in config) {\n    if (options.deprecatedConfig && key in options.deprecatedConfig && typeof options.deprecate === 'function') {\n      const isDeprecatedKey = options.deprecate(config, key, options.deprecatedConfig, options);\n      hasDeprecationWarnings = hasDeprecationWarnings || isDeprecatedKey;\n    } else if (allowsMultipleTypes(key)) {\n      const value = config[key];\n\n      if (typeof options.condition === 'function' && typeof options.error === 'function') {\n        if (key === 'maxWorkers' && !isOfTypeStringOrNumber(value)) {\n          throw new _utils.ValidationError('Validation Error', \"\".concat(key, \" has to be of type string or number\"), \"maxWorkers=50% or\\nmaxWorkers=3\");\n        }\n      }\n    } else if (Object.hasOwnProperty.call(exampleConfig, key)) {\n      if (typeof options.condition === 'function' && typeof options.error === 'function' && !options.condition(config[key], exampleConfig[key])) {\n        options.error(key, config[key], exampleConfig[key], options, path);\n      }\n    } else if (shouldSkipValidationForPath(path, key, options.recursiveBlacklist)) {// skip validating unknown options inside blacklisted paths\n    } else {\n      options.unknown && options.unknown(config, exampleConfig, key, options, path);\n    }\n\n    if (options.recursive && !Array.isArray(exampleConfig[key]) && options.recursiveBlacklist && !shouldSkipValidationForPath(path, key, options.recursiveBlacklist)) {\n      _validate(config[key], exampleConfig[key], options, [...path, key]);\n    }\n  }\n\n  return {\n    hasDeprecationWarnings\n  };\n};\n\nconst allowsMultipleTypes = key => key === 'maxWorkers';\n\nconst isOfTypeStringOrNumber = value => typeof value === 'number' || typeof value === 'string';\n\nconst validate = (config, options) => {\n  hasDeprecationWarnings = false; // Preserve default blacklist entries even with user-supplied blacklist\n\n  const combinedBlacklist = [...(_defaultConfig.default.recursiveBlacklist || []), ...(options.recursiveBlacklist || [])];\n  const defaultedOptions = Object.assign(_objectSpread({}, _defaultConfig.default, options, {\n    recursiveBlacklist: combinedBlacklist,\n    title: options.title || _defaultConfig.default.title\n  }));\n\n  const _validate2 = _validate(config, options.exampleConfig, defaultedOptions),\n        hdw = _validate2.hasDeprecationWarnings;\n\n  return {\n    hasDeprecationWarnings: hdw,\n    isValid: true\n  };\n};\n\nvar _default = validate;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}