{"ast":null,"code":"'use strict';\n\nconst _process$env = process.env,\n      FORCE_COLOR = _process$env.FORCE_COLOR,\n      NODE_DISABLE_COLORS = _process$env.NODE_DISABLE_COLORS,\n      TERM = _process$env.TERM;\nconst $ = {\n  enabled: !NODE_DISABLE_COLORS && TERM !== 'dumb' && FORCE_COLOR !== '0',\n  // modifiers\n  reset: init(0, 0),\n  bold: init(1, 22),\n  dim: init(2, 22),\n  italic: init(3, 23),\n  underline: init(4, 24),\n  inverse: init(7, 27),\n  hidden: init(8, 28),\n  strikethrough: init(9, 29),\n  // colors\n  black: init(30, 39),\n  red: init(31, 39),\n  green: init(32, 39),\n  yellow: init(33, 39),\n  blue: init(34, 39),\n  magenta: init(35, 39),\n  cyan: init(36, 39),\n  white: init(37, 39),\n  gray: init(90, 39),\n  grey: init(90, 39),\n  // background colors\n  bgBlack: init(40, 49),\n  bgRed: init(41, 49),\n  bgGreen: init(42, 49),\n  bgYellow: init(43, 49),\n  bgBlue: init(44, 49),\n  bgMagenta: init(45, 49),\n  bgCyan: init(46, 49),\n  bgWhite: init(47, 49)\n};\n\nfunction run(arr, str) {\n  let i = 0,\n      tmp,\n      beg = '',\n      end = '';\n\n  for (; i < arr.length; i++) {\n    tmp = arr[i];\n    beg += tmp.open;\n    end += tmp.close;\n\n    if (str.includes(tmp.close)) {\n      str = str.replace(tmp.rgx, tmp.close + tmp.open);\n    }\n  }\n\n  return beg + str + end;\n}\n\nfunction chain(has, keys) {\n  let ctx = {\n    has,\n    keys\n  };\n  ctx.reset = $.reset.bind(ctx);\n  ctx.bold = $.bold.bind(ctx);\n  ctx.dim = $.dim.bind(ctx);\n  ctx.italic = $.italic.bind(ctx);\n  ctx.underline = $.underline.bind(ctx);\n  ctx.inverse = $.inverse.bind(ctx);\n  ctx.hidden = $.hidden.bind(ctx);\n  ctx.strikethrough = $.strikethrough.bind(ctx);\n  ctx.black = $.black.bind(ctx);\n  ctx.red = $.red.bind(ctx);\n  ctx.green = $.green.bind(ctx);\n  ctx.yellow = $.yellow.bind(ctx);\n  ctx.blue = $.blue.bind(ctx);\n  ctx.magenta = $.magenta.bind(ctx);\n  ctx.cyan = $.cyan.bind(ctx);\n  ctx.white = $.white.bind(ctx);\n  ctx.gray = $.gray.bind(ctx);\n  ctx.grey = $.grey.bind(ctx);\n  ctx.bgBlack = $.bgBlack.bind(ctx);\n  ctx.bgRed = $.bgRed.bind(ctx);\n  ctx.bgGreen = $.bgGreen.bind(ctx);\n  ctx.bgYellow = $.bgYellow.bind(ctx);\n  ctx.bgBlue = $.bgBlue.bind(ctx);\n  ctx.bgMagenta = $.bgMagenta.bind(ctx);\n  ctx.bgCyan = $.bgCyan.bind(ctx);\n  ctx.bgWhite = $.bgWhite.bind(ctx);\n  return ctx;\n}\n\nfunction init(open, close) {\n  let blk = {\n    open: \"\\x1B[\".concat(open, \"m\"),\n    close: \"\\x1B[\".concat(close, \"m\"),\n    rgx: new RegExp(\"\\\\x1b\\\\[\".concat(close, \"m\"), 'g')\n  };\n  return function (txt) {\n    if (this !== void 0 && this.has !== void 0) {\n      this.has.includes(open) || (this.has.push(open), this.keys.push(blk));\n      return txt === void 0 ? this : $.enabled ? run(this.keys, txt + '') : txt + '';\n    }\n\n    return txt === void 0 ? chain([open], [blk]) : $.enabled ? run([blk], txt + '') : txt + '';\n  };\n}\n\nmodule.exports = $;","map":null,"metadata":{},"sourceType":"script"}