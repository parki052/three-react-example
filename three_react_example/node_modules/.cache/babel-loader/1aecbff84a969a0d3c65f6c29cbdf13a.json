{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestUtil = require('jest-util');\n\nvar _ExpectationFailed = _interopRequireDefault(require('../ExpectationFailed'));\n\nvar _expectationResultFactory = _interopRequireDefault(require('../expectationResultFactory'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Suite {\n  constructor(attrs) {\n    _defineProperty(this, 'id', void 0);\n\n    _defineProperty(this, 'parentSuite', void 0);\n\n    _defineProperty(this, 'description', void 0);\n\n    _defineProperty(this, 'throwOnExpectationFailure', void 0);\n\n    _defineProperty(this, 'beforeFns', void 0);\n\n    _defineProperty(this, 'afterFns', void 0);\n\n    _defineProperty(this, 'beforeAllFns', void 0);\n\n    _defineProperty(this, 'afterAllFns', void 0);\n\n    _defineProperty(this, 'disabled', void 0);\n\n    _defineProperty(this, 'children', void 0);\n\n    _defineProperty(this, 'result', void 0);\n\n    _defineProperty(this, 'sharedContext', void 0);\n\n    _defineProperty(this, 'markedPending', void 0);\n\n    _defineProperty(this, 'markedTodo', void 0);\n\n    _defineProperty(this, 'isFocused', void 0);\n\n    this.markedPending = false;\n    this.markedTodo = false;\n    this.isFocused = false;\n    this.id = attrs.id;\n    this.parentSuite = attrs.parentSuite;\n    this.description = (0, _jestUtil.convertDescriptorToString)(attrs.description);\n    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;\n    this.beforeFns = [];\n    this.afterFns = [];\n    this.beforeAllFns = [];\n    this.afterAllFns = [];\n    this.disabled = false;\n    this.children = [];\n    this.result = {\n      id: this.id,\n      description: this.description,\n      fullName: this.getFullName(),\n      failedExpectations: [],\n      testPath: attrs.getTestPath()\n    };\n  }\n\n  getFullName() {\n    const fullName = [];\n\n    for (let parentSuite = this; parentSuite; parentSuite = parentSuite.parentSuite) {\n      if (parentSuite.parentSuite) {\n        fullName.unshift(parentSuite.description);\n      }\n    }\n\n    return fullName.join(' ');\n  }\n\n  disable() {\n    this.disabled = true;\n  }\n\n  pend(_message) {\n    this.markedPending = true;\n  }\n\n  beforeEach(fn) {\n    this.beforeFns.unshift(fn);\n  }\n\n  beforeAll(fn) {\n    this.beforeAllFns.push(fn);\n  }\n\n  afterEach(fn) {\n    this.afterFns.unshift(fn);\n  }\n\n  afterAll(fn) {\n    this.afterAllFns.unshift(fn);\n  }\n\n  addChild(child) {\n    this.children.push(child);\n  }\n\n  status() {\n    if (this.disabled) {\n      return 'disabled';\n    }\n\n    if (this.markedPending) {\n      return 'pending';\n    }\n\n    if (this.result.failedExpectations.length > 0) {\n      return 'failed';\n    } else {\n      return 'finished';\n    }\n  }\n\n  isExecutable() {\n    return !this.disabled;\n  }\n\n  canBeReentered() {\n    return this.beforeAllFns.length === 0 && this.afterAllFns.length === 0;\n  }\n\n  getResult() {\n    this.result.status = this.status();\n    return this.result;\n  }\n\n  sharedUserContext() {\n    if (!this.sharedContext) {\n      this.sharedContext = {};\n    }\n\n    return this.sharedContext;\n  }\n\n  clonedSharedUserContext() {\n    return this.sharedUserContext();\n  }\n\n  onException(...args) {\n    if (args[0] instanceof _ExpectationFailed.default) {\n      return;\n    }\n\n    if (isAfterAll(this.children)) {\n      const data = {\n        matcherName: '',\n        passed: false,\n        expected: '',\n        actual: '',\n        error: arguments[0]\n      };\n      this.result.failedExpectations.push((0, _expectationResultFactory.default)(data));\n    } else {\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.onException.apply(child, args);\n      }\n    }\n  }\n\n  addExpectationResult(...args) {\n    if (isAfterAll(this.children) && isFailure(args)) {\n      const data = args[1];\n      this.result.failedExpectations.push((0, _expectationResultFactory.default)(data));\n\n      if (this.throwOnExpectationFailure) {\n        throw new _ExpectationFailed.default();\n      }\n    } else {\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n\n        try {\n          child.addExpectationResult.apply(child, args);\n        } catch (e) {// keep going\n        }\n      }\n    }\n  }\n\n  execute(..._args) {}\n\n}\n\nexports.default = Suite;\n\nfunction isAfterAll(children) {\n  return children && children[0] && children[0].result.status;\n}\n\nfunction isFailure(args) {\n  return !args[0];\n}","map":null,"metadata":{},"sourceType":"script"}