{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = validateCLIOptions;\nexports.DOCUMENTATION_NOTE = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _camelcase() {\n  const data = _interopRequireDefault(require('camelcase'));\n\n  _camelcase = function _camelcase() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nvar _deprecated = require('./deprecated');\n\nvar _defaultConfig = _interopRequireDefault(require('./defaultConfig'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst BULLET = _chalk().default.bold('\\u25cf');\n\nconst DOCUMENTATION_NOTE = \"  \".concat(_chalk().default.bold('CLI Options Documentation:'), \"\\n  https://jestjs.io/docs/en/cli.html\\n\");\nexports.DOCUMENTATION_NOTE = DOCUMENTATION_NOTE;\n\nconst createCLIValidationError = (unrecognizedOptions, allowedOptions) => {\n  let title = \"\".concat(BULLET, \" Unrecognized CLI Parameter\");\n  let message;\n  const comment = \"  \".concat(_chalk().default.bold('CLI Options Documentation'), \":\\n\") + \"  https://jestjs.io/docs/en/cli.html\\n\";\n\n  if (unrecognizedOptions.length === 1) {\n    const unrecognized = unrecognizedOptions[0];\n    const didYouMeanMessage = (0, _utils.createDidYouMeanMessage)(unrecognized, Array.from(allowedOptions));\n    message = \"  Unrecognized option \".concat(_chalk().default.bold((0, _utils.format)(unrecognized)), \".\") + (didYouMeanMessage ? \" \".concat(didYouMeanMessage) : '');\n  } else {\n    title += 's';\n    message = \"  Following options were not recognized:\\n\" + \"  \".concat(_chalk().default.bold((0, _utils.format)(unrecognizedOptions)));\n  }\n\n  return new _utils.ValidationError(title, message, comment);\n};\n\nconst logDeprecatedOptions = (deprecatedOptions, deprecationEntries, argv) => {\n  deprecatedOptions.forEach(opt => {\n    (0, _deprecated.deprecationWarning)(argv, opt, deprecationEntries, _objectSpread({}, _defaultConfig.default, {\n      comment: DOCUMENTATION_NOTE\n    }));\n  });\n};\n\nfunction validateCLIOptions(argv, options, rawArgv = []) {\n  const yargsSpecialOptions = ['$0', '_', 'help', 'h'];\n  const deprecationEntries = options.deprecationEntries || {};\n  const allowedOptions = Object.keys(options).reduce((acc, option) => acc.add(option).add(options[option].alias || option), new Set(yargsSpecialOptions));\n  const unrecognizedOptions = Object.keys(argv).filter(arg => !allowedOptions.has((0, _camelcase().default)(arg)) && (!rawArgv.length || rawArgv.includes(arg)), []);\n\n  if (unrecognizedOptions.length) {\n    throw createCLIValidationError(unrecognizedOptions, allowedOptions);\n  }\n\n  const CLIDeprecations = Object.keys(deprecationEntries).reduce((acc, entry) => {\n    if (options[entry]) {\n      acc[entry] = deprecationEntries[entry];\n      const alias = options[entry].alias;\n\n      if (alias) {\n        acc[alias] = deprecationEntries[entry];\n      }\n    }\n\n    return acc;\n  }, {});\n  const deprecations = new Set(Object.keys(CLIDeprecations));\n  const deprecatedOptions = Object.keys(argv).filter(arg => deprecations.has(arg) && argv[arg] != null);\n\n  if (deprecatedOptions.length) {\n    logDeprecatedOptions(deprecatedOptions, CLIDeprecations, argv);\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}