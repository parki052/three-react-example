{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.shouldRunInBand = shouldRunInBand;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst SLOW_TEST_TIME = 1000;\n\nfunction shouldRunInBand(tests, timings, {\n  detectOpenHandles,\n  maxWorkers,\n  watch,\n  watchAll\n}) {\n  // detectOpenHandles makes no sense without runInBand, because it cannot detect leaks in workers\n  if (detectOpenHandles) {\n    return true;\n  }\n  /*\n   * Run in band if we only have one test or one worker available, unless we\n   * are using the watch mode, in which case the TTY has to be responsive and\n   * we cannot schedule anything in the main thread. Same logic applies to\n   * watchAll.\n   * Also, if we are confident from previous runs that the tests will finish\n   * quickly we also run in band to reduce the overhead of spawning workers.\n   * Finally, the user can provide the runInBand argument in the CLI to\n   * force running in band.\n   * https://github.com/facebook/jest/blob/700e0dadb85f5dc8ff5dac6c7e98956690049734/packages/jest-config/src/getMaxWorkers.js#L14-L17\n   */\n\n\n  const isWatchMode = watch || watchAll;\n  const areFastTests = timings.every(timing => timing < SLOW_TEST_TIME);\n  const oneWorkerOrLess = maxWorkers <= 1;\n  const oneTestOrLess = tests.length <= 1;\n\n  if (isWatchMode) {\n    return oneWorkerOrLess || oneTestOrLess && areFastTests;\n  }\n\n  return oneWorkerOrLess || oneTestOrLess || tests.length <= 20 && timings.length > 0 && areFastTests;\n}","map":null,"metadata":{},"sourceType":"script"}