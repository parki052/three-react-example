{"ast":null,"code":"'use strict';\n\nconst color = require('kleur');\n\nconst Prompt = require('./prompt');\n\nconst _require = require('../util'),\n      style = _require.style,\n      clear = _require.clear,\n      figures = _require.figures,\n      wrap = _require.wrap;\n\nconst _require2 = require('sisteransi'),\n      cursor = _require2.cursor;\n/**\n * SelectPrompt Base Element\n * @param {Object} opts Options\n * @param {String} opts.message Message\n * @param {Array} opts.choices Array of choice objects\n * @param {String} [opts.hint] Hint to display\n * @param {Number} [opts.initial] Index of default value\n * @param {Stream} [opts.stdin] The Readable stream to listen to\n * @param {Stream} [opts.stdout] The Writable stream to write readline data to\n */\n\n\nclass SelectPrompt extends Prompt {\n  constructor(opts = {}) {\n    super(opts);\n    this.msg = opts.message;\n    this.hint = opts.hint || '- Use arrow-keys. Return to submit.';\n    this.warn = opts.warn || '- This option is disabled';\n    this.cursor = opts.initial || 0;\n    this.choices = opts.choices.map((ch, idx) => {\n      if (typeof ch === 'string') ch = {\n        title: ch,\n        value: idx\n      };\n      return {\n        title: ch && (ch.title || ch.value || ch),\n        value: ch && (ch.value || idx),\n        description: ch && ch.description,\n        selected: ch && ch.selected,\n        disabled: ch && ch.disabled\n      };\n    });\n    this.value = (this.choices[this.cursor] || {}).value;\n    this.clear = clear('');\n    this.render();\n  }\n\n  moveCursor(n) {\n    this.cursor = n;\n    this.value = this.choices[n].value;\n    this.fire();\n  }\n\n  reset() {\n    this.moveCursor(0);\n    this.fire();\n    this.render();\n  }\n\n  abort() {\n    this.done = this.aborted = true;\n    this.fire();\n    this.render();\n    this.out.write('\\n');\n    this.close();\n  }\n\n  submit() {\n    if (!this.selection.disabled) {\n      this.done = true;\n      this.aborted = false;\n      this.fire();\n      this.render();\n      this.out.write('\\n');\n      this.close();\n    } else this.bell();\n  }\n\n  first() {\n    this.moveCursor(0);\n    this.render();\n  }\n\n  last() {\n    this.moveCursor(this.choices.length - 1);\n    this.render();\n  }\n\n  up() {\n    if (this.cursor === 0) return this.bell();\n    this.moveCursor(this.cursor - 1);\n    this.render();\n  }\n\n  down() {\n    if (this.cursor === this.choices.length - 1) return this.bell();\n    this.moveCursor(this.cursor + 1);\n    this.render();\n  }\n\n  next() {\n    this.moveCursor((this.cursor + 1) % this.choices.length);\n    this.render();\n  }\n\n  _(c, key) {\n    if (c === ' ') return this.submit();\n  }\n\n  get selection() {\n    return this.choices[this.cursor];\n  }\n\n  render() {\n    if (this.closed) return;\n    if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText));\n    super.render(); // Print prompt\n\n    this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.done ? this.selection.title : this.selection.disabled ? color.yellow(this.warn) : color.gray(this.hint)].join(' '); // Print choices\n\n    if (!this.done) {\n      this.outputText += '\\n' + this.choices.map((v, i) => {\n        let title,\n            prefix,\n            desc = '';\n\n        if (v.disabled) {\n          title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);\n          prefix = this.cursor === i ? color.bold().gray(figures.pointer) + ' ' : '  ';\n        } else {\n          title = this.cursor === i ? color.cyan().underline(v.title) : v.title;\n          prefix = this.cursor === i ? color.cyan(figures.pointer) + ' ' : '  ';\n\n          if (v.description && this.cursor === i) {\n            desc = \" - \".concat(v.description);\n\n            if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\\r?\\n/).length > 1) {\n              desc = '\\n' + wrap(v.description, {\n                margin: 3,\n                width: this.out.columns\n              });\n            }\n          }\n        }\n\n        return \"\".concat(prefix, \" \").concat(title).concat(color.gray(desc));\n      }).join('\\n');\n    }\n\n    this.out.write(this.outputText);\n  }\n\n}\n\nmodule.exports = SelectPrompt;","map":null,"metadata":{},"sourceType":"script"}