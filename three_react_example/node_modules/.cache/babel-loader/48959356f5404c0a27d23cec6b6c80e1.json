{"ast":null,"code":"/*\n Copyright 2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst mkdirp = require('make-dir');\n\nconst rimraf = require('rimraf');\n/* This exists for compatibility only to avoid changing the\n * prototype chain. */\n\n\nclass SourceStore {}\n\nclass MemoryStore extends SourceStore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  registerSource(filePath, sourceText) {\n    this.data[filePath] = sourceText;\n  }\n\n  getSource(filePath) {\n    return this.data[filePath] || null;\n  }\n\n  dispose() {}\n\n}\n\nclass FileStore extends SourceStore {\n  constructor(opts = {}) {\n    super();\n    const tmpDir = opts.tmpdir || os.tmpdir();\n    this.counter = 0;\n    this.mappings = [];\n    this.basePath = path.resolve(tmpDir, '.istanbul', 'cache_');\n    mkdirp.sync(path.dirname(this.basePath));\n  }\n\n  registerSource(filePath, sourceText) {\n    if (this.mappings[filePath]) {\n      return;\n    }\n\n    this.counter += 1;\n    const mapFile = this.basePath + this.counter;\n    this.mappings[filePath] = mapFile;\n    fs.writeFileSync(mapFile, sourceText, 'utf8');\n  }\n\n  getSource(filePath) {\n    const mapFile = this.mappings[filePath];\n\n    if (!mapFile) {\n      return null;\n    }\n\n    return fs.readFileSync(mapFile, 'utf8');\n  }\n\n  dispose() {\n    this.mappings = [];\n    rimraf.sync(path.dirname(this.basePath));\n  }\n\n}\n\nmodule.exports = {\n  create(type = 'memory', opts = {}) {\n    if (type.toLowerCase() === 'file') {\n      return new FileStore(opts);\n    }\n\n    return new MemoryStore(opts);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}