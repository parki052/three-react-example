{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\n\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    this.el.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"blue\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    let animate = function () {\n      fitCanvasToDisplaySize(false, renderer, camera);\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.el = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","RGBA_ASTC_10x5_Format","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","el","appendChild","domElement","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","fitCanvasToDisplaySize","force","canvas","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","render","requestAnimationFrame","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n\n    this.el.appendChild(renderer.domElement);\n\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n    let light = new Three.AmbientLight(\"blue\");\n\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    let animate = function() {\n      fitCanvasToDisplaySize(false, renderer, camera);\n\n\t  renderer.render(scene, camera);\n\t  requestAnimationFrame(animate);\n    };\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n  render() {\n    return <div ref={ref => (this.el = ref)}/>;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}