{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function _jestRegexUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _default = (globalConfig, options = {}) => {\n  const newConfig = _objectSpread({}, globalConfig);\n\n  if (options.mode === 'watch') {\n    newConfig.watch = true;\n    newConfig.watchAll = false;\n  } else if (options.mode === 'watchAll') {\n    newConfig.watch = false;\n    newConfig.watchAll = true;\n  }\n\n  if (options.testNamePattern !== undefined) {\n    newConfig.testNamePattern = options.testNamePattern || '';\n  }\n\n  if (options.testPathPattern !== undefined) {\n    newConfig.testPathPattern = (0, _jestRegexUtil().replacePathSepForRegex)(options.testPathPattern) || '';\n  }\n\n  newConfig.onlyChanged = false;\n  newConfig.onlyChanged = !newConfig.watchAll && !newConfig.testNamePattern && !newConfig.testPathPattern;\n\n  if (typeof options.bail === 'boolean') {\n    newConfig.bail = options.bail ? 1 : 0;\n  } else if (options.bail !== undefined) {\n    newConfig.bail = options.bail;\n  }\n\n  if (options.changedSince !== undefined) {\n    newConfig.changedSince = options.changedSince;\n  }\n\n  if (options.collectCoverage !== undefined) {\n    newConfig.collectCoverage = options.collectCoverage || false;\n  }\n\n  if (options.collectCoverageFrom !== undefined) {\n    newConfig.collectCoverageFrom = options.collectCoverageFrom;\n  }\n\n  if (options.collectCoverageOnlyFrom !== undefined) {\n    newConfig.collectCoverageOnlyFrom = options.collectCoverageOnlyFrom;\n  }\n\n  if (options.coverageDirectory !== undefined) {\n    newConfig.coverageDirectory = options.coverageDirectory;\n  }\n\n  if (options.coverageReporters !== undefined) {\n    newConfig.coverageReporters = options.coverageReporters;\n  }\n\n  if (options.noSCM) {\n    newConfig.noSCM = true;\n  }\n\n  if (options.notify !== undefined) {\n    newConfig.notify = options.notify || false;\n  }\n\n  if (options.notifyMode !== undefined) {\n    newConfig.notifyMode = options.notifyMode;\n  }\n\n  if (options.onlyFailures !== undefined) {\n    newConfig.onlyFailures = options.onlyFailures || false;\n  }\n\n  if (options.passWithNoTests !== undefined) {\n    newConfig.passWithNoTests = true;\n  }\n\n  if (options.reporters !== undefined) {\n    newConfig.reporters = options.reporters;\n  }\n\n  if (options.updateSnapshot !== undefined) {\n    newConfig.updateSnapshot = options.updateSnapshot;\n  }\n\n  if (options.verbose !== undefined) {\n    newConfig.verbose = options.verbose || false;\n  }\n\n  return Object.freeze(newConfig);\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}