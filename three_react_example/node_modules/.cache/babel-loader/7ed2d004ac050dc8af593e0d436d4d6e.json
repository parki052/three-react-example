{"ast":null,"code":"import * as Three from \"three\";\nexport const buildScene = el => {\n  let scene = new Three.Scene();\n  let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n  let renderer = new Three.WebGLRenderer();\n  let items = [];\n  el.appendChild(renderer.domElement);\n  let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n  let floorMaterial = new Three.MeshStandardMaterial();\n  let floor = new Three.Mesh(floorGeometry, floorMaterial);\n  let cubeGeometry = new Three.BoxGeometry(1, 1, 1);\n  let cubeMaterial = new Three.MeshNormalMaterial();\n  let cube = new Three.Mesh(cubeGeometry, cubeMaterial);\n  let light = new Three.AmbientLight(\"blue\");\n  cube.position.y += 2;\n  items.push(floor, cube);\n  scene.add(light);\n  scene.add(floor);\n  scene.add(cube);\n  camera.position.z = 5;\n  camera.position.y = 2;\n  run(scene, renderer, camera, items);\n};\n\nconst fitCanvasToDisplaySize = (force, renderer, camera) => {\n  if (!renderer) return;\n  const canvas = renderer.domElement;\n  const width = canvas.clientWidth;\n  const height = canvas.clientHeight;\n\n  if (force || canvas.width !== width || canvas.height !== height) {\n    renderer.setSize(width, height, false);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n};\n\nconst animate = (scene, renderer, camera, items) => {\n  if (!renderer) return;\n  fitCanvasToDisplaySize(false, renderer, camera);\n  items[cube].rotation.y += 1;\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\n\nconst run = (scene, renderer, camera) => {\n  animate(scene, renderer, camera);\n  fitCanvasToDisplaySize(true, renderer, camera);\n  requestAnimationFrame(animate);\n};","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\App\\initialization.js"],"names":["Three","buildScene","el","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","items","appendChild","domElement","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","cubeGeometry","cubeMaterial","MeshNormalMaterial","cube","light","AmbientLight","position","y","push","add","z","run","fitCanvasToDisplaySize","force","canvas","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","rotation","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as Three from \"three\";\r\n\r\nexport const buildScene = (el) => {\r\n    let scene = new Three.Scene();\r\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\r\n    let renderer = new Three.WebGLRenderer();\r\n    let items = [];\r\n\r\n    el.appendChild(renderer.domElement);\r\n\r\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\r\n    let floorMaterial = new Three.MeshStandardMaterial();\r\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\r\n\r\n    let cubeGeometry = new Three.BoxGeometry(1, 1, 1);\r\n    let cubeMaterial = new Three.MeshNormalMaterial();\r\n    let cube = new Three.Mesh(cubeGeometry, cubeMaterial);\r\n\r\n    let light = new Three.AmbientLight(\"blue\");\r\n\r\n    cube.position.y += 2;\r\n    items.push(floor, cube)\r\n    scene.add(light);\r\n    scene.add(floor);\r\n    scene.add(cube);\r\n    camera.position.z = 5;\r\n    camera.position.y = 2;\r\n\r\n    run(scene, renderer, camera, items);\r\n}\r\n\r\nconst fitCanvasToDisplaySize = (force, renderer, camera) => {\r\n    if(!renderer) return;\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    if (force || canvas.width !== width || canvas.height !== height) {\r\n      renderer.setSize(width, height, false);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n    }   \r\n}\r\nconst animate = (scene, renderer, camera, items) => {\r\n    if(!renderer) return;\r\n    fitCanvasToDisplaySize(false, renderer, camera);\r\n\r\n    items[cube].rotation.y += 1;\r\n    \r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\nconst run = (scene, renderer, camera) => {\r\n    animate(scene, renderer, camera);\r\n    fitCanvasToDisplaySize(true, renderer, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}