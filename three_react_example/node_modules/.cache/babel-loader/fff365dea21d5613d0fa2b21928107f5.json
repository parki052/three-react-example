{"ast":null,"code":"var RSVP = require('rsvp');\n\nvar exit;\nvar handlers = [];\nvar lastTime;\nvar isExiting = false;\nprocess.on('beforeExit', function (code) {\n  if (handlers.length === 0) {\n    return;\n  }\n\n  var own = lastTime = module.exports._flush(lastTime, code).finally(function () {\n    // if an onExit handler has called process.exit, do not disturb\n    // `lastTime`.\n    //\n    // Otherwise, clear `lastTime` so that we know to synchronously call the\n    // real `process.exit` with the given exit code, when our captured\n    // `process.exit` is called during a `process.on('exit')` handler\n    //\n    // This is impossible to reason about, don't feel bad.  Just look at\n    // test-natural-exit-subprocess-error.js\n    if (own === lastTime) {\n      lastTime = undefined;\n    }\n  });\n}); // This exists only for testing\n\nmodule.exports._reset = function () {\n  module.exports.releaseExit();\n  handlers = [];\n  lastTime = undefined;\n  isExiting = false;\n  firstExitCode = undefined;\n};\n/*\n * To allow cooperative async exit handlers, we unfortunately must hijack\n * process.exit.\n *\n * It allows a handler to ensure exit, without that exit handler impeding other\n * similar handlers\n *\n * for example, see: https://github.com/sindresorhus/ora/issues/27\n *\n */\n\n\nmodule.exports.releaseExit = function () {\n  if (exit) {\n    process.exit = exit;\n    exit = null;\n  }\n};\n\nvar firstExitCode;\n\nmodule.exports.captureExit = function () {\n  if (exit) {\n    // already captured, no need to do more work\n    return;\n  }\n\n  exit = process.exit;\n\n  process.exit = function (code) {\n    if (handlers.length === 0 && lastTime === undefined) {\n      // synchronously exit.\n      //\n      // We do this brecause either\n      //\n      //  1.  The process exited due to a call to `process.exit` but we have no\n      //      async work to do because no handlers had been attached.  It\n      //      doesn't really matter whether we take this branch or not in this\n      //      case.\n      //\n      //  2.  The process exited naturally.  We did our async work during\n      //      `beforeExit` and are in this function because someone else has\n      //      called `process.exit` during an `on('exit')` hook.  The only way\n      //      for us to preserve the exit code in this case is to exit\n      //      synchronously.\n      //\n      return exit.call(process, code);\n    }\n\n    if (firstExitCode === undefined) {\n      firstExitCode = code;\n    }\n\n    var own = lastTime = module.exports._flush(lastTime, firstExitCode).then(function () {\n      // if another chain has started, let it exit\n      if (own !== lastTime) {\n        return;\n      }\n\n      exit.call(process, firstExitCode);\n    }).catch(function (error) {\n      // if another chain has started, let it exit\n      if (own !== lastTime) {\n        throw error;\n      }\n\n      console.error(error);\n      exit.call(process, 1);\n    });\n  };\n};\n\nmodule.exports._handlers = handlers;\n\nmodule.exports._flush = function (lastTime, code) {\n  isExiting = true;\n  var work = handlers.splice(0, handlers.length);\n  return RSVP.Promise.resolve(lastTime).then(function () {\n    var firstRejected;\n    return RSVP.allSettled(work.map(function (handler) {\n      return RSVP.resolve(handler.call(null, code)).catch(function (e) {\n        if (!firstRejected) {\n          firstRejected = e;\n        }\n\n        throw e;\n      });\n    })).then(function (results) {\n      if (firstRejected) {\n        throw firstRejected;\n      }\n    });\n  });\n};\n\nmodule.exports.onExit = function (cb) {\n  if (!exit) {\n    throw new Error('Cannot install handler when exit is not captured.  Call `captureExit()` first');\n  }\n\n  if (isExiting) {\n    throw new Error('Cannot install handler while `onExit` handlers are running.');\n  }\n\n  var index = handlers.indexOf(cb);\n\n  if (index > -1) {\n    return;\n  }\n\n  handlers.push(cb);\n};\n\nmodule.exports.offExit = function (cb) {\n  var index = handlers.indexOf(cb);\n\n  if (index < 0) {\n    return;\n  }\n\n  handlers.splice(index, 1);\n};\n\nmodule.exports.exit = function () {\n  exit.apply(process, arguments);\n};\n\nmodule.exports.listenerCount = function () {\n  return handlers.length;\n};","map":null,"metadata":{},"sourceType":"script"}