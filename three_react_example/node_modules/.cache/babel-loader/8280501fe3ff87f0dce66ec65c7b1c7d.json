{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  const data = _interopRequireDefault(require('prompts'));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _questions = _interopRequireWildcard(require('./questions'));\n\nvar _errors = require('./errors');\n\nvar _constants = require('./constants');\n\nvar _generate_config_file = _interopRequireDefault(require('./generate_config_file'));\n\nvar _modify_package_json = _interopRequireDefault(require('./modify_package_json'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar _default =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(function* (rootDir = (0, _realpathNative().sync)(process.cwd())) {\n    // prerequisite checks\n    const projectPackageJsonPath = _path().default.join(rootDir, _constants.PACKAGE_JSON);\n\n    const jestConfigPath = _path().default.join(rootDir, _constants.JEST_CONFIG);\n\n    if (!_fs().default.existsSync(projectPackageJsonPath)) {\n      throw new _errors.NotFoundPackageJsonError(rootDir);\n    }\n\n    const questions = _questions.default.slice(0);\n\n    let hasJestProperty = false;\n    let hasJestConfig = false;\n    let projectPackageJson;\n\n    try {\n      projectPackageJson = JSON.parse(_fs().default.readFileSync(projectPackageJsonPath, 'utf-8'));\n    } catch (error) {\n      throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);\n    }\n\n    if (projectPackageJson.jest) {\n      hasJestProperty = true;\n    }\n\n    if (_fs().default.existsSync(jestConfigPath)) {\n      hasJestConfig = true;\n    }\n\n    if (hasJestProperty || hasJestConfig) {\n      const result = yield (0, _prompts().default)({\n        initial: true,\n        message: 'It seems that you already have a jest configuration, do you want to override it?',\n        name: 'continue',\n        type: 'confirm'\n      });\n\n      if (!result.continue) {\n        console.log();\n        console.log('Aborting...');\n        return;\n      }\n    } // Add test script installation only if needed\n\n\n    if (!projectPackageJson.scripts || projectPackageJson.scripts.test !== 'jest') {\n      questions.unshift(_questions.testScriptQuestion);\n    } // Start the init process\n\n\n    console.log();\n    console.log(_chalk().default.underline(\"The following questions will help Jest to create a suitable configuration for your project\\n\"));\n    let promptAborted = false; // @ts-ignore: Return type cannot be object - faulty typings\n\n    const results = yield (0, _prompts().default)(questions, {\n      onCancel: () => {\n        promptAborted = true;\n      }\n    });\n\n    if (promptAborted) {\n      console.log();\n      console.log('Aborting...');\n      return;\n    }\n\n    const shouldModifyScripts = results.scripts;\n\n    if (shouldModifyScripts || hasJestProperty) {\n      const modifiedPackageJson = (0, _modify_package_json.default)({\n        projectPackageJson,\n        shouldModifyScripts\n      });\n\n      _fs().default.writeFileSync(projectPackageJsonPath, modifiedPackageJson);\n\n      console.log('');\n      console.log(\"\\u270F\\uFE0F  Modified \".concat(_chalk().default.cyan(projectPackageJsonPath)));\n    }\n\n    const generatedConfig = (0, _generate_config_file.default)(results);\n\n    _fs().default.writeFileSync(jestConfigPath, generatedConfig);\n\n    console.log('');\n    console.log(\"\\uD83D\\uDCDD  Configuration file created at \".concat(_chalk().default.cyan(jestConfigPath)));\n  });\n\n  return function () {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}