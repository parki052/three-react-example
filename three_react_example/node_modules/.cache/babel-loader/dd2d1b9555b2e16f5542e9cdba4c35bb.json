{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require('execa'));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst env = _objectSpread({}, process.env, {\n  HGPLAIN: '1'\n});\n\nconst adapter = {\n  findChangedFiles: function () {\n    var _findChangedFiles = _asyncToGenerator(function* (cwd, options) {\n      const includePaths = options && options.includePaths || [];\n      const args = ['status', '-amnu'];\n\n      if (options && options.withAncestor) {\n        args.push('--rev', \"min((!public() & ::.)+.)^\");\n      } else if (options && options.changedSince) {\n        args.push('--rev', \"ancestor(., \".concat(options.changedSince, \")\"));\n      } else if (options && options.lastCommit === true) {\n        args.push('--change', '.');\n      }\n\n      args.push(...includePaths);\n      const result = yield (0, _execa().default)('hg', args, {\n        cwd,\n        env\n      });\n      return result.stdout.split('\\n').filter(s => s !== '').map(changedPath => _path().default.resolve(cwd, changedPath));\n    });\n\n    function findChangedFiles(_x, _x2) {\n      return _findChangedFiles.apply(this, arguments);\n    }\n\n    return findChangedFiles;\n  }(),\n  getRoot: function () {\n    var _getRoot = _asyncToGenerator(function* (cwd) {\n      try {\n        const result = yield (0, _execa().default)('hg', ['root'], {\n          cwd,\n          env\n        });\n        return result.stdout;\n      } catch (e) {\n        return null;\n      }\n    });\n\n    function getRoot(_x3) {\n      return _getRoot.apply(this, arguments);\n    }\n\n    return getRoot;\n  }()\n};\nvar _default = adapter;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}