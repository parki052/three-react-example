{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fitCanvasToDisplaySize = (force, renderer, camera) => {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    };\n\n    this.animate = (renderer, scene, camera) => {\n      this.fitCanvasToDisplaySize(false, renderer, camera);\n      renderer.render(scene, camera);\n      requestAnimationFrame(this.animate);\n    };\n  }\n\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    this.el.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"blue\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n    this.animate(renderer, scene, camera);\n    this.fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(this.animate);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.el = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","RGBA_ASTC_10x5_Format","App","fitCanvasToDisplaySize","force","renderer","camera","canvas","domElement","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","scene","render","requestAnimationFrame","componentDidMount","Scene","PerspectiveCamera","WebGLRenderer","el","appendChild","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\n\nclass App extends Component {\n\n\tfitCanvasToDisplaySize = (force, renderer, camera) => {\n\t\tconst canvas = renderer.domElement;\n\t\tconst width = canvas.clientWidth;\n\t\tconst height = canvas.clientHeight;\n\t\n\t\tif (force || canvas.width !== width || canvas.height !== height) {\n\t\t  renderer.setSize(width, height, false);\n\t\t  camera.aspect = width / height;\n\t\t  camera.updateProjectionMatrix();\n\t\t}\n\t}\n\t\n    animate = (renderer, scene, camera) => {\n\t\tthis.fitCanvasToDisplaySize(false, renderer, camera);\n  \n\t\trenderer.render(scene, camera);\n\t\trequestAnimationFrame(this.animate);\n\t};\n\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n\n    this.el.appendChild(renderer.domElement);\n\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n    let light = new Three.AmbientLight(\"blue\");\n\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n\n\n\tthis.animate(renderer, scene, camera);\n    this.fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(this.animate);\n  }\n  render() {\n    return <div ref={ref => (this.el = ref)}/>;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}