{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // TODO: Make underscored props `private`\n\n\nclass TestPathPatternPrompt extends _jestWatcher().PatternPrompt {\n  constructor(pipe, prompt) {\n    super(pipe, prompt);\n\n    _defineProperty(this, '_searchSources', void 0);\n\n    this._entityName = 'filenames';\n  }\n\n  _onChange(pattern, options) {\n    super._onChange(pattern, options);\n\n    this._printPrompt(pattern);\n  }\n\n  _printPrompt(pattern) {\n    const pipe = this._pipe;\n    (0, _jestWatcher().printPatternCaret)(pattern, pipe);\n    (0, _jestWatcher().printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);\n  }\n\n  _getMatchedTests(pattern) {\n    let regex;\n\n    try {\n      regex = new RegExp(pattern, 'i');\n    } catch (e) {}\n\n    let tests = [];\n\n    if (regex && this._searchSources) {\n      this._searchSources.forEach(({\n        searchSource\n      }) => {\n        tests = tests.concat(searchSource.findMatchingTests(pattern).tests);\n      });\n    }\n\n    return tests;\n  }\n\n  updateSearchSources(searchSources) {\n    this._searchSources = searchSources;\n  }\n\n}\n\nexports.default = TestPathPatternPrompt;","map":null,"metadata":{},"sourceType":"script"}