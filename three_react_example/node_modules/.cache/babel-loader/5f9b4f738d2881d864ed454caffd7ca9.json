{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require('pretty-format'));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst format = value => (0, _prettyFormat().default)(value, {\n  min: true\n});\n\nvar _default = {\n  mapCoverage: () => \"  Option \".concat(_chalk().default.bold('\"mapCoverage\"'), \" has been removed, as it's no longer necessary.\\n\\n  Please update your configuration.\"),\n  preprocessorIgnorePatterns: function (_preprocessorIgnorePatterns) {\n    function preprocessorIgnorePatterns(_x) {\n      return _preprocessorIgnorePatterns.apply(this, arguments);\n    }\n\n    preprocessorIgnorePatterns.toString = function () {\n      return _preprocessorIgnorePatterns.toString();\n    };\n\n    return preprocessorIgnorePatterns;\n  }(options => \"  Option \".concat(_chalk().default.bold('\"preprocessorIgnorePatterns\"'), \" was replaced by \").concat(_chalk().default.bold('\"transformIgnorePatterns\"'), \", which support multiple preprocessors.\\n\\n  Jest now treats your current configuration as:\\n  {\\n    \").concat(_chalk().default.bold('\"transformIgnorePatterns\"'), \": \").concat(_chalk().default.bold(format(options.preprocessorIgnorePatterns)), \"\\n  }\\n\\n  Please update your configuration.\")),\n  scriptPreprocessor: function (_scriptPreprocessor) {\n    function scriptPreprocessor(_x2) {\n      return _scriptPreprocessor.apply(this, arguments);\n    }\n\n    scriptPreprocessor.toString = function () {\n      return _scriptPreprocessor.toString();\n    };\n\n    return scriptPreprocessor;\n  }(options => \"  Option \".concat(_chalk().default.bold('\"scriptPreprocessor\"'), \" was replaced by \").concat(_chalk().default.bold('\"transform\"'), \", which support multiple preprocessors.\\n\\n  Jest now treats your current configuration as:\\n  {\\n    \").concat(_chalk().default.bold('\"transform\"'), \": \").concat(_chalk().default.bold(\"{\\\".*\\\": \".concat(format(options.scriptPreprocessor), \"}\")), \"\\n  }\\n\\n  Please update your configuration.\")),\n  setupTestFrameworkScriptFile: function (_setupTestFrameworkScriptFile) {\n    function setupTestFrameworkScriptFile(_x3) {\n      return _setupTestFrameworkScriptFile.apply(this, arguments);\n    }\n\n    setupTestFrameworkScriptFile.toString = function () {\n      return _setupTestFrameworkScriptFile.toString();\n    };\n\n    return setupTestFrameworkScriptFile;\n  }(_options => \"  Option \".concat(_chalk().default.bold('\"setupTestFrameworkScriptFile\"'), \" was replaced by configuration \").concat(_chalk().default.bold('\"setupFilesAfterEnv\"'), \", which supports multiple paths.\\n\\n  Please update your configuration.\")),\n  testPathDirs: function (_testPathDirs) {\n    function testPathDirs(_x4) {\n      return _testPathDirs.apply(this, arguments);\n    }\n\n    testPathDirs.toString = function () {\n      return _testPathDirs.toString();\n    };\n\n    return testPathDirs;\n  }(options => \"  Option \".concat(_chalk().default.bold('\"testPathDirs\"'), \" was replaced by \").concat(_chalk().default.bold('\"roots\"'), \".\\n\\n  Jest now treats your current configuration as:\\n  {\\n    \").concat(_chalk().default.bold('\"roots\"'), \": \").concat(_chalk().default.bold(format(options.testPathDirs)), \"\\n  }\\n\\n  Please update your configuration.\\n  \"))\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}