{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getSequencer = exports.isJSONString = exports.getRunner = exports.getWatchPlugin = exports.getTestEnvironment = exports.resolveWithPrefix = exports._replaceRootDirTags = exports.replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function _jestResolve() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst BULLET = _chalk().default.bold('\\u25cf ');\n\nexports.BULLET = BULLET;\nconst DOCUMENTATION_NOTE = \"  \".concat(_chalk().default.bold('Configuration Documentation:'), \"\\n  https://jestjs.io/docs/configuration.html\\n\");\nexports.DOCUMENTATION_NOTE = DOCUMENTATION_NOTE;\n\nconst createValidationError = message => new (_jestValidate().ValidationError)(\"\".concat(BULLET, \"Validation Error\"), message, DOCUMENTATION_NOTE);\n\nconst resolve = (resolver, {\n  key,\n  filePath,\n  rootDir,\n  optional\n}) => {\n  const module = _jestResolve().default.findNodeModule(replaceRootDirInPath(rootDir, filePath), {\n    basedir: rootDir,\n    resolver: resolver || undefined\n  });\n\n  if (!module && !optional) {\n    throw createValidationError(\"  Module \".concat(_chalk().default.bold(filePath), \" in the \").concat(_chalk().default.bold(key), \" option was not found.\\n         \").concat(_chalk().default.bold('<rootDir>'), \" is: \").concat(rootDir));\n  } /// can cast as string since nulls will be thrown\n\n\n  return module;\n};\n\nexports.resolve = resolve;\n\nconst escapeGlobCharacters = path => path.replace(/([()*{}\\[\\]!?\\\\])/g, '\\\\$1');\n\nexports.escapeGlobCharacters = escapeGlobCharacters;\n\nconst replaceRootDirInPath = (rootDir, filePath) => {\n  if (!/^<rootDir>/.test(filePath)) {\n    return filePath;\n  }\n\n  return _path().default.resolve(rootDir, _path().default.normalize('./' + filePath.substr('<rootDir>'.length)));\n};\n\nexports.replaceRootDirInPath = replaceRootDirInPath;\n\nconst _replaceRootDirInObject = (rootDir, config) => {\n  const newConfig = {};\n\n  for (const configKey in config) {\n    newConfig[configKey] = configKey === 'rootDir' ? config[configKey] : _replaceRootDirTags(rootDir, config[configKey]);\n  }\n\n  return newConfig;\n};\n\nconst _replaceRootDirTags = (rootDir, config) => {\n  if (config == null) {\n    return config;\n  }\n\n  switch (typeof config) {\n    case 'object':\n      if (Array.isArray(config)) {\n        /// can be string[] or {}[]\n        return config.map(item => _replaceRootDirTags(rootDir, item));\n      }\n\n      if (config instanceof RegExp) {\n        return config;\n      }\n\n      return _replaceRootDirInObject(rootDir, config);\n\n    case 'string':\n      return replaceRootDirInPath(rootDir, config);\n  }\n\n  return config;\n};\n\nexports._replaceRootDirTags = _replaceRootDirTags;\n\nconst resolveWithPrefix = (resolver, {\n  filePath,\n  humanOptionName,\n  optionName,\n  prefix,\n  rootDir\n}) => {\n  const fileName = replaceRootDirInPath(rootDir, filePath);\n\n  let module = _jestResolve().default.findNodeModule(\"\".concat(prefix).concat(fileName), {\n    basedir: rootDir,\n    resolver: resolver || undefined\n  });\n\n  if (module) {\n    return module;\n  }\n\n  try {\n    return require.resolve(\"\".concat(prefix).concat(fileName));\n  } catch (e) {}\n\n  module = _jestResolve().default.findNodeModule(fileName, {\n    basedir: rootDir,\n    resolver: resolver || undefined\n  });\n\n  if (module) {\n    return module;\n  }\n\n  try {\n    return require.resolve(fileName);\n  } catch (e) {}\n\n  throw createValidationError(\"  \".concat(humanOptionName, \" \").concat(_chalk().default.bold(fileName), \" cannot be found. Make sure the \").concat(_chalk().default.bold(optionName), \" configuration option points to an existing node module.\"));\n};\n/**\n * Finds the test environment to use:\n *\n * 1. looks for jest-environment-<name> relative to project.\n * 1. looks for jest-environment-<name> relative to Jest.\n * 1. looks for <name> relative to project.\n * 1. looks for <name> relative to Jest.\n */\n\n\nexports.resolveWithPrefix = resolveWithPrefix;\n\nconst getTestEnvironment = ({\n  rootDir,\n  testEnvironment: filePath\n}) => resolveWithPrefix(undefined, {\n  filePath,\n  humanOptionName: 'Test environment',\n  optionName: 'testEnvironment',\n  prefix: 'jest-environment-',\n  rootDir\n});\n/**\n * Finds the watch plugins to use:\n *\n * 1. looks for jest-watch-<name> relative to project.\n * 1. looks for jest-watch-<name> relative to Jest.\n * 1. looks for <name> relative to project.\n * 1. looks for <name> relative to Jest.\n */\n\n\nexports.getTestEnvironment = getTestEnvironment;\n\nconst getWatchPlugin = (resolver, {\n  filePath,\n  rootDir\n}) => resolveWithPrefix(resolver, {\n  filePath,\n  humanOptionName: 'Watch plugin',\n  optionName: 'watchPlugins',\n  prefix: 'jest-watch-',\n  rootDir\n});\n/**\n * Finds the runner to use:\n *\n * 1. looks for jest-runner-<name> relative to project.\n * 1. looks for jest-runner-<name> relative to Jest.\n * 1. looks for <name> relative to project.\n * 1. looks for <name> relative to Jest.\n */\n\n\nexports.getWatchPlugin = getWatchPlugin;\n\nconst getRunner = (resolver, {\n  filePath,\n  rootDir\n}) => resolveWithPrefix(resolver, {\n  filePath,\n  humanOptionName: 'Jest Runner',\n  optionName: 'runner',\n  prefix: 'jest-runner-',\n  rootDir\n});\n\nexports.getRunner = getRunner; // newtype\n\nconst isJSONString = text => text != null && typeof text === 'string' && text.startsWith('{') && text.endsWith('}');\n\nexports.isJSONString = isJSONString;\n\nconst getSequencer = (resolver, {\n  filePath,\n  rootDir\n}) => resolveWithPrefix(resolver, {\n  filePath,\n  humanOptionName: 'Jest Sequencer',\n  optionName: 'testSequencer',\n  prefix: 'jest-sequencer-',\n  rootDir\n});\n\nexports.getSequencer = getSequencer;","map":null,"metadata":{},"sourceType":"script"}