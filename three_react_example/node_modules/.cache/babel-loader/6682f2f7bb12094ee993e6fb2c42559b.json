{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nclass CancelError extends Error {\n  constructor() {\n    super('Promise was canceled');\n    this.name = 'CancelError';\n  }\n\n}\n\nclass PCancelable {\n  static fn(fn) {\n    return function () {\n      const args = [].slice.apply(arguments);\n      return new PCancelable((onCancel, resolve, reject) => {\n        args.unshift(onCancel);\n        fn.apply(null, args).then(resolve, reject);\n      });\n    };\n  }\n\n  constructor(executor) {\n    this._pending = true;\n    this._canceled = false;\n    this._promise = new Promise((resolve, reject) => {\n      this._reject = reject;\n      return executor(fn => {\n        this._cancel = fn;\n      }, val => {\n        this._pending = false;\n        resolve(val);\n      }, err => {\n        this._pending = false;\n        reject(err);\n      });\n    });\n  }\n\n  then() {\n    return this._promise.then.apply(this._promise, arguments);\n  }\n\n  catch() {\n    return this._promise.catch.apply(this._promise, arguments);\n  }\n\n  cancel() {\n    if (!this._pending || this._canceled) {\n      return;\n    }\n\n    if (typeof this._cancel === 'function') {\n      try {\n        this._cancel();\n      } catch (err) {\n        this._reject(err);\n      }\n    }\n\n    this._canceled = true;\n\n    this._reject(new CancelError());\n  }\n\n  get canceled() {\n    return this._canceled;\n  }\n\n}\n\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;","map":null,"metadata":{},"sourceType":"script"}