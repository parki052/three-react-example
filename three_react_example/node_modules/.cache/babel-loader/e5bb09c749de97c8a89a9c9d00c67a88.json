{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _execa() {\n  const data = _interopRequireDefault(require('execa'));\n\n  _execa = function _execa() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nconst findChangedFilesUsingCommand =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(function* (args, cwd) {\n    const result = yield (0, _execa().default)('git', args, {\n      cwd\n    });\n    return result.stdout.split('\\n').filter(s => s !== '').map(changedPath => _path().default.resolve(cwd, changedPath));\n  });\n\n  return function findChangedFilesUsingCommand(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst adapter = {\n  findChangedFiles: function () {\n    var _findChangedFiles = _asyncToGenerator(function* (cwd, options) {\n      const changedSince = options && (options.withAncestor ? 'HEAD^' : options.changedSince);\n      const includePaths = (options && options.includePaths || []).map(absoluteRoot => _path().default.normalize(_path().default.relative(cwd, absoluteRoot)));\n\n      if (options && options.lastCommit) {\n        return findChangedFilesUsingCommand(['show', '--name-only', '--pretty=format:', 'HEAD'].concat(includePaths), cwd);\n      } else if (changedSince) {\n        const committed = yield findChangedFilesUsingCommand(['log', '--name-only', '--pretty=format:', 'HEAD', \"^\".concat(changedSince)].concat(includePaths), cwd);\n        const staged = yield findChangedFilesUsingCommand(['diff', '--cached', '--name-only'].concat(includePaths), cwd);\n        const unstaged = yield findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd);\n        return [...committed, ...staged, ...unstaged];\n      } else {\n        return findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd);\n      }\n    });\n\n    function findChangedFiles(_x3, _x4) {\n      return _findChangedFiles.apply(this, arguments);\n    }\n\n    return findChangedFiles;\n  }(),\n  getRoot: function () {\n    var _getRoot = _asyncToGenerator(function* (cwd) {\n      const options = ['rev-parse', '--show-cdup'];\n\n      try {\n        const result = yield (0, _execa().default)('git', options, {\n          cwd\n        });\n        return _path().default.resolve(cwd, result.stdout);\n      } catch (e) {\n        return null;\n      }\n    });\n\n    function getRoot(_x5) {\n      return _getRoot.apply(this, arguments);\n    }\n\n    return getRoot;\n  }()\n};\nvar _default = adapter;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}