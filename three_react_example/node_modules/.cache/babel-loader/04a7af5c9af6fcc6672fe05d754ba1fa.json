{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\n\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    renderer.setSize(renderer.domElement.innerWidth, renderer.domElement.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"white\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n      if (!renderer || !camera) return;\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    function animate(time) {\n      time *= 0.001;\n      fitCanvasToDisplaySize(false, renderer, camera);\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","domElement","mount","appendChild","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","fitCanvasToDisplaySize","force","canvas","width","clientWidth","height","clientHeight","aspect","updateProjectionMatrix","animate","time","requestAnimationFrame","render","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    let renderer = new Three.WebGLRenderer();\n\n    renderer.setSize(\n      renderer.domElement.innerWidth,\n      renderer.domElement.innerHeight\n    );\n    this.mount.appendChild(renderer.domElement);\n\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n    let light = new Three.AmbientLight(\"white\");\n\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n\t  if(!renderer || !camera) return; \n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n\t}\n\t\n    function animate(time) {\n      time *= 0.001;\n\n      fitCanvasToDisplaySize(false, renderer, camera);\n\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    fitCanvasToDisplaySize(true, renderer, camera);\n    animate();\n  }\n  render() {\n    return <div ref={ref => (this.mount = ref)} />;\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}