{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.createReporterError = createReporterError;\nexports.createArrayReporterError = createArrayReporterError;\nexports.validateReporters = validateReporters;\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestGetType() {\n  const data = _interopRequireDefault(require('jest-get-type'));\n\n  _jestGetType = function _jestGetType() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError('Invalid attempt to destructure non-iterable instance');\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i['return'] != null) _i['return']();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nconst validReporterTypes = ['array', 'string'];\nconst ERROR = \"\".concat(_utils.BULLET, \"Reporter Validation Error\");\n/**\n * Reporter Validation Error is thrown if the given arguments\n * within the reporter are not valid.\n *\n * This is a highly specific reporter error and in the future will be\n * merged with jest-validate. Till then, we can make use of it. It works\n * and that's what counts most at this time.\n */\n\nfunction createReporterError(reporterIndex, reporterValue) {\n  const errorMessage = \"  Reporter at index \".concat(reporterIndex, \" must be of type:\\n\") + \"    \".concat(_chalk().default.bold.green(validReporterTypes.join(' or ')), \"\\n\") + \"  but instead received:\\n\" + \"    \".concat(_chalk().default.bold.red((0, _jestGetType().default)(reporterValue)));\n  return new (_jestValidate().ValidationError)(ERROR, errorMessage, _utils.DOCUMENTATION_NOTE);\n}\n\nfunction createArrayReporterError(arrayReporter, reporterIndex, valueIndex, value, expectedType, valueName) {\n  const errorMessage = \"  Unexpected value for \".concat(valueName, \" \") + \"at index \".concat(valueIndex, \" of reporter at index \").concat(reporterIndex, \"\\n\") + '  Expected:\\n' + \"    \".concat(_chalk().default.bold.red(expectedType), \"\\n\") + '  Got:\\n' + \"    \".concat(_chalk().default.bold.green((0, _jestGetType().default)(value)), \"\\n\") + \"  Reporter configuration:\\n\" + \"    \".concat(_chalk().default.bold.green(JSON.stringify(arrayReporter, null, 2).split('\\n').join('\\n    ')));\n  return new (_jestValidate().ValidationError)(ERROR, errorMessage, _utils.DOCUMENTATION_NOTE);\n}\n\nfunction validateReporters(reporterConfig) {\n  return reporterConfig.every((reporter, index) => {\n    if (Array.isArray(reporter)) {\n      validateArrayReporter(reporter, index);\n    } else if (typeof reporter !== 'string') {\n      throw createReporterError(index, reporter);\n    }\n\n    return true;\n  });\n}\n\nfunction validateArrayReporter(arrayReporter, reporterIndex) {\n  const _arrayReporter = _slicedToArray(arrayReporter, 2),\n        path = _arrayReporter[0],\n        options = _arrayReporter[1];\n\n  if (typeof path !== 'string') {\n    throw createArrayReporterError(arrayReporter, reporterIndex, 0, path, 'string', 'Path');\n  } else if (typeof options !== 'object') {\n    throw createArrayReporterError(arrayReporter, reporterIndex, 1, options, 'object', 'Reporter Configuration');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}