{"ast":null,"code":"/*\n Copyright 2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst FileCoverage = require('istanbul-lib-coverage').classes.FileCoverage;\n\nfunction locString(loc) {\n  return [loc.start.line, loc.start.column, loc.end.line, loc.end.column].join(':');\n}\n\nclass MappedCoverage extends FileCoverage {\n  constructor(pathOrObj) {\n    super(pathOrObj);\n    this.meta = {\n      last: {\n        s: 0,\n        f: 0,\n        b: 0\n      },\n      seen: {}\n    };\n  }\n\n  addStatement(loc, hits) {\n    const key = 's:' + locString(loc);\n    const meta = this.meta;\n    let index = meta.seen[key];\n\n    if (index === undefined) {\n      index = meta.last.s;\n      meta.last.s += 1;\n      meta.seen[key] = index;\n      this.statementMap[index] = this.cloneLocation(loc);\n    }\n\n    this.s[index] = this.s[index] || 0;\n    this.s[index] += hits;\n    return index;\n  }\n\n  addFunction(name, decl, loc, hits) {\n    const key = 'f:' + locString(decl);\n    const meta = this.meta;\n    let index = meta.seen[key];\n\n    if (index === undefined) {\n      index = meta.last.f;\n      meta.last.f += 1;\n      meta.seen[key] = index;\n      name = name || \"(unknown_\".concat(index, \")\");\n      this.fnMap[index] = {\n        name,\n        decl: this.cloneLocation(decl),\n        loc: this.cloneLocation(loc)\n      };\n    }\n\n    this.f[index] = this.f[index] || 0;\n    this.f[index] += hits;\n    return index;\n  }\n\n  addBranch(type, loc, branchLocations, hits) {\n    const key = ['b', ...branchLocations.map(l => locString(l))].join(':');\n    const meta = this.meta;\n    let index = meta.seen[key];\n\n    if (index === undefined) {\n      index = meta.last.b;\n      meta.last.b += 1;\n      meta.seen[key] = index;\n      this.branchMap[index] = {\n        loc,\n        type,\n        locations: branchLocations.map(l => this.cloneLocation(l))\n      };\n    }\n\n    if (!this.b[index]) {\n      this.b[index] = branchLocations.map(() => 0);\n    }\n\n    hits.forEach((hit, i) => {\n      this.b[index][i] += hit;\n    });\n    return index;\n  }\n  /* Returns a clone of the location object with only the attributes of interest */\n\n\n  cloneLocation(loc) {\n    return {\n      start: {\n        line: loc.start.line,\n        column: loc.start.column\n      },\n      end: {\n        line: loc.end.line,\n        column: loc.end.column\n      }\n    };\n  }\n\n}\n\nmodule.exports = {\n  MappedCoverage\n};","map":null,"metadata":{},"sourceType":"script"}