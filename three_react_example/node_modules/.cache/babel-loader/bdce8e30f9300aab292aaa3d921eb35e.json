{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.options = exports.docs = exports.usage = exports.check = void 0;\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function _jestConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _isCi() {\n  const data = _interopRequireDefault(require('is-ci'));\n\n  _isCi = function _isCi() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst check = argv => {\n  if (argv.runInBand && argv.hasOwnProperty('maxWorkers')) {\n    throw new Error('Both --runInBand and --maxWorkers were specified, but these two ' + 'options do not make sense together. Which is it?');\n  }\n\n  var _arr = ['onlyChanged', 'lastCommit', 'changedFilesWithAncestor', 'changedSince'];\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    const key = _arr[_i];\n\n    if (argv[key] && argv.watchAll) {\n      throw new Error(\"Both --\".concat(key, \" and --watchAll were specified, but these two \") + 'options do not make sense together. Try the --watch option which ' + 'reruns only tests related to changed files.');\n    }\n  }\n\n  if (argv.findRelatedTests && argv._.length === 0) {\n    throw new Error('The --findRelatedTests option requires file paths to be specified.\\n' + 'Example usage: jest --findRelatedTests ./src/source.js ' + './src/index.js.');\n  }\n\n  if (argv.hasOwnProperty('maxWorkers') && argv.maxWorkers === undefined) {\n    throw new Error('The --maxWorkers (-w) option requires a number or string to be specified.\\n' + 'Example usage: jest --maxWorkers 2\\n' + 'Example usage: jest --maxWorkers 50%\\n' + 'Or did you mean --watch?');\n  }\n\n  if (argv.config && !(0, _jestConfig().isJSONString)(argv.config) && !argv.config.match(/\\.js(on)?$/)) {\n    throw new Error('The --config option requires a JSON string literal, or a file path with a .js or .json extension.\\n' + 'Example usage: jest --config ./jest.config.js');\n  }\n\n  return true;\n};\n\nexports.check = check;\nconst usage = 'Usage: $0 [--config=<pathToConfigFile>] [TestPathPattern]';\nexports.usage = usage;\nconst docs = 'Documentation: https://jestjs.io/';\nexports.docs = docs;\nconst options = {\n  all: {\n    default: undefined,\n    description: 'The opposite of `onlyChanged`. If `onlyChanged` is set by ' + 'default, running jest with `--all` will force Jest to run all tests ' + 'instead of running only tests related to changed files.',\n    type: 'boolean'\n  },\n  automock: {\n    default: undefined,\n    description: 'Automock all files by default.',\n    type: 'boolean'\n  },\n  bail: {\n    alias: 'b',\n    default: undefined,\n    description: 'Exit the test suite immediately after `n` number of failing tests.',\n    type: 'boolean'\n  },\n  browser: {\n    default: undefined,\n    description: 'Respect the \"browser\" field in package.json ' + 'when resolving modules. Some packages export different versions ' + 'based on whether they are operating in node.js or a browser.',\n    type: 'boolean'\n  },\n  cache: {\n    default: undefined,\n    description: 'Whether to use the transform cache. Disable the cache ' + 'using --no-cache.',\n    type: 'boolean'\n  },\n  cacheDirectory: {\n    description: 'The directory where Jest should store its cached ' + ' dependency information.',\n    type: 'string'\n  },\n  changedFilesWithAncestor: {\n    default: undefined,\n    description: 'Runs tests related to the current changes and the changes made in the ' + 'last commit. Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  changedSince: {\n    description: 'Runs tests related to the changes since the provided branch. If the ' + 'current branch has diverged from the given branch, then only changes ' + 'made locally will be tested. Behaves similarly to `--onlyChanged`.',\n    nargs: 1,\n    type: 'string'\n  },\n  ci: {\n    default: _isCi().default,\n    description: 'Whether to run Jest in continuous integration (CI) mode. ' + 'This option is on by default in most popular CI environments. It will ' + ' prevent snapshots from being written unless explicitly requested.',\n    type: 'boolean'\n  },\n  clearCache: {\n    default: undefined,\n    description: 'Clears the configured Jest cache directory and then exits. ' + 'Default directory can be found by calling jest --showConfig',\n    type: 'boolean'\n  },\n  clearMocks: {\n    default: undefined,\n    description: 'Automatically clear mock calls and instances between every ' + 'test. Equivalent to calling jest.clearAllMocks() between each test.',\n    type: 'boolean'\n  },\n  collectCoverage: {\n    default: undefined,\n    description: 'Alias for --coverage.',\n    type: 'boolean'\n  },\n  collectCoverageFrom: {\n    description: 'A glob pattern relative to <rootDir> matching the files that coverage ' + 'info needs to be collected from.',\n    type: 'string'\n  },\n  collectCoverageOnlyFrom: {\n    description: 'Explicit list of paths coverage will be restricted to.',\n    string: true,\n    type: 'array'\n  },\n  color: {\n    default: undefined,\n    description: 'Forces test results output color highlighting (even if ' + 'stdout is not a TTY). Set to false if you would like to have no colors.',\n    type: 'boolean'\n  },\n  colors: {\n    default: undefined,\n    description: 'Alias for `--color`.',\n    type: 'boolean'\n  },\n  config: {\n    alias: 'c',\n    description: 'The path to a jest config file specifying how to find ' + 'and execute tests. If no rootDir is set in the config, the directory ' + 'containing the config file is assumed to be the rootDir for the project.' + 'This can also be a JSON encoded value which Jest will use as configuration.',\n    type: 'string'\n  },\n  coverage: {\n    default: undefined,\n    description: 'Indicates that test coverage information should be ' + 'collected and reported in the output.',\n    type: 'boolean'\n  },\n  coverageDirectory: {\n    description: 'The directory where Jest should output its coverage files.',\n    type: 'string'\n  },\n  coveragePathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all file paths before executing the test. If the file path' + 'matches any of the patterns, coverage information will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  coverageReporters: {\n    description: 'A list of reporter names that Jest uses when writing ' + 'coverage reports. Any istanbul reporter can be used.',\n    string: true,\n    type: 'array'\n  },\n  coverageThreshold: {\n    description: 'A JSON string with which will be used to configure ' + 'minimum threshold enforcement for coverage results',\n    type: 'string'\n  },\n  debug: {\n    default: undefined,\n    description: 'Print debugging info about your jest config.',\n    type: 'boolean'\n  },\n  detectLeaks: {\n    default: false,\n    description: '**EXPERIMENTAL**: Detect memory leaks in tests. After executing a ' + 'test, it will try to garbage collect the global object used, and fail ' + 'if it was leaked',\n    type: 'boolean'\n  },\n  detectOpenHandles: {\n    default: false,\n    description: 'Print out remaining open handles preventing Jest from exiting at the ' + 'end of a test run. Implies `runInBand`.',\n    type: 'boolean'\n  },\n  env: {\n    description: 'The test environment used for all tests. This can point to ' + 'any file or node module. Examples: `jsdom`, `node` or ' + '`path/to/my-environment.js`',\n    type: 'string'\n  },\n  errorOnDeprecated: {\n    default: false,\n    description: 'Make calling deprecated APIs throw helpful error messages.',\n    type: 'boolean'\n  },\n  expand: {\n    alias: 'e',\n    default: undefined,\n    description: 'Use this flag to show full diffs instead of a patch.',\n    type: 'boolean'\n  },\n  filter: {\n    default: undefined,\n    description: 'Path to a module exporting a filtering function. This method receives ' + 'a list of tests which can be manipulated to exclude tests from ' + 'running. Especially useful when used in conjunction with a testing ' + 'infrastructure to filter known broken tests.',\n    type: 'string'\n  },\n  findRelatedTests: {\n    default: undefined,\n    description: 'Find related tests for a list of source files that were ' + 'passed in as arguments. Useful for pre-commit hook integration to run ' + 'the minimal amount of tests necessary.',\n    type: 'boolean'\n  },\n  forceExit: {\n    default: undefined,\n    description: 'Force Jest to exit after all tests have completed running. ' + 'This is useful when resources set up by test code cannot be ' + 'adequately cleaned up.',\n    type: 'boolean'\n  },\n  globalSetup: {\n    description: 'The path to a module that runs before All Tests.',\n    type: 'string'\n  },\n  globalTeardown: {\n    description: 'The path to a module that runs after All Tests.',\n    type: 'string'\n  },\n  globals: {\n    description: 'A JSON string with map of global variables that need ' + 'to be available in all test environments.',\n    type: 'string'\n  },\n  haste: {\n    description: 'A JSON string with map of variables for the haste module system',\n    type: 'string'\n  },\n  init: {\n    description: 'Generate a basic configuration file',\n    type: 'boolean'\n  },\n  json: {\n    default: undefined,\n    description: 'Prints the test results in JSON. This mode will send all ' + 'other test output and user messages to stderr.',\n    type: 'boolean'\n  },\n  lastCommit: {\n    default: undefined,\n    description: 'Run all tests affected by file changes in the last commit made. ' + 'Behaves similarly to `--onlyChanged`.',\n    type: 'boolean'\n  },\n  listTests: {\n    default: false,\n    description: 'Lists all tests Jest will run given the arguments and ' + 'exits. Most useful in a CI system together with `--findRelatedTests` ' + 'to determine the tests Jest will run based on specific files',\n    type: 'boolean'\n  },\n  logHeapUsage: {\n    default: undefined,\n    description: 'Logs the heap usage after every test. Useful to debug ' + 'memory leaks. Use together with `--runInBand` and `--expose-gc` in ' + 'node.',\n    type: 'boolean'\n  },\n  mapCoverage: {\n    default: undefined,\n    description: 'Maps code coverage reports against original source code ' + 'when transformers supply source maps.\\n\\nDEPRECATED',\n    type: 'boolean'\n  },\n  maxConcurrency: {\n    default: 5,\n    description: 'Specifies the maximum number of tests that are allowed to run' + 'concurrently. This only affects tests using `test.concurrent`.',\n    type: 'number'\n  },\n  maxWorkers: {\n    alias: 'w',\n    description: 'Specifies the maximum number of workers the worker-pool ' + 'will spawn for running tests. This defaults to the number of the ' + 'cores available on your machine. (its usually best not to override ' + 'this default)',\n    type: 'string'\n  },\n  moduleDirectories: {\n    description: 'An array of directory names to be searched recursively ' + \"up from the requiring module's location.\",\n    string: true,\n    type: 'array'\n  },\n  moduleFileExtensions: {\n    description: 'An array of file extensions your modules use. If you ' + 'require modules without specifying a file extension, these are the ' + 'extensions Jest will look for. ',\n    string: true,\n    type: 'array'\n  },\n  moduleNameMapper: {\n    description: 'A JSON string with a map from regular expressions to ' + 'module names that allow to stub out resources, like images or ' + 'styles with a single module',\n    type: 'string'\n  },\n  modulePathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all module paths before those paths are to be considered ' + '\"visible\" to the module loader.',\n    string: true,\n    type: 'array'\n  },\n  modulePaths: {\n    description: 'An alternative API to setting the NODE_PATH env variable, ' + 'modulePaths is an array of absolute paths to additional locations to ' + 'search when resolving modules.',\n    string: true,\n    type: 'array'\n  },\n  noStackTrace: {\n    default: undefined,\n    description: 'Disables stack trace in test results output',\n    type: 'boolean'\n  },\n  notify: {\n    default: undefined,\n    description: 'Activates notifications for test results.',\n    type: 'boolean'\n  },\n  notifyMode: {\n    default: 'failure-change',\n    description: 'Specifies when notifications will appear for test results.',\n    type: 'string'\n  },\n  onlyChanged: {\n    alias: 'o',\n    default: undefined,\n    description: 'Attempts to identify which tests to run based on which ' + \"files have changed in the current repository. Only works if you're \" + 'running tests in a git or hg repository at the moment.',\n    type: 'boolean'\n  },\n  onlyFailures: {\n    alias: 'f',\n    default: undefined,\n    description: 'Run tests that failed in the previous execution.',\n    type: 'boolean'\n  },\n  outputFile: {\n    description: 'Write test results to a file when the --json option is ' + 'also specified.',\n    type: 'string'\n  },\n  passWithNoTests: {\n    default: false,\n    description: 'Will not fail if no tests are found (for example while using `--testPathPattern`.)',\n    type: 'boolean'\n  },\n  preset: {\n    description: \"A preset that is used as a base for Jest's configuration.\",\n    type: 'string'\n  },\n  prettierPath: {\n    default: undefined,\n    description: 'The path to the \"prettier\" module used for inline snapshots.',\n    type: 'string'\n  },\n  projects: {\n    description: 'A list of projects that use Jest to run all tests of all ' + 'projects in a single instance of Jest.',\n    string: true,\n    type: 'array'\n  },\n  reporters: {\n    description: 'A list of custom reporters for the test suite.',\n    string: true,\n    type: 'array'\n  },\n  resetMocks: {\n    default: undefined,\n    description: 'Automatically reset mock state between every test. ' + 'Equivalent to calling jest.resetAllMocks() between each test.',\n    type: 'boolean'\n  },\n  resetModules: {\n    default: undefined,\n    description: 'If enabled, the module registry for every test file will ' + 'be reset before running each individual test.',\n    type: 'boolean'\n  },\n  resolver: {\n    description: 'A JSON string which allows the use of a custom resolver.',\n    type: 'string'\n  },\n  restoreMocks: {\n    default: undefined,\n    description: 'Automatically restore mock state and implementation between every test. ' + 'Equivalent to calling jest.restoreAllMocks() between each test.',\n    type: 'boolean'\n  },\n  rootDir: {\n    description: 'The root directory that Jest should scan for tests and ' + 'modules within.',\n    type: 'string'\n  },\n  roots: {\n    description: 'A list of paths to directories that Jest should use to ' + 'search for files in.',\n    string: true,\n    type: 'array'\n  },\n  runInBand: {\n    alias: 'i',\n    default: undefined,\n    description: 'Run all tests serially in the current process (rather than ' + 'creating a worker pool of child processes that run tests). This ' + 'is sometimes useful for debugging, but such use cases are pretty ' + 'rare.',\n    type: 'boolean'\n  },\n  runTestsByPath: {\n    default: false,\n    description: 'Used when provided patterns are exact file paths. This avoids ' + 'converting them into a regular expression and matching it against ' + 'every single file.',\n    type: 'boolean'\n  },\n  runner: {\n    description: \"Allows to use a custom runner instead of Jest's default test runner.\",\n    type: 'string'\n  },\n  setupFiles: {\n    description: 'A list of paths to modules that run some code to configure or ' + 'set up the testing environment before each test. ',\n    string: true,\n    type: 'array'\n  },\n  setupFilesAfterEnv: {\n    description: 'A list of paths to modules that run some code to configure or ' + 'set up the testing framework before each test ',\n    string: true,\n    type: 'array'\n  },\n  showConfig: {\n    default: undefined,\n    description: 'Print your jest config and then exits.',\n    type: 'boolean'\n  },\n  silent: {\n    default: undefined,\n    description: 'Prevent tests from printing messages through the console.',\n    type: 'boolean'\n  },\n  skipFilter: {\n    default: undefined,\n    description: 'Disables the filter provided by --filter. Useful for CI jobs, or ' + 'local enforcement when fixing tests.',\n    type: 'boolean'\n  },\n  snapshotSerializers: {\n    description: 'A list of paths to snapshot serializer modules Jest should ' + 'use for snapshot testing.',\n    string: true,\n    type: 'array'\n  },\n  testEnvironment: {\n    description: 'Alias for --env',\n    type: 'string'\n  },\n  testEnvironmentOptions: {\n    description: 'Test environment options that will be passed to the testEnvironment. ' + 'The relevant options depend on the environment.',\n    type: 'string' // Object\n\n  },\n  testFailureExitCode: {\n    description: 'Exit code of `jest` command if the test run failed',\n    type: 'string' // number\n\n  },\n  testLocationInResults: {\n    default: false,\n    description: 'Add `location` information to the test results',\n    type: 'boolean'\n  },\n  testMatch: {\n    description: 'The glob patterns Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testNamePattern: {\n    alias: 't',\n    description: 'Run only tests with a name that matches the regex pattern.',\n    type: 'string'\n  },\n  testPathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all test paths before executing the test. If the test path ' + 'matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  testPathPattern: {\n    description: 'A regexp pattern string that is matched against all tests ' + 'paths before executing the test.',\n    string: true,\n    type: 'array'\n  },\n  testRegex: {\n    description: 'A string or array of string regexp patterns that Jest uses to detect test files.',\n    string: true,\n    type: 'array'\n  },\n  testResultsProcessor: {\n    description: 'Allows the use of a custom results processor. ' + 'This processor must be a node module that exports ' + 'a function expecting as the first argument the result object.',\n    type: 'string'\n  },\n  testRunner: {\n    description: 'Allows to specify a custom test runner. The default is ' + ' `jasmine2`. A path to a custom test runner can be provided: ' + '`<rootDir>/path/to/testRunner.js`.',\n    type: 'string'\n  },\n  testSequencer: {\n    description: 'Allows to specify a custom test sequencer. The default is ' + '`@jest/test-sequencer`. A path to a custom test sequencer can be ' + 'provided: `<rootDir>/path/to/testSequencer.js`',\n    type: 'string'\n  },\n  testTimeout: {\n    description: 'This option sets the default timeouts of test cases.',\n    type: 'number'\n  },\n  testURL: {\n    description: 'This option sets the URL for the jsdom environment.',\n    type: 'string'\n  },\n  timers: {\n    description: 'Setting this value to fake allows the use of fake timers ' + 'for functions such as setTimeout.',\n    type: 'string'\n  },\n  transform: {\n    description: 'A JSON string which maps from regular expressions to paths ' + 'to transformers.',\n    type: 'string'\n  },\n  transformIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all source file paths before transformation.',\n    string: true,\n    type: 'array'\n  },\n  unmockedModulePathPatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all modules before the module loader will automatically ' + 'return a mock for them.',\n    string: true,\n    type: 'array'\n  },\n  updateSnapshot: {\n    alias: 'u',\n    default: undefined,\n    description: 'Use this flag to re-record snapshots. ' + 'Can be used together with a test suite pattern or with ' + '`--testNamePattern` to re-record snapshot for test matching ' + 'the pattern',\n    type: 'boolean'\n  },\n  useStderr: {\n    default: undefined,\n    description: 'Divert all output to stderr.',\n    type: 'boolean'\n  },\n  verbose: {\n    default: undefined,\n    description: 'Display individual test results with the test suite hierarchy.',\n    type: 'boolean'\n  },\n  version: {\n    alias: 'v',\n    default: undefined,\n    description: 'Print the version and exit',\n    type: 'boolean'\n  },\n  watch: {\n    default: undefined,\n    description: 'Watch files for changes and rerun tests related to ' + 'changed files. If you want to re-run all tests when a file has ' + 'changed, use the `--watchAll` option.',\n    type: 'boolean'\n  },\n  watchAll: {\n    default: undefined,\n    description: 'Watch files for changes and rerun all tests. If you want ' + 'to re-run only the tests related to the changed files, use the ' + '`--watch` option.',\n    type: 'boolean'\n  },\n  watchPathIgnorePatterns: {\n    description: 'An array of regexp pattern strings that are matched ' + 'against all paths before trigger test re-run in watch mode. ' + 'If the test path matches any of the patterns, it will be skipped.',\n    string: true,\n    type: 'array'\n  },\n  watchman: {\n    default: undefined,\n    description: 'Whether to use watchman for file crawling. Disable using ' + '--no-watchman.',\n    type: 'boolean'\n  }\n};\nexports.options = options;","map":null,"metadata":{},"sourceType":"script"}