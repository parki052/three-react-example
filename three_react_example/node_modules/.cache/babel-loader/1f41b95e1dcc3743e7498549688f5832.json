{"ast":null,"code":"module.exports = Walker;\n\nvar path = require('path'),\n    fs = require('fs'),\n    util = require('util'),\n    EventEmitter = require('events').EventEmitter,\n    makeError = require('makeerror');\n/**\n * To walk a directory. It's complicated (but it's async, so it must be fast).\n *\n * @param root {String} the directory to start with\n */\n\n\nfunction Walker(root) {\n  if (!(this instanceof Walker)) return new Walker(root);\n  EventEmitter.call(this);\n  this._pending = 0;\n\n  this._filterDir = function () {\n    return true;\n  };\n\n  this.go(root);\n}\n\nutil.inherits(Walker, EventEmitter);\n/**\n * Errors of this type are thrown when the type of a file could not be\n * determined.\n */\n\nvar UnknownFileTypeError = Walker.UnknownFileTypeError = makeError('UnknownFileTypeError', 'The type of this file could not be determined.');\n/**\n * Setup a function to filter out directory entries.\n *\n * @param fn {Function} a function that will be given a directory name, which\n * if returns true will include the directory and it's children\n */\n\nWalker.prototype.filterDir = function (fn) {\n  this._filterDir = fn;\n  return this;\n};\n/**\n * Process a file or directory.\n */\n\n\nWalker.prototype.go = function (entry) {\n  var that = this;\n  this._pending++;\n  fs.lstat(entry, function (er, stat) {\n    if (er) {\n      that.emit('error', er, entry, stat);\n      that.doneOne();\n      return;\n    }\n\n    if (stat.isDirectory()) {\n      if (!that._filterDir(entry, stat)) {\n        that.doneOne();\n      } else {\n        fs.readdir(entry, function (er, files) {\n          if (er) {\n            that.emit('error', er, entry, stat);\n            that.doneOne();\n            return;\n          }\n\n          that.emit('entry', entry, stat);\n          that.emit('dir', entry, stat);\n          files.forEach(function (part) {\n            that.go(path.join(entry, part));\n          });\n          that.doneOne();\n        });\n      }\n    } else if (stat.isSymbolicLink()) {\n      that.emit('entry', entry, stat);\n      that.emit('symlink', entry, stat);\n      that.doneOne();\n    } else if (stat.isBlockDevice()) {\n      that.emit('entry', entry, stat);\n      that.emit('blockDevice', entry, stat);\n      that.doneOne();\n    } else if (stat.isCharacterDevice()) {\n      that.emit('entry', entry, stat);\n      that.emit('characterDevice', entry, stat);\n      that.doneOne();\n    } else if (stat.isFIFO()) {\n      that.emit('entry', entry, stat);\n      that.emit('fifo', entry, stat);\n      that.doneOne();\n    } else if (stat.isSocket()) {\n      that.emit('entry', entry, stat);\n      that.emit('socket', entry, stat);\n      that.doneOne();\n    } else if (stat.isFile()) {\n      that.emit('entry', entry, stat);\n      that.emit('file', entry, stat);\n      that.doneOne();\n    } else {\n      that.emit('error', UnknownFileTypeError(), entry, stat);\n      that.doneOne();\n    }\n  });\n  return this;\n};\n\nWalker.prototype.doneOne = function () {\n  if (--this._pending === 0) this.emit('end');\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}