{"ast":null,"code":"'use strict';\n\nvar licenses = [].concat(require('spdx-license-ids')).concat(require('spdx-license-ids/deprecated'));\n\nvar exceptions = require('spdx-exceptions');\n\nmodule.exports = function (source) {\n  var index = 0;\n\n  function hasMore() {\n    return index < source.length;\n  } // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n\n\n  function read(value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index);\n      var match = chars.match(value);\n\n      if (match) {\n        index += match[0].length;\n        return match[0];\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length;\n        return value;\n      }\n    }\n  }\n\n  function skipWhitespace() {\n    read(/[ ]*/);\n  }\n\n  function operator() {\n    var string;\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+'];\n\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i]);\n\n      if (string) {\n        break;\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`');\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    };\n  }\n\n  function idstring() {\n    return read(/[A-Za-z0-9-.]+/);\n  }\n\n  function expectIdstring() {\n    var string = idstring();\n\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index);\n    }\n\n    return string;\n  }\n\n  function documentRef() {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'DOCUMENTREF',\n        string: string\n      };\n    }\n  }\n\n  function licenseRef() {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'LICENSEREF',\n        string: string\n      };\n    }\n  }\n\n  function identifier() {\n    var begin = index;\n    var string = idstring();\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      };\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      };\n    }\n\n    index = begin;\n  } // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n\n\n  function parseToken() {\n    // Ordering matters\n    return operator() || documentRef() || licenseRef() || identifier();\n  }\n\n  var tokens = [];\n\n  while (hasMore()) {\n    skipWhitespace();\n\n    if (!hasMore()) {\n      break;\n    }\n\n    var token = parseToken();\n\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] + '` at offset ' + index);\n    }\n\n    tokens.push(token);\n  }\n\n  return tokens;\n};","map":null,"metadata":{},"sourceType":"script"}