{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _SnapshotInteractiveMode = _interopRequireDefault(require('../SnapshotInteractiveMode'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass UpdateSnapshotInteractivePlugin extends _jestWatcher().BaseWatchPlugin {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, '_snapshotInteractiveMode', new _SnapshotInteractiveMode.default(this._stdout));\n\n    _defineProperty(this, '_failedSnapshotTestAssertions', []);\n\n    _defineProperty(this, 'isInternal', true);\n  }\n\n  getFailedSnapshotTestAssertions(testResults) {\n    const failedTestPaths = [];\n\n    if (testResults.numFailedTests === 0 || !testResults.testResults) {\n      return failedTestPaths;\n    }\n\n    testResults.testResults.forEach(testResult => {\n      if (testResult.snapshot && testResult.snapshot.unmatched) {\n        testResult.testResults.forEach(result => {\n          if (result.status === 'failed') {\n            failedTestPaths.push({\n              fullName: result.fullName,\n              path: testResult.testFilePath\n            });\n          }\n        });\n      }\n    });\n    return failedTestPaths;\n  }\n\n  apply(hooks) {\n    hooks.onTestRunComplete(results => {\n      this._failedSnapshotTestAssertions = this.getFailedSnapshotTestAssertions(results);\n\n      if (this._snapshotInteractiveMode.isActive()) {\n        this._snapshotInteractiveMode.updateWithResults(results);\n      }\n    });\n  }\n\n  onKey(key) {\n    if (this._snapshotInteractiveMode.isActive()) {\n      this._snapshotInteractiveMode.put(key);\n    }\n  }\n\n  run(_globalConfig, updateConfigAndRun) {\n    if (this._failedSnapshotTestAssertions.length) {\n      return new Promise(res => {\n        this._snapshotInteractiveMode.run(this._failedSnapshotTestAssertions, (assertion, shouldUpdateSnapshot) => {\n          updateConfigAndRun({\n            mode: 'watch',\n            testNamePattern: assertion ? \"^\".concat(assertion.fullName, \"$\") : '',\n            testPathPattern: assertion ? assertion.path : '',\n            updateSnapshot: shouldUpdateSnapshot ? 'all' : 'none'\n          });\n\n          if (!this._snapshotInteractiveMode.isActive()) {\n            res();\n          }\n        });\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  getUsageInfo() {\n    if (this._failedSnapshotTestAssertions && this._failedSnapshotTestAssertions.length > 0) {\n      return {\n        key: 'i',\n        prompt: 'update failing snapshots interactively'\n      };\n    }\n\n    return null;\n  }\n\n}\n\nvar _default = UpdateSnapshotInteractivePlugin;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}