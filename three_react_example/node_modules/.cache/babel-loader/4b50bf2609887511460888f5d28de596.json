{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _util() {\n  const data = _interopRequireDefault(require('util'));\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _nodeNotifier() {\n  const data = _interopRequireDefault(require('node-notifier'));\n\n  _nodeNotifier = function _nodeNotifier() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _base_reporter = _interopRequireDefault(require('./base_reporter'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError('Invalid attempt to destructure non-iterable instance');\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i['return'] != null) _i['return']();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst isDarwin = process.platform === 'darwin';\n\nconst icon = _path().default.resolve(__dirname, '../assets/jest_logo.png');\n\nclass NotifyReporter extends _base_reporter.default {\n  constructor(globalConfig, startRun, context) {\n    super();\n\n    _defineProperty(this, '_startRun', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    this._globalConfig = globalConfig;\n    this._startRun = startRun;\n    this._context = context;\n  }\n\n  onRunComplete(contexts, result) {\n    const success = result.numFailedTests === 0 && result.numRuntimeErrorTestSuites === 0;\n    const firstContext = contexts.values().next();\n    const hasteFS = firstContext && firstContext.value && firstContext.value.hasteFS;\n    let packageName;\n\n    if (hasteFS != null) {\n      // assuming root package.json is the first one\n      const _hasteFS$matchFiles = hasteFS.matchFiles('package.json'),\n            _hasteFS$matchFiles2 = _slicedToArray(_hasteFS$matchFiles, 1),\n            filePath = _hasteFS$matchFiles2[0];\n\n      packageName = filePath != null ? hasteFS.getModuleName(filePath) : this._globalConfig.rootDir;\n    } else {\n      packageName = this._globalConfig.rootDir;\n    }\n\n    packageName = packageName != null ? \"\".concat(packageName, \" - \") : '';\n    const notifyMode = this._globalConfig.notifyMode;\n    const statusChanged = this._context.previousSuccess !== success || this._context.firstRun;\n    const testsHaveRun = result.numTotalTests !== 0;\n\n    if (testsHaveRun && success && (notifyMode === 'always' || notifyMode === 'success' || notifyMode === 'success-change' || notifyMode === 'change' && statusChanged || notifyMode === 'failure-change' && statusChanged)) {\n      const title = _util().default.format('%s%d%% Passed', packageName, 100);\n\n      const message = _util().default.format((isDarwin ? '\\u2705 ' : '') + '%d tests passed', result.numPassedTests);\n\n      _nodeNotifier().default.notify({\n        icon,\n        message,\n        title\n      });\n    } else if (testsHaveRun && !success && (notifyMode === 'always' || notifyMode === 'failure' || notifyMode === 'failure-change' || notifyMode === 'change' && statusChanged || notifyMode === 'success-change' && statusChanged)) {\n      const failed = result.numFailedTests / result.numTotalTests;\n\n      const title = _util().default.format('%s%d%% Failed', packageName, Math.ceil(Number.isNaN(failed) ? 0 : failed * 100));\n\n      const message = _util().default.format((isDarwin ? '\\u26D4\\uFE0F ' : '') + '%d of %d tests failed', result.numFailedTests, result.numTotalTests);\n\n      const watchMode = this._globalConfig.watch || this._globalConfig.watchAll;\n      const restartAnswer = 'Run again';\n      const quitAnswer = 'Exit tests';\n\n      if (!watchMode) {\n        _nodeNotifier().default.notify({\n          icon,\n          message,\n          title\n        });\n      } else {\n        _nodeNotifier().default.notify({\n          actions: [restartAnswer, quitAnswer],\n          closeLabel: 'Close',\n          icon,\n          message,\n          timeout: 10,\n          title\n        }, (err, _, metadata) => {\n          if (err || !metadata) {\n            return;\n          }\n\n          if (metadata.activationValue === quitAnswer) {\n            (0, _exit().default)(0);\n            return;\n          }\n\n          if (metadata.activationValue === restartAnswer) {\n            this._startRun(this._globalConfig);\n          }\n        });\n      }\n    }\n\n    this._context.previousSuccess = success;\n    this._context.firstRun = false;\n  }\n\n}\n\nexports.default = NotifyReporter;","map":null,"metadata":{},"sourceType":"script"}