{"ast":null,"code":"var tmpl = require('tmpl');\n\nmodule.exports = makeError;\n\nfunction BaseError() {}\n\nBaseError.prototype = new Error();\n\nBaseError.prototype.toString = function () {\n  return this.message;\n};\n/**\n * Makes an Error function with the signature:\n *\n *   function(message, data)\n *\n * You'll typically do something like:\n *\n *   var UnknownFileTypeError = makeError(\n *     'UnknownFileTypeError',\n *     'The specified type is not known.'\n *   )\n *   var er = UnknownFileTypeError()\n *\n * `er` will have a prototype chain that ensures:\n *\n *   er instanceof Error\n *   er instanceof UnknownFileTypeError\n *\n * You can also do `var er = new UnknownFileTypeError()` if you really like the\n * `new` keyword.\n *\n * @param String  The name of the error.\n * @param String  The default message string.\n * @param Object  The default data object, merged with per instance data.\n */\n\n\nfunction makeError(name, defaultMessage, defaultData) {\n  defaultMessage = tmpl(defaultMessage || '');\n  defaultData = defaultData || {};\n  if (defaultData.proto && !(defaultData.proto instanceof BaseError)) throw new Error('The custom \"proto\" must be an Error created via makeError');\n\n  var CustomError = function (message, data) {\n    if (!(this instanceof CustomError)) return new CustomError(message, data);\n\n    if (typeof message !== 'string' && !data) {\n      data = message;\n      message = null;\n    }\n\n    this.name = name;\n    this.data = data || defaultData;\n\n    if (typeof message === 'string') {\n      this.message = tmpl(message, this.data);\n    } else {\n      this.message = defaultMessage(this.data);\n    }\n\n    var er = new Error();\n    this.stack = er.stack;\n\n    if (this.stack) {\n      // remove TWO stack level:\n      if (typeof Components !== 'undefined') {\n        // Mozilla:\n        this.stack = this.stack.substring(this.stack.indexOf('\\n') + 2);\n      } else if (typeof chrome !== 'undefined' || typeof process !== 'undefined') {\n        // Google Chrome/Node.js:\n        this.stack = this.stack.replace(/\\n[^\\n]*/, '');\n        this.stack = this.stack.replace(/\\n[^\\n]*/, '');\n        this.stack = this.name + (this.message ? ': ' + this.message : '') + this.stack.substring(5);\n      }\n    }\n\n    if ('fileName' in er) this.fileName = er.fileName;\n    if ('lineNumber' in er) this.lineNumber = er.lineNumber;\n  };\n\n  CustomError.prototype = defaultData.proto || new BaseError();\n  delete defaultData.proto;\n  return CustomError;\n}","map":null,"metadata":{},"sourceType":"script"}