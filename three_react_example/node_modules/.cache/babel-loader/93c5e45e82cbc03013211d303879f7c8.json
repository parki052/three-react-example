{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst YError = require('./yerror');\n\nlet previouslyVisitedConfigs = [];\n\nfunction checkForCircularExtends(cfgPath) {\n  if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n    throw new YError(\"Circular extended configurations: '\".concat(cfgPath, \"'.\"));\n  }\n}\n\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n  return path.resolve(cwd, pathToExtend);\n}\n\nfunction applyExtends(config, cwd) {\n  let defaultConfig = {};\n\n  if (config.hasOwnProperty('extends')) {\n    if (typeof config.extends !== 'string') return defaultConfig;\n    const isPath = /\\.json|\\..*rc$/.test(config.extends);\n    let pathToDefault = null;\n\n    if (!isPath) {\n      try {\n        pathToDefault = require.resolve(config.extends);\n      } catch (err) {// most likely this simply isn't a module.\n      }\n    } else {\n      pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n    } // maybe the module uses key for some other reason,\n    // err on side of caution.\n\n\n    if (!pathToDefault && !isPath) return config;\n    checkForCircularExtends(pathToDefault);\n    previouslyVisitedConfigs.push(pathToDefault);\n    defaultConfig = isPath ? JSON.parse(fs.readFileSync(pathToDefault, 'utf8')) : require(config.extends);\n    delete config.extends;\n    defaultConfig = applyExtends(defaultConfig, path.dirname(pathToDefault));\n  }\n\n  previouslyVisitedConfigs = [];\n  return Object.assign({}, defaultConfig, config);\n}\n\nmodule.exports = applyExtends;","map":null,"metadata":{},"sourceType":"script"}