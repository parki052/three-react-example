{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.run = run;\nexports.buildArgv = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function _jestConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _core() {\n  const data = require('@jest/core');\n\n  _core = function _core() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _yargs() {\n  const data = _interopRequireDefault(require('yargs'));\n\n  _yargs = function _yargs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _init = _interopRequireDefault(require('../init'));\n\nvar args = _interopRequireWildcard(require('./args'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction run(_x, _x2) {\n  return _run.apply(this, arguments);\n}\n\nfunction _run() {\n  _run = _asyncToGenerator(function* (maybeArgv, project) {\n    try {\n      const argv = buildArgv(maybeArgv);\n\n      if (argv.init) {\n        yield (0, _init.default)();\n        return;\n      }\n\n      const projects = getProjectListFromCLIArgs(argv, project);\n\n      const _ref = yield (0, _core().runCLI)(argv, projects),\n            results = _ref.results,\n            globalConfig = _ref.globalConfig;\n\n      readResultsAndExit(results, globalConfig);\n    } catch (error) {\n      (0, _jestUtil().clearLine)(process.stderr);\n      (0, _jestUtil().clearLine)(process.stdout);\n\n      if (error.stack) {\n        console.error(_chalk().default.red(error.stack));\n      } else {\n        console.error(_chalk().default.red(error));\n      }\n\n      (0, _exit().default)(1);\n      throw error;\n    }\n  });\n  return _run.apply(this, arguments);\n}\n\nconst buildArgv = maybeArgv => {\n  const version = (0, _core().getVersion)() + (__dirname.includes(\"packages\".concat(_path().default.sep, \"jest-cli\")) ? '-dev' : '');\n  const rawArgv = maybeArgv || process.argv.slice(2);\n  const argv = (0, _yargs().default)(rawArgv).usage(args.usage).version(version).alias('help', 'h').options(args.options).epilogue(args.docs).check(args.check).argv;\n  (0, _jestValidate().validateCLIOptions)(argv, _objectSpread({}, args.options, {\n    deprecationEntries: _jestConfig().deprecationEntries\n  }), // strip leading dashes\n  Array.isArray(rawArgv) ? rawArgv.map(rawArgv => rawArgv.replace(/^--?/, '')) : Object.keys(rawArgv)); // strip dashed args\n\n  return Object.keys(argv).reduce((result, key) => {\n    if (!key.includes('-')) {\n      result[key] = argv[key];\n    }\n\n    return result;\n  }, {});\n};\n\nexports.buildArgv = buildArgv;\n\nconst getProjectListFromCLIArgs = (argv, project) => {\n  const projects = argv.projects ? argv.projects : [];\n\n  if (project) {\n    projects.push(project);\n  }\n\n  if (!projects.length && process.platform === 'win32') {\n    try {\n      projects.push((0, _realpathNative().sync)(process.cwd()));\n    } catch (err) {// do nothing, just catch error\n      // process.binding('fs').realpath can throw, e.g. on mapped drives\n    }\n  }\n\n  if (!projects.length) {\n    projects.push(process.cwd());\n  }\n\n  return projects;\n};\n\nconst readResultsAndExit = (result, globalConfig) => {\n  const code = !result || result.success ? 0 : globalConfig.testFailureExitCode; // Only exit if needed\n\n  process.on('exit', () => {\n    if (typeof code === 'number' && code !== 0) {\n      process.exitCode = code;\n    }\n  });\n\n  if (globalConfig.forceExit) {\n    if (!globalConfig.detectOpenHandles) {\n      console.warn(_chalk().default.bold('Force exiting Jest: ') + 'Have you considered using `--detectOpenHandles` to detect ' + 'async operations that kept running after all tests finished?');\n    }\n\n    (0, _exit().default)(code);\n  } else if (!globalConfig.detectOpenHandles) {\n    setTimeout(() => {\n      console.warn(_chalk().default.yellow.bold('Jest did not exit one second after the test run has completed.\\n\\n') + _chalk().default.yellow('This usually means that there are asynchronous operations that ' + \"weren't stopped in your tests. Consider running Jest with \" + '`--detectOpenHandles` to troubleshoot this issue.'));\n    }, 1000).unref();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}