{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printDiffOrStringified = void 0;\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst isLineDiffable = received => {\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if ((0, _jestGetType.isPrimitive)(received)) {\n    return typeof received === 'string' && received.includes('\\n');\n  }\n\n  if (receivedType === 'date' || receivedType === 'function' || receivedType === 'regexp') {\n    return false;\n  }\n\n  if (received instanceof Error) {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringified = (expectedSerializedTrimmed, receivedSerializedTrimmed, received, expectedLabel, receivedLabel, expand) => {\n  if (typeof received === 'string') {\n    if (expectedSerializedTrimmed.length >= 2 && expectedSerializedTrimmed.startsWith('\"') && expectedSerializedTrimmed.endsWith('\"') && receivedSerializedTrimmed === (0, _utils.unescape)((0, _prettyFormat.default)(received))) {\n      // The expected snapshot looks like a stringified string.\n      // The received serialization is default stringified string.\n      // Undo default serialization of expected snapshot:\n      // Remove enclosing double quote marks.\n      // Remove backslash escape preceding backslash here,\n      // because unescape replaced it only preceding double quote mark.\n      return (0, _jestMatcherUtils.printDiffOrStringify)(expectedSerializedTrimmed.slice(1, -1).replace(/\\\\\\\\/g, '\\\\'), received, expectedLabel, receivedLabel, expand);\n    } // Display substring highlight even when strings have custom serialization.\n\n\n    const result = (0, _jestDiff.getStringDiff)(expectedSerializedTrimmed, receivedSerializedTrimmed, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      } // Because not default stringify, call EXPECTED_COLOR and RECEIVED_COLOR\n      // This is reason to call getStringDiff instead of printDiffOrStringify\n      // Because there is no closing double quote mark at end of single lines,\n      // future improvement is to call replaceSpacesAtEnd if it becomes public.\n\n\n      const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(expectedLabel, receivedLabel);\n      return printLabel(expectedLabel) + (0, _jestMatcherUtils.EXPECTED_COLOR)(result.a) + '\\n' + printLabel(receivedLabel) + (0, _jestMatcherUtils.RECEIVED_COLOR)(result.b);\n    }\n  }\n\n  if ((expectedSerializedTrimmed.includes('\\n') || receivedSerializedTrimmed.includes('\\n')) && isLineDiffable(received)) {\n    return (0, _jestDiff.default)(expectedSerializedTrimmed, receivedSerializedTrimmed, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(expectedLabel, receivedLabel);\n  return printLabel(expectedLabel) + (0, _jestMatcherUtils.EXPECTED_COLOR)(expectedSerializedTrimmed) + '\\n' + printLabel(receivedLabel) + (0, _jestMatcherUtils.RECEIVED_COLOR)(receivedSerializedTrimmed);\n};\n\nexports.printDiffOrStringified = printDiffOrStringified;","map":null,"metadata":{},"sourceType":"script"}