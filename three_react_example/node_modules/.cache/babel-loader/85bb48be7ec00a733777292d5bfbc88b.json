{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\n\nclass App extends Component {\n  fitCanvasToDisplaySize(force, renderer, camera) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    if (force || canvas.width !== width || canvas.height !== height) {\n      this.render.setSize(width, height, false);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    }\n  }\n\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    renderer.setSize(renderer.domElement.innerWidth, renderer.domElement.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"white\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    let animate = function (time) {\n      time *= 0.001;\n      fitCanvasToDisplaySize(false, renderer, camera);\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","App","fitCanvasToDisplaySize","force","renderer","camera","canvas","domElement","width","clientWidth","height","clientHeight","render","setSize","aspect","updateProjectionMatrix","componentDidMount","scene","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","mount","appendChild","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","animate","time","requestAnimationFrame","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nclass App extends Component {\n\n\tfitCanvasToDisplaySize(force, renderer, camera){\n\t\tconst canvas = renderer.domElement;\n\t\tconst width = canvas.clientWidth;\n\t\tconst height = canvas.clientHeight;\n\n\t\tif(force || canvas.width !== width || canvas.height !== height){\n\t\t\tthis.render.setSize(width, height, false);\n\t\t\tcamera.aspect = width / height;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tlet scene = new Three.Scene();\n\t\tlet camera = new Three.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);\n\t\tlet renderer = new Three.WebGLRenderer();\n\t\t\n\t\trenderer.setSize( renderer.domElement.innerWidth, renderer.domElement.innerHeight);\n\t\tthis.mount.appendChild( renderer.domElement)\n\n\t\tlet floorGeometry = new Three.BoxGeometry( 10, 1, 10);\n\t\tlet floorMaterial = new Three.MeshStandardMaterial();\n\t\tlet floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n\t\tlet circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n\t\tlet circleMaterial = new Three.MeshStandardMaterial();\n\t\tlet circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n\t\tlet light = new Three.AmbientLight(\"white\");\n\n\t\tscene.add(light);\n\t\tscene.add(floor);\n\t\tscene.add(circle);\n\t\tcamera.position.z = 5;\n\t\tcamera.position.y = 2;\n\n\t\tlet animate = function(time){\n\t\t\ttime *= 0.001;\n\n\t\t\tfitCanvasToDisplaySize(false, renderer, camera);\n\n\t\t\trequestAnimationFrame(animate);\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\t\tfitCanvasToDisplaySize(true, renderer, camera)\n\t\tanimate();\n\t}\n\trender() {\n    \treturn (\n      \t\t<div ref={ref => (this.mount = ref)}/>\n    \t);\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}