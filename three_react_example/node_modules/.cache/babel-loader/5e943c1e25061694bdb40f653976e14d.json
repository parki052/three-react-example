{"ast":null,"code":"import * as Three from \"three\";\nexport const buildScene = () => {\n  let scene = new Three.Scene();\n  let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n  let renderer = new Three.WebGLRenderer();\n  let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n  let floorMaterial = new Three.MeshStandardMaterial();\n  let floor = new Three.Mesh(floorGeometry, floorMaterial);\n  let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n  let circleMaterial = new Three.MeshStandardMaterial();\n  let circle = new Three.Mesh(circleGeometry, circleMaterial);\n  let light = new Three.AmbientLight(\"blue\");\n  scene.add(light);\n  scene.add(floor);\n  scene.add(circle);\n  camera.position.z = 5;\n  camera.position.y = 2;\n  run(scene, renderer, camera);\n};\n\nconst fitCanvasToDisplaySize = (force, renderer, camera) => {\n  if (!renderer) return;\n  const canvas = renderer.domElement;\n  const width = canvas.clientWidth;\n  const height = canvas.clientHeight;\n\n  if (force || canvas.width !== width || canvas.height !== height) {\n    renderer.setSize(width, height, false);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n};\n\nconst animate = (scene, renderer, camera) => {\n  if (!renderer) return;\n  fitCanvasToDisplaySize(false, renderer, camera);\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\n\nconst run = (scene, renderer, camera) => {\n  animate(scene, renderer, camera);\n  fitCanvasToDisplaySize(true, renderer, camera);\n  requestAnimationFrame(animate);\n};","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\App\\initialization.js"],"names":["Three","buildScene","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","run","fitCanvasToDisplaySize","force","canvas","domElement","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import * as Three from \"three\";\r\n\r\nexport const buildScene = () => {\r\n    let scene = new Three.Scene();\r\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\r\n    let renderer = new Three.WebGLRenderer();\r\n\r\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\r\n    let floorMaterial = new Three.MeshStandardMaterial();\r\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\r\n\r\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\r\n    let circleMaterial = new Three.MeshStandardMaterial();\r\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\r\n\r\n    let light = new Three.AmbientLight(\"blue\");\r\n\r\n    scene.add(light);\r\n    scene.add(floor);\r\n    scene.add(circle);\r\n    camera.position.z = 5;\r\n    camera.position.y = 2;\r\n\r\n    run(scene, renderer, camera);\r\n}\r\n\r\nconst fitCanvasToDisplaySize = (force, renderer, camera) => {\r\n    if(!renderer) return;\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    if (force || canvas.width !== width || canvas.height !== height) {\r\n      renderer.setSize(width, height, false);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n    }   \r\n}\r\n\r\nconst animate = (scene, renderer, camera) => {\r\n    if(!renderer) return;\r\n    fitCanvasToDisplaySize(false, renderer, camera);\r\n\r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nconst run = (scene, renderer, camera) => {\r\n    animate(scene, renderer, camera);\r\n    fitCanvasToDisplaySize(true, renderer, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}