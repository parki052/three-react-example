{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\n\nclass App extends Component {\n  fitCanvasToDisplaySize(force, renderer, camera) {\n    const canvas = renderer.domElement;\n    const width = canvas.clientWidth;\n    const height = canvas.clientHeight;\n\n    if (force || canvas.width !== width || canvas.height !== height) {\n      renderer.setSize(width, height, false);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    }\n  }\n\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    this.el.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"blue\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    let animate = function () {\n      this.fitCanvasToDisplaySize(false, renderer, camera);\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    this.fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.el = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","RGBA_ASTC_10x5_Format","App","fitCanvasToDisplaySize","force","renderer","camera","canvas","domElement","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","componentDidMount","scene","Scene","PerspectiveCamera","WebGLRenderer","el","appendChild","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","animate","render","requestAnimationFrame","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\nclass App extends Component {\n\tfitCanvasToDisplaySize(force, renderer, camera) {\n\t\tconst canvas = renderer.domElement;\n\t\tconst width = canvas.clientWidth;\n\t\tconst height = canvas.clientHeight;\n  \n\t\tif (force || canvas.width !== width || canvas.height !== height) {\n\t\t  renderer.setSize(width, height, false);\n\t\t  camera.aspect = width / height;\n\t\t  camera.updateProjectionMatrix();\n\t\t}\n\t}\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n\n    this.el.appendChild(renderer.domElement);\n\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n    let light = new Three.AmbientLight(\"blue\");\n\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n\n\n    let animate = function() {\n      this.fitCanvasToDisplaySize(false, renderer, camera);\n\n\t  renderer.render(scene, camera);\n\t  requestAnimationFrame(animate);\n    };\n\n    this.fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n  render() {\n    return <div ref={ref => (this.el = ref)}/>;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}