{"ast":null,"code":"'use strict';\n\nconst array = [];\nconst charCodeCache = [];\n\nconst leven = (left, right) => {\n  if (left === right) {\n    return 0;\n  }\n\n  const swap = left; // Swapping the strings if `a` is longer than `b` so we know which one is the\n  // shortest & which one is the longest\n\n  if (left.length > right.length) {\n    left = right;\n    right = swap;\n  }\n\n  let leftLength = left.length;\n  let rightLength = right.length; // Performing suffix trimming:\n  // We can linearly drop suffix common to both strings since they\n  // don't increase distance at all\n  // Note: `~-` is the bitwise way to perform a `- 1` operation\n\n  while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {\n    leftLength--;\n    rightLength--;\n  } // Performing prefix trimming\n  // We can linearly drop prefix common to both strings since they\n  // don't increase distance at all\n\n\n  let start = 0;\n\n  while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {\n    start++;\n  }\n\n  leftLength -= start;\n  rightLength -= start;\n\n  if (leftLength === 0) {\n    return rightLength;\n  }\n\n  let bCharCode;\n  let result;\n  let temp;\n  let temp2;\n  let i = 0;\n  let j = 0;\n\n  while (i < leftLength) {\n    charCodeCache[i] = left.charCodeAt(start + i);\n    array[i] = ++i;\n  }\n\n  while (j < rightLength) {\n    bCharCode = right.charCodeAt(start + j);\n    temp = j++;\n    result = j;\n\n    for (i = 0; i < leftLength; i++) {\n      temp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;\n      temp = array[i]; // eslint-disable-next-line no-multi-assign\n\n      result = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = leven; // TODO: Remove this for the next major release\n\nmodule.exports.default = leven;","map":null,"metadata":{},"sourceType":"script"}