{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = readInitialCoverage;\n\nvar _parser = require(\"@babel/parser\");\n\nvar _traverse = _interopRequireDefault(require(\"@babel/traverse\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _constants = require(\"./constants\");\n\nvar _instrumenter = require(\"./instrumenter\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction readInitialCoverage(code) {\n  if (typeof code !== 'string') {\n    throw new Error('Code must be a string');\n  } // Parse as leniently as possible\n\n\n  const ast = (0, _parser.parse)(code, {\n    allowImportExportEverywhere: true,\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: 'script',\n    plugins: (0, _instrumenter.defaultOpts)().plugins\n  });\n  let covScope;\n  (0, _traverse.default)(ast, {\n    ObjectProperty(path) {\n      const node = path.node;\n\n      if (!node.computed && t.isIdentifier(node.key) && node.key.name === _constants.MAGIC_KEY) {\n        const magicValue = path.get('value').evaluate();\n\n        if (!magicValue.confident || magicValue.value !== _constants.MAGIC_VALUE) {\n          return;\n        }\n\n        covScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        path.stop();\n      }\n    }\n\n  });\n\n  if (!covScope) {\n    return null;\n  }\n\n  const result = {};\n\n  for (var _i = 0, _arr = ['path', 'hash', 'gcv', 'coverageData']; _i < _arr.length; _i++) {\n    const key = _arr[_i];\n    const binding = covScope.getOwnBinding(key);\n\n    if (!binding) {\n      return null;\n    }\n\n    const valuePath = binding.path.get('init');\n    const value = valuePath.evaluate();\n\n    if (!value.confident) {\n      return null;\n    }\n\n    result[key] = value.value;\n  }\n\n  delete result.coverageData[_constants.MAGIC_KEY];\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}