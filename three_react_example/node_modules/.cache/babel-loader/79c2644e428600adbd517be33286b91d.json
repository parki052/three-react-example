{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.validateTemplateTableHeadings = exports.validateArrayTable = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require('pretty-format'));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nconst EXPECTED_COLOR = _chalk().default.green;\n\nconst RECEIVED_COLOR = _chalk().default.red;\n\nconst validateArrayTable = table => {\n  if (!Array.isArray(table)) {\n    throw new Error('`.each` must be called with an Array or Tagged Template Literal.\\n\\n' + \"Instead was called with: \".concat((0, _prettyFormat().default)(table, {\n      maxDepth: 1,\n      min: true\n    }), \"\\n\"));\n  }\n\n  if (isTaggedTemplateLiteral(table)) {\n    if (isEmptyString(table[0])) {\n      throw new Error('Error: `.each` called with an empty Tagged Template Literal of table data.\\n');\n    }\n\n    throw new Error('Error: `.each` called with a Tagged Template Literal with no data, remember to interpolate with ${expression} syntax.\\n');\n  }\n\n  if (isEmptyTable(table)) {\n    throw new Error('Error: `.each` called with an empty Array of table data.\\n');\n  }\n};\n\nexports.validateArrayTable = validateArrayTable;\n\nconst isTaggedTemplateLiteral = array => array.raw !== undefined;\n\nconst isEmptyTable = table => table.length === 0;\n\nconst isEmptyString = str => typeof str === 'string' && str.trim() === '';\n\nconst validateTemplateTableHeadings = (headings, data) => {\n  const missingData = data.length % headings.length;\n\n  if (missingData > 0) {\n    throw new Error('Not enough arguments supplied for given headings:\\n' + EXPECTED_COLOR(headings.join(' | ')) + '\\n\\n' + 'Received:\\n' + RECEIVED_COLOR((0, _prettyFormat().default)(data)) + '\\n\\n' + \"Missing \".concat(RECEIVED_COLOR(missingData.toString()), \" \").concat(pluralize('argument', missingData)));\n  }\n};\n\nexports.validateTemplateTableHeadings = validateTemplateTableHeadings;\n\nconst pluralize = (word, count) => word + (count === 1 ? '' : 's');","map":null,"metadata":{},"sourceType":"script"}