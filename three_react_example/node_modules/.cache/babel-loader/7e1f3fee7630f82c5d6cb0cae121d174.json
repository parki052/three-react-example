{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.run = run;\n\nfunction _os() {\n  const data = _interopRequireDefault(require('os'));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _yargs() {\n  const data = _interopRequireDefault(require('yargs'));\n\n  _yargs = function _yargs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function _console() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function _jestValidate() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestConfig() {\n  const data = require('jest-config');\n\n  _jestConfig = function _jestConfig() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _version = require('../version');\n\nvar args = _interopRequireWildcard(require('./args'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction run(cliArgv, cliInfo) {\n  const realFs = require('fs');\n\n  const fs = require('graceful-fs');\n\n  fs.gracefulify(realFs);\n  let argv;\n\n  if (cliArgv) {\n    argv = cliArgv;\n  } else {\n    argv = _yargs().default.usage(args.usage).help(false).version(false).options(args.options).argv; // @ts-ignore: fix this at some point\n\n    (0, _jestValidate().validateCLIOptions)(argv, _objectSpread({}, args.options, {\n      deprecationEntries: _jestConfig().deprecationEntries\n    }));\n  }\n\n  if (argv.help) {\n    _yargs().default.showHelp();\n\n    process.on('exit', () => process.exitCode = 1);\n    return;\n  }\n\n  if (argv.version) {\n    console.log(\"v\".concat(_version.VERSION, \"\\n\"));\n    return;\n  }\n\n  if (!argv._.length) {\n    console.log('Please provide a path to a script. (See --help for details)');\n    process.on('exit', () => process.exitCode = 1);\n    return;\n  }\n\n  const root = (0, _realpathNative().sync)(process.cwd());\n\n  const filePath = _path().default.resolve(root, argv._[0]);\n\n  if (argv.debug) {\n    const info = cliInfo ? ', ' + cliInfo.join(', ') : '';\n    console.log(\"Using Jest Runtime v\".concat(_version.VERSION).concat(info));\n  } // TODO: Figure this out\n  // @ts-ignore: this might not have the correct arguments\n\n\n  const options = (0, _jestConfig().readConfig)(argv, root);\n  const globalConfig = options.globalConfig; // Always disable automocking in scripts.\n\n  const config = _objectSpread({}, options.projectConfig, {\n    automock: false,\n    unmockedModulePathPatterns: null\n  }); // Break circular dependency\n\n\n  const Runtime = require('..');\n\n  Runtime.createContext(config, {\n    maxWorkers: Math.max(_os().default.cpus().length - 1, 1),\n    watchman: globalConfig.watchman\n  }).then(hasteMap => {\n    const Environment = require(config.testEnvironment);\n\n    const environment = new Environment(config);\n    (0, _jestUtil().setGlobal)(environment.global, 'console', new (_console().CustomConsole)(process.stdout, process.stderr));\n    (0, _jestUtil().setGlobal)(environment.global, 'jestProjectConfig', config);\n    (0, _jestUtil().setGlobal)(environment.global, 'jestGlobalConfig', globalConfig);\n    const runtime = new Runtime(config, environment, hasteMap.resolver);\n    runtime.requireModule(filePath);\n  }).catch(e => {\n    console.error(_chalk().default.red(e.stack || e));\n    process.on('exit', () => process.exitCode = 1);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}