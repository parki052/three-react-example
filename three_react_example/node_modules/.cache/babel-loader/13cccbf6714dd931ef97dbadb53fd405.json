{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst descriptions = {\n  automock: 'All imported modules in your tests should be mocked automatically',\n  bail: 'Stop running tests after `n` failures',\n  browser: 'Respect \"browser\" field in package.json when resolving modules',\n  cacheDirectory: 'The directory where Jest should store its cached dependency information',\n  clearMocks: 'Automatically clear mock calls and instances between every test',\n  collectCoverage: 'Indicates whether the coverage information should be collected while executing the test',\n  collectCoverageFrom: 'An array of glob patterns indicating a set of files for which coverage information should be collected',\n  coverageDirectory: 'The directory where Jest should output its coverage files',\n  coveragePathIgnorePatterns: 'An array of regexp pattern strings used to skip coverage collection',\n  coverageReporters: 'A list of reporter names that Jest uses when writing coverage reports',\n  coverageThreshold: 'An object that configures minimum threshold enforcement for coverage results',\n  dependencyExtractor: 'A path to a custom dependency extractor',\n  errorOnDeprecated: 'Make calling deprecated APIs throw helpful error messages',\n  forceCoverageMatch: 'Force coverage collection from ignored files using an array of glob patterns',\n  globalSetup: 'A path to a module which exports an async function that is triggered once before all test suites',\n  globalTeardown: 'A path to a module which exports an async function that is triggered once after all test suites',\n  globals: 'A set of global variables that need to be available in all test environments',\n  maxWorkers: 'The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.',\n  moduleDirectories: \"An array of directory names to be searched recursively up from the requiring module's location\",\n  moduleFileExtensions: 'An array of file extensions your modules use',\n  moduleNameMapper: 'A map from regular expressions to module names that allow to stub out resources with a single module',\n  modulePathIgnorePatterns: \"An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\",\n  notify: 'Activates notifications for test results',\n  notifyMode: 'An enum that specifies notification mode. Requires { notify: true }',\n  preset: \"A preset that is used as a base for Jest's configuration\",\n  projects: 'Run tests from one or more projects',\n  reporters: 'Use this configuration option to add custom reporters to Jest',\n  resetMocks: 'Automatically reset mock state between every test',\n  resetModules: 'Reset the module registry before running each individual test',\n  resolver: 'A path to a custom resolver',\n  restoreMocks: 'Automatically restore mock state between every test',\n  rootDir: 'The root directory that Jest should scan for tests and modules within',\n  roots: 'A list of paths to directories that Jest should use to search for files in',\n  runner: \"Allows you to use a custom runner instead of Jest's default test runner\",\n  setupFiles: 'The paths to modules that run some code to configure or set up the testing environment before each test',\n  setupFilesAfterEnv: 'A list of paths to modules that run some code to configure or set up the testing framework before each test',\n  snapshotSerializers: 'A list of paths to snapshot serializer modules Jest should use for snapshot testing',\n  testEnvironment: 'The test environment that will be used for testing',\n  testEnvironmentOptions: 'Options that will be passed to the testEnvironment',\n  testLocationInResults: 'Adds a location field to test results',\n  testMatch: 'The glob patterns Jest uses to detect test files',\n  testPathIgnorePatterns: 'An array of regexp pattern strings that are matched against all test paths, matched tests are skipped',\n  testRegex: 'The regexp pattern or array of patterns that Jest uses to detect test files',\n  testResultsProcessor: 'This option allows the use of a custom results processor',\n  testRunner: 'This option allows use of a custom test runner',\n  testURL: 'This option sets the URL for the jsdom environment. It is reflected in properties such as location.href',\n  timers: 'Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"',\n  transform: 'A map from regular expressions to paths to transformers',\n  transformIgnorePatterns: 'An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation',\n  unmockedModulePathPatterns: 'An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them',\n  verbose: 'Indicates whether each individual test should be reported during the run',\n  watchPathIgnorePatterns: 'An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode',\n  watchman: 'Whether to use watchman for file crawling'\n};\nvar _default = descriptions;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}