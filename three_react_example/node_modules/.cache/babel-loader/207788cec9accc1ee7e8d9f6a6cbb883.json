{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = enhanceUnexpectedTokenMessage;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst DOT = ' \\u2022 ';\n\nfunction enhanceUnexpectedTokenMessage(e) {\n  e.stack = \"\".concat(_chalk().default.bold.red('Jest encountered an unexpected token'), \"\\n\\nThis usually means that you are trying to import a file which Jest cannot parse, e.g. it's not plain JavaScript.\\n\\nBy default, if Jest sees a Babel config, it will use that to transform your files, ignoring \\\"node_modules\\\".\\n\\nHere's what you can do:\\n\").concat(DOT, \"To have some of your \\\"node_modules\\\" files transformed, you can specify a custom \").concat(_chalk().default.bold('\"transformIgnorePatterns\"'), \" in your config.\\n\").concat(DOT, \"If you need a custom transformation specify a \").concat(_chalk().default.bold('\"transform\"'), \" option in your config.\\n\").concat(DOT, \"If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \").concat(_chalk().default.bold('\"moduleNameMapper\"'), \" config option.\\n\\nYou'll find more details and examples of these config options in the docs:\\n\").concat(_chalk().default.cyan('https://jestjs.io/docs/en/configuration.html'), \"\\n\\n\").concat(_chalk().default.bold.red('Details:'), \"\\n\\n\") + e.stack;\n  return e;\n}","map":null,"metadata":{},"sourceType":"script"}