{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = shouldInstrument;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function _jestRegexUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function _micromatch() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst MOCKS_PATTERN = new RegExp((0, _jestRegexUtil().escapePathForRegex)(_path().default.sep + '__mocks__' + _path().default.sep));\n\nfunction shouldInstrument(filename, options, config) {\n  if (!options.collectCoverage) {\n    return false;\n  }\n\n  if (config.forceCoverageMatch.length && _micromatch().default.any(filename, config.forceCoverageMatch)) {\n    return true;\n  }\n\n  if (!config.testPathIgnorePatterns.some(pattern => !!filename.match(pattern))) {\n    if (config.testRegex.some(regex => new RegExp(regex).test(filename))) {\n      return false;\n    }\n\n    if (_micromatch().default.some((0, _jestUtil().replacePathSepForGlob)(filename), config.testMatch)) {\n      return false;\n    }\n  }\n\n  if ( // This configuration field contains an object in the form of:\n  // {'path/to/file.js': true}\n  options.collectCoverageOnlyFrom && !options.collectCoverageOnlyFrom[filename]) {\n    return false;\n  }\n\n  if ( // still cover if `only` is specified\n  !options.collectCoverageOnlyFrom && options.collectCoverageFrom && !_micromatch().default.some((0, _jestUtil().replacePathSepForGlob)(_path().default.relative(config.rootDir, filename)), options.collectCoverageFrom)) {\n    return false;\n  }\n\n  if (config.coveragePathIgnorePatterns.some(pattern => !!filename.match(pattern))) {\n    return false;\n  }\n\n  if (config.globalSetup === filename) {\n    return false;\n  }\n\n  if (config.globalTeardown === filename) {\n    return false;\n  }\n\n  if (config.setupFiles.includes(filename)) {\n    return false;\n  }\n\n  if (config.setupFilesAfterEnv.includes(filename)) {\n    return false;\n  }\n\n  if (MOCKS_PATTERN.test(filename)) {\n    return false;\n  }\n\n  if (options.changedFiles && !options.changedFiles.has(filename)) {\n    return false;\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}