{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _constants = require('../constants');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Prompt {\n  constructor() {\n    _defineProperty(this, '_entering', void 0);\n\n    _defineProperty(this, '_value', void 0);\n\n    _defineProperty(this, '_onChange', void 0);\n\n    _defineProperty(this, '_onSuccess', void 0);\n\n    _defineProperty(this, '_onCancel', void 0);\n\n    _defineProperty(this, '_offset', void 0);\n\n    _defineProperty(this, '_promptLength', void 0);\n\n    _defineProperty(this, '_selection', void 0);\n\n    _defineProperty(this, '_onResize', () => {\n      this._onChange();\n    }); // Copied from `enter` to satisfy TS\n\n\n    this._entering = true;\n    this._value = '';\n    this._selection = null;\n    this._offset = -1;\n    this._promptLength = 0;\n\n    this._onChange = () => {};\n\n    this._onSuccess = () => {};\n\n    this._onCancel = () => {};\n  }\n\n  enter(onChange, onSuccess, onCancel) {\n    this._entering = true;\n    this._value = '';\n    this._onSuccess = onSuccess;\n    this._onCancel = onCancel;\n    this._selection = null;\n    this._offset = -1;\n    this._promptLength = 0;\n\n    this._onChange = () => onChange(this._value, {\n      max: 10,\n      offset: this._offset\n    });\n\n    this._onChange();\n\n    process.stdout.on('resize', this._onResize);\n  }\n\n  setPromptLength(length) {\n    this._promptLength = length;\n  }\n\n  setPromptSelection(selected) {\n    this._selection = selected;\n  }\n\n  put(key) {\n    switch (key) {\n      case _constants.KEYS.ENTER:\n        this._entering = false;\n\n        this._onSuccess(this._selection || this._value);\n\n        this.abort();\n        break;\n\n      case _constants.KEYS.ESCAPE:\n        this._entering = false;\n\n        this._onCancel(this._value);\n\n        this.abort();\n        break;\n\n      case _constants.KEYS.ARROW_DOWN:\n        this._offset = Math.min(this._offset + 1, this._promptLength - 1);\n\n        this._onChange();\n\n        break;\n\n      case _constants.KEYS.ARROW_UP:\n        this._offset = Math.max(this._offset - 1, -1);\n\n        this._onChange();\n\n        break;\n\n      case _constants.KEYS.ARROW_LEFT:\n      case _constants.KEYS.ARROW_RIGHT:\n        break;\n\n      default:\n        this._value = key === _constants.KEYS.BACKSPACE ? this._value.slice(0, -1) : this._value + key;\n        this._offset = -1;\n        this._selection = null;\n\n        this._onChange();\n\n        break;\n    }\n  }\n\n  abort() {\n    this._entering = false;\n    this._value = '';\n    process.stdout.removeListener('resize', this._onResize);\n  }\n\n  isEntering() {\n    return this._entering;\n  }\n\n}\n\nexports.default = Prompt;","map":null,"metadata":{},"sourceType":"script"}