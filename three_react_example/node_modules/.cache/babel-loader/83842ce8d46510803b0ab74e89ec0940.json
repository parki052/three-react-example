{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getSortedUsageRows = exports.filterInteractivePlugins = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst filterInteractivePlugins = (watchPlugins, globalConfig) => {\n  const usageInfos = watchPlugins.map(p => p.getUsageInfo && p.getUsageInfo(globalConfig));\n  return watchPlugins.filter((_plugin, i) => {\n    const usageInfo = usageInfos[i];\n\n    if (usageInfo) {\n      const key = usageInfo.key;\n      return !usageInfos.slice(i + 1).some(u => !!u && key === u.key);\n    }\n\n    return false;\n  });\n};\n\nexports.filterInteractivePlugins = filterInteractivePlugins;\n\nfunction notEmpty(value) {\n  return value != null;\n}\n\nconst getSortedUsageRows = (watchPlugins, globalConfig) => filterInteractivePlugins(watchPlugins, globalConfig).sort((a, b) => {\n  if (a.isInternal && b.isInternal) {\n    // internal plugins in the order we specify them\n    return 0;\n  }\n\n  if (a.isInternal !== b.isInternal) {\n    // external plugins afterwards\n    return a.isInternal ? -1 : 1;\n  }\n\n  const usageInfoA = a.getUsageInfo && a.getUsageInfo(globalConfig);\n  const usageInfoB = b.getUsageInfo && b.getUsageInfo(globalConfig);\n\n  if (usageInfoA && usageInfoB) {\n    // external plugins in alphabetical order\n    return usageInfoA.key.localeCompare(usageInfoB.key);\n  }\n\n  return 0;\n}).map(p => p.getUsageInfo && p.getUsageInfo(globalConfig)).filter(notEmpty);\n\nexports.getSortedUsageRows = getSortedUsageRows;","map":null,"metadata":{},"sourceType":"script"}