{"ast":null,"code":"/**\n * Wrapper for the toaster (https://github.com/nels-o/toaster)\n */\nvar path = require('path');\n\nvar notifier = path.resolve(__dirname, '../vendor/snoreToast/SnoreToast.exe');\n\nvar utils = require('../lib/utils');\n\nvar Balloon = require('./balloon');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar fallback = void 0;\nmodule.exports = WindowsToaster;\n\nfunction WindowsToaster(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof WindowsToaster)) {\n    return new WindowsToaster(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(WindowsToaster, EventEmitter);\n\nfunction noop() {}\n\nvar timeoutMessage = 'the toast has timed out';\nvar successMessage = 'user clicked on the toast';\n\nfunction hasText(str, txt) {\n  return str && str.indexOf(txt) !== -1;\n}\n\nWindowsToaster.prototype.notify = function (options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof fn);\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(this, options, function cb(err, data) {\n    // Needs to filter out timeout. Not an actual error.\n    if (err && hasText(data, timeoutMessage)) {\n      return callback(null, data);\n    }\n\n    callback(err, data);\n  }, function mapper(data) {\n    if (hasText(data, successMessage)) {\n      return 'click';\n    }\n\n    if (hasText(data, timeoutMessage)) {\n      return 'timeout';\n    }\n\n    return false;\n  });\n  options.title = options.title || 'Node Notification:';\n\n  if (typeof options.message === 'undefined' && typeof options.close === 'undefined') {\n    callback(new Error('Message or ID to close is required.'));\n    return this;\n  }\n\n  if (!utils.isWin8() && !utils.isWSL() && !!this.options.withFallback) {\n    fallback = fallback || new Balloon(this.options);\n    return fallback.notify(options, callback);\n  }\n\n  options = utils.mapToWin8(options);\n  var argsList = utils.constructArgumentList(options, {\n    explicitTrue: true,\n    wrapper: '',\n    keepNewlines: true,\n    noEscape: true\n  });\n  utils.fileCommand(this.options.customPath || notifier, argsList, actionJackedCallback);\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}