{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nclass JestHooks {\n  constructor() {\n    var _this = this;\n\n    _defineProperty(this, '_listeners', void 0);\n\n    _defineProperty(this, '_subscriber', void 0);\n\n    _defineProperty(this, '_emitter', void 0);\n\n    this._listeners = {\n      onFileChange: [],\n      onTestRunComplete: [],\n      shouldRunTestSuite: []\n    };\n    this._subscriber = {\n      onFileChange: fn => {\n        this._listeners.onFileChange.push(fn);\n      },\n      onTestRunComplete: fn => {\n        this._listeners.onTestRunComplete.push(fn);\n      },\n      shouldRunTestSuite: fn => {\n        this._listeners.shouldRunTestSuite.push(fn);\n      }\n    };\n    this._emitter = {\n      onFileChange: fs => this._listeners.onFileChange.forEach(listener => listener(fs)),\n      onTestRunComplete: results => this._listeners.onTestRunComplete.forEach(listener => listener(results)),\n      shouldRunTestSuite: function () {\n        var _shouldRunTestSuite = _asyncToGenerator(function* (testSuiteInfo) {\n          const result = yield Promise.all(_this._listeners.shouldRunTestSuite.map(listener => listener(testSuiteInfo)));\n          return result.every(Boolean);\n        });\n\n        function shouldRunTestSuite(_x) {\n          return _shouldRunTestSuite.apply(this, arguments);\n        }\n\n        return shouldRunTestSuite;\n      }()\n    };\n  }\n\n  isUsed(hook) {\n    return this._listeners[hook] && this._listeners[hook].length;\n  }\n\n  getSubscriber() {\n    return this._subscriber;\n  }\n\n  getEmitter() {\n    return this._emitter;\n  }\n\n}\n\nvar _default = JestHooks;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}