{"ast":null,"code":"'use strict';\n\nvar gitHosts = require('./git-host-info.js');\n/* eslint-disable node/no-deprecated-api */\n\n\nvar extend = Object.assign || require('util')._extend;\n\nvar GitHost = module.exports = function (type, user, auth, project, committish, defaultRepresentation, opts) {\n  var gitHostInfo = this;\n  gitHostInfo.type = type;\n  Object.keys(gitHosts[type]).forEach(function (key) {\n    gitHostInfo[key] = gitHosts[type][key];\n  });\n  gitHostInfo.user = user;\n  gitHostInfo.auth = auth;\n  gitHostInfo.project = project;\n  gitHostInfo.committish = committish;\n  gitHostInfo.default = defaultRepresentation;\n  gitHostInfo.opts = opts || {};\n};\n\nGitHost.prototype = {};\n\nGitHost.prototype.hash = function () {\n  return this.committish ? '#' + this.committish : '';\n};\n\nGitHost.prototype._fill = function (template, opts) {\n  if (!template) return;\n  var vars = extend({}, opts);\n  vars.path = vars.path ? vars.path.replace(/^[/]+/g, '') : '';\n  opts = extend(extend({}, this.opts), opts);\n  var self = this;\n  Object.keys(this).forEach(function (key) {\n    if (self[key] != null && vars[key] == null) vars[key] = self[key];\n  });\n  var rawAuth = vars.auth;\n  var rawComittish = vars.committish;\n  var rawFragment = vars.fragment;\n  var rawPath = vars.path;\n  Object.keys(vars).forEach(function (key) {\n    vars[key] = encodeURIComponent(vars[key]);\n  });\n  vars['auth@'] = rawAuth ? rawAuth + '@' : '';\n  vars['#fragment'] = rawFragment ? '#' + this.hashformat(rawFragment) : '';\n  vars.fragment = vars.fragment ? vars.fragment : '';\n  vars['#path'] = rawPath ? '#' + this.hashformat(rawPath) : '';\n  vars['/path'] = vars.path ? '/' + vars.path : '';\n\n  if (opts.noCommittish) {\n    vars['#committish'] = '';\n    vars['/tree/committish'] = '';\n    vars['/comittish'] = '';\n    vars.comittish = '';\n  } else {\n    vars['#committish'] = rawComittish ? '#' + rawComittish : '';\n    vars['/tree/committish'] = vars.committish ? '/' + vars.treepath + '/' + vars.committish : '';\n    vars['/committish'] = vars.committish ? '/' + vars.committish : '';\n    vars.committish = vars.committish || 'master';\n  }\n\n  var res = template;\n  Object.keys(vars).forEach(function (key) {\n    res = res.replace(new RegExp('[{]' + key + '[}]', 'g'), vars[key]);\n  });\n\n  if (opts.noGitPlus) {\n    return res.replace(/^git[+]/, '');\n  } else {\n    return res;\n  }\n};\n\nGitHost.prototype.ssh = function (opts) {\n  return this._fill(this.sshtemplate, opts);\n};\n\nGitHost.prototype.sshurl = function (opts) {\n  return this._fill(this.sshurltemplate, opts);\n};\n\nGitHost.prototype.browse = function (P, F, opts) {\n  if (typeof P === 'string') {\n    if (typeof F !== 'string') {\n      opts = F;\n      F = null;\n    }\n\n    return this._fill(this.browsefiletemplate, extend({\n      fragment: F,\n      path: P\n    }, opts));\n  } else {\n    return this._fill(this.browsetemplate, P);\n  }\n};\n\nGitHost.prototype.docs = function (opts) {\n  return this._fill(this.docstemplate, opts);\n};\n\nGitHost.prototype.bugs = function (opts) {\n  return this._fill(this.bugstemplate, opts);\n};\n\nGitHost.prototype.https = function (opts) {\n  return this._fill(this.httpstemplate, opts);\n};\n\nGitHost.prototype.git = function (opts) {\n  return this._fill(this.gittemplate, opts);\n};\n\nGitHost.prototype.shortcut = function (opts) {\n  return this._fill(this.shortcuttemplate, opts);\n};\n\nGitHost.prototype.path = function (opts) {\n  return this._fill(this.pathtemplate, opts);\n};\n\nGitHost.prototype.tarball = function (opts) {\n  return this._fill(this.tarballtemplate, opts);\n};\n\nGitHost.prototype.file = function (P, opts) {\n  return this._fill(this.filetemplate, extend({\n    path: P\n  }, opts));\n};\n\nGitHost.prototype.getDefaultRepresentation = function () {\n  return this.default;\n};\n\nGitHost.prototype.toString = function (opts) {\n  return (this[this.default] || this.sshurl).call(this, opts);\n};","map":null,"metadata":{},"sourceType":"script"}