{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DiffOptions', {\n  enumerable: true,\n  get: function get() {\n    return _jestDiff.DiffOptions;\n  }\n});\nexports.matcherHint = exports.matcherErrorMessage = exports.getLabelPrinter = exports.pluralize = exports.diff = exports.printDiffOrStringify = exports.ensureExpectedIsNonNegativeInteger = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.DIM_COLOR = exports.BOLD_WEIGHT = exports.INVERTED_COLOR = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = _interopRequireWildcard(require('jest-diff'));\n\nvar _jestGetType = _interopRequireWildcard(require('jest-get-type'));\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst _prettyFormat$plugins = _prettyFormat.default.plugins,\n      AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,\n      DOMCollection = _prettyFormat$plugins.DOMCollection,\n      DOMElement = _prettyFormat$plugins.DOMElement,\n      Immutable = _prettyFormat$plugins.Immutable,\n      ReactElement = _prettyFormat$plugins.ReactElement,\n      ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.default)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch (e) {\n    result = (0, _prettyFormat.default)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text => text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text => text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object => RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value => EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (name, value, print // printExpected or printReceived\n) => {\n  const type = (0, _jestGetType.default)(value);\n  const hasType = type !== 'null' && type !== 'undefined' ? \"\".concat(name, \" has type:  \").concat(type, \"\\n\") : '';\n  const hasValue = \"\".concat(name, \" has value: \").concat(print(value));\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n    'this matcher must not have an expected argument', printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), \"\".concat(RECEIVED_COLOR('received'), \" value must be a number\"), printWithType('Received', actual, printReceived)));\n  }\n};\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), \"\".concat(EXPECTED_COLOR('expected'), \" value must be a number\"), printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' || !Number.isSafeInteger(expected) || expected < 0) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), \"\".concat(EXPECTED_COLOR('expected'), \" value must be a non-negative integer\"), printWithType('Expected', expected, printExpected)));\n  }\n};\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.default)(expected);\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if ((0, _jestGetType.isPrimitive)(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    return typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received));\n  }\n\n  if (expectedType === 'date' || expectedType === 'function' || expectedType === 'regexp') {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (expectedType === 'object' && typeof expected.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst printDiffOrStringify = (expected, received, expectedLabel, receivedLabel, expand) => {\n  if (typeof expected === 'string' && typeof received === 'string') {\n    const result = (0, _jestDiff.getStringDiff)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (result !== null) {\n      if (result.isMultiline) {\n        return result.annotatedDiff;\n      }\n\n      const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n      const expectedLine = printLabel(expectedLabel) + printExpected(result.a);\n      const receivedLine = printLabel(receivedLabel) + printReceived(result.b);\n      return expectedLine + '\\n' + receivedLine;\n    }\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const difference = (0, _jestDiff.default)(expected, received, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand\n    });\n\n    if (typeof difference === 'string' && difference.includes('- ' + expectedLabel) && difference.includes('+ ' + receivedLabel)) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine = printLabel(receivedLabel) + (stringify(expected) === stringify(received) ? 'serializes to the same string' : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nconst diff = (a, b, options) => shouldPrintDiff(a, b) ? (0, _jestDiff.default)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) => (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce((max, string) => string.length > max ? string.length : max, 0);\n  return string => \"\".concat(string, \": \").concat(' '.repeat(maxLength - string.length));\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (hint, generic, specific // incorrect value returned from call to printWithType\n) => \"\".concat(hint, \"\\n\\n\").concat(_chalk.default.bold('Matcher error'), \": \").concat(generic, \"\\n\\n\").concat(specific); // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (matcherName, received = 'received', expected = 'expected', options = {}) => {\n  const _options$comment = options.comment,\n        comment = _options$comment === void 0 ? '' : _options$comment,\n        _options$expectedColo = options.expectedColor,\n        expectedColor = _options$expectedColo === void 0 ? EXPECTED_COLOR : _options$expectedColo,\n        _options$isDirectExpe = options.isDirectExpectCall,\n        isDirectExpectCall = _options$isDirectExpe === void 0 ? false : _options$isDirectExpe,\n        _options$isNot = options.isNot,\n        isNot = _options$isNot === void 0 ? false : _options$isNot,\n        _options$promise = options.promise,\n        promise = _options$promise === void 0 ? '' : _options$promise,\n        _options$receivedColo = options.receivedColor,\n        receivedColor = _options$receivedColo === void 0 ? RECEIVED_COLOR : _options$receivedColo,\n        _options$secondArgume = options.secondArgument,\n        secondArgument = _options$secondArgume === void 0 ? '' : _options$secondArgume,\n        _options$secondArgume2 = options.secondArgumentColor,\n        secondArgumentColor = _options$secondArgume2 === void 0 ? EXPECTED_COLOR : _options$secondArgume2;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;","map":null,"metadata":{},"sourceType":"script"}