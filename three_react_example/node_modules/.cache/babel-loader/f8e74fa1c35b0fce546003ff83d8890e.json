{"ast":null,"code":"'use strict';\n\nvar _createSpy = _interopRequireDefault(require('./createSpy'));\n\nvar _Env = _interopRequireDefault(require('./Env'));\n\nvar _JsApiReporter = _interopRequireDefault(require('./JsApiReporter'));\n\nvar _ReportDispatcher = _interopRequireDefault(require('./ReportDispatcher'));\n\nvar _Spec = _interopRequireDefault(require('./Spec'));\n\nvar _spyRegistry = _interopRequireDefault(require('./spyRegistry'));\n\nvar _Suite = _interopRequireDefault(require('./Suite'));\n\nvar _Timer = _interopRequireDefault(require('./Timer'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst create = function create(createOptions) {\n  const j$ = _objectSpread({}, createOptions);\n\n  j$._DEFAULT_TIMEOUT_INTERVAL = createOptions.testTimeout || 5000;\n\n  j$.getEnv = function (options) {\n    const env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options); //jasmine. singletons in here (setTimeout blah blah).\n\n    return env;\n  };\n\n  j$.createSpy = _createSpy.default;\n  j$.Env = (0, _Env.default)(j$);\n  j$.JsApiReporter = _JsApiReporter.default;\n  j$.ReportDispatcher = _ReportDispatcher.default;\n  j$.Spec = _Spec.default;\n  j$.SpyRegistry = _spyRegistry.default;\n  j$.Suite = _Suite.default;\n  j$.Timer = _Timer.default;\n  j$.version = '2.5.2-light';\n  return j$;\n};\n\nconst _interface = function _interface(jasmine, env) {\n  const jasmineInterface = {\n    describe(description, specDefinitions) {\n      return env.describe(description, specDefinitions);\n    },\n\n    xdescribe(description, specDefinitions) {\n      return env.xdescribe(description, specDefinitions);\n    },\n\n    fdescribe(description, specDefinitions) {\n      return env.fdescribe(description, specDefinitions);\n    },\n\n    it() {\n      return env.it.apply(env, arguments);\n    },\n\n    xit() {\n      return env.xit.apply(env, arguments);\n    },\n\n    fit() {\n      return env.fit.apply(env, arguments);\n    },\n\n    beforeEach() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n\n      return env.beforeEach.apply(env, arguments);\n    },\n\n    afterEach() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n\n      return env.afterEach.apply(env, arguments);\n    },\n\n    beforeAll() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n\n      return env.beforeAll.apply(env, arguments);\n    },\n\n    afterAll() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n\n      return env.afterAll.apply(env, arguments);\n    },\n\n    pending() {\n      return env.pending.apply(env, arguments);\n    },\n\n    fail() {\n      return env.fail.apply(env, arguments);\n    },\n\n    spyOn(obj, methodName, accessType) {\n      return env.spyOn(obj, methodName, accessType);\n    },\n\n    jsApiReporter: new jasmine.JsApiReporter({\n      timer: new jasmine.Timer()\n    }),\n    jasmine\n  };\n  return jasmineInterface;\n}; // Interface is a reserved word in strict mode, so can't export it as ESM\n\n\nmodule.exports = {\n  create,\n  interface: _interface\n};","map":null,"metadata":{},"sourceType":"script"}