{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst CLEAR = _jestUtil().specialChars.CLEAR;\n\nconst usage = entity => \"\\n\".concat(_chalk().default.bold('Pattern Mode Usage'), \"\\n\") + \" \".concat(_chalk().default.dim('\\u203A Press'), \" Esc \").concat(_chalk().default.dim('to exit pattern mode.'), \"\\n\") + \" \".concat(_chalk().default.dim('\\u203A Press'), \" Enter \") + \"\".concat(_chalk().default.dim(\"to filter by a \".concat(entity, \" regex pattern.\")), \"\\n\") + \"\\n\";\n\nconst usageRows = usage('').split('\\n').length;\n\nclass PatternPrompt {\n  constructor(pipe, prompt) {\n    _defineProperty(this, '_pipe', void 0);\n\n    _defineProperty(this, '_prompt', void 0);\n\n    _defineProperty(this, '_entityName', void 0);\n\n    _defineProperty(this, '_currentUsageRows', void 0); // TODO: Should come in the constructor\n\n\n    this._entityName = '';\n    this._pipe = pipe;\n    this._prompt = prompt;\n    this._currentUsageRows = usageRows;\n  }\n\n  run(onSuccess, onCancel, options) {\n    this._pipe.write(_ansiEscapes().default.cursorHide);\n\n    this._pipe.write(CLEAR);\n\n    if (options && options.header) {\n      this._pipe.write(options.header + '\\n');\n\n      this._currentUsageRows = usageRows + options.header.split('\\n').length;\n    } else {\n      this._currentUsageRows = usageRows;\n    }\n\n    this._pipe.write(usage(this._entityName));\n\n    this._pipe.write(_ansiEscapes().default.cursorShow);\n\n    this._prompt.enter(this._onChange.bind(this), onSuccess, onCancel);\n  }\n\n  _onChange(_pattern, _options) {\n    this._pipe.write(_ansiEscapes().default.eraseLine);\n\n    this._pipe.write(_ansiEscapes().default.cursorLeft);\n  }\n\n}\n\nexports.default = PatternPrompt;","map":null,"metadata":{},"sourceType":"script"}