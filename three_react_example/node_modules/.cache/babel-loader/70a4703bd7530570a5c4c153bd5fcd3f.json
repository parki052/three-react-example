{"ast":null,"code":"'use strict'; // hoisted due to circular dependency on command.\n\nmodule.exports = {\n  applyMiddleware,\n  commandMiddlewareFactory,\n  globalMiddlewareFactory\n};\n\nconst isPromise = require('./is-promise');\n\nconst argsert = require('./argsert');\n\nfunction globalMiddlewareFactory(globalMiddleware, context) {\n  return function (callback, applyBeforeValidation = false) {\n    argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length);\n\n    if (Array.isArray(callback)) {\n      for (let i = 0; i < callback.length; i++) {\n        if (typeof callback[i] !== 'function') {\n          throw Error('middleware must be a function');\n        }\n\n        callback[i].applyBeforeValidation = applyBeforeValidation;\n      }\n\n      Array.prototype.push.apply(globalMiddleware, callback);\n    } else if (typeof callback === 'function') {\n      callback.applyBeforeValidation = applyBeforeValidation;\n      globalMiddleware.push(callback);\n    }\n\n    return context;\n  };\n}\n\nfunction commandMiddlewareFactory(commandMiddleware) {\n  if (!commandMiddleware) return [];\n  return commandMiddleware.map(middleware => {\n    middleware.applyBeforeValidation = false;\n    return middleware;\n  });\n}\n\nfunction applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n  const beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true');\n  return middlewares.reduce((accumulation, middleware) => {\n    if (middleware.applyBeforeValidation !== beforeValidation && !isPromise(accumulation)) {\n      return accumulation;\n    }\n\n    if (isPromise(accumulation)) {\n      return accumulation.then(initialObj => Promise.all([initialObj, middleware(initialObj, yargs)])).then(([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj));\n    } else {\n      const result = middleware(argv, yargs);\n      if (beforeValidation && isPromise(result)) throw beforeValidationError;\n      return isPromise(result) ? result.then(middlewareObj => Object.assign(accumulation, middlewareObj)) : Object.assign(accumulation, result);\n    }\n  }, argv);\n}","map":null,"metadata":{},"sourceType":"script"}