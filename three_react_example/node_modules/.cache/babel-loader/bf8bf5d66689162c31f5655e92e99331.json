{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ansiEscapes() {\n  const data = _interopRequireDefault(require('ansi-escapes'));\n\n  _ansiEscapes = function _ansiEscapes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst ARROW = _jestUtil().specialChars.ARROW,\n      CLEAR = _jestUtil().specialChars.CLEAR;\n\nclass SnapshotInteractiveMode {\n  constructor(pipe) {\n    _defineProperty(this, '_pipe', void 0);\n\n    _defineProperty(this, '_isActive', void 0);\n\n    _defineProperty(this, '_updateTestRunnerConfig', void 0);\n\n    _defineProperty(this, '_testAssertions', void 0);\n\n    _defineProperty(this, '_countPaths', void 0);\n\n    _defineProperty(this, '_skippedNum', void 0);\n\n    this._pipe = pipe;\n    this._isActive = false;\n    this._skippedNum = 0;\n  }\n\n  isActive() {\n    return this._isActive;\n  }\n\n  getSkippedNum() {\n    return this._skippedNum;\n  }\n\n  _clearTestSummary() {\n    this._pipe.write(_ansiEscapes().default.cursorUp(6));\n\n    this._pipe.write(_ansiEscapes().default.eraseDown);\n  }\n\n  _drawUIProgress() {\n    this._clearTestSummary();\n\n    const numPass = this._countPaths - this._testAssertions.length;\n    const numRemaining = this._countPaths - numPass - this._skippedNum;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', numRemaining) + ' remaining');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    if (this._skippedNum) {\n      stats += ', ' + _chalk().default.bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Progress'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'u' + _chalk().default.dim(' to update failing snapshots for this test.'), _chalk().default.dim(ARROW + 'Press ') + 's' + _chalk().default.dim(' to skip the current test.'), _chalk().default.dim(ARROW + 'Press ') + 'q' + _chalk().default.dim(' to quit Interactive Snapshot Mode.'), _chalk().default.dim(ARROW + 'Press ') + 'Enter' + _chalk().default.dim(' to trigger a test run.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDoneWithSkipped() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    if (this._skippedNum) {\n      stats += ', ' + _chalk().default.bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Result'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'r' + _chalk().default.dim(' to restart Interactive Snapshot Mode.'), _chalk().default.dim(ARROW + 'Press ') + 'q' + _chalk().default.dim(' to quit Interactive Snapshot Mode.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIDone() {\n    this._pipe.write(CLEAR);\n\n    const numPass = this._countPaths - this._testAssertions.length;\n\n    let stats = _chalk().default.bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');\n\n    if (numPass) {\n      stats += ', ' + _chalk().default.bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');\n    }\n\n    const messages = ['\\n' + _chalk().default.bold('Interactive Snapshot Result'), ARROW + stats, '\\n' + _chalk().default.bold('Watch Usage'), _chalk().default.dim(ARROW + 'Press ') + 'Enter' + _chalk().default.dim(' to return to watch mode.')];\n\n    this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n  }\n\n  _drawUIOverlay() {\n    if (this._testAssertions.length === 0) {\n      return this._drawUIDone();\n    }\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      return this._drawUIDoneWithSkipped();\n    }\n\n    return this._drawUIProgress();\n  }\n\n  put(key) {\n    switch (key) {\n      case 's':\n        if (this._skippedNum === this._testAssertions.length) break;\n        this._skippedNum += 1; // move skipped test to the end\n\n        this._testAssertions.push(this._testAssertions.shift());\n\n        if (this._testAssertions.length - this._skippedNum > 0) {\n          this._run(false);\n        } else {\n          this._drawUIDoneWithSkipped();\n        }\n\n        break;\n\n      case 'u':\n        this._run(true);\n\n        break;\n\n      case 'q':\n      case _jestWatcher().KEYS.ESCAPE:\n        this.abort();\n        break;\n\n      case 'r':\n        this.restart();\n        break;\n\n      case _jestWatcher().KEYS.ENTER:\n        if (this._testAssertions.length === 0) {\n          this.abort();\n        } else {\n          this._run(false);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  abort() {\n    this._isActive = false;\n    this._skippedNum = 0;\n\n    this._updateTestRunnerConfig(null, false);\n  }\n\n  restart() {\n    this._skippedNum = 0;\n    this._countPaths = this._testAssertions.length;\n\n    this._run(false);\n  }\n\n  updateWithResults(results) {\n    const hasSnapshotFailure = !!results.snapshot.failure;\n\n    if (hasSnapshotFailure) {\n      this._drawUIOverlay();\n\n      return;\n    }\n\n    this._testAssertions.shift();\n\n    if (this._testAssertions.length - this._skippedNum === 0) {\n      this._drawUIOverlay();\n\n      return;\n    } // Go to the next test\n\n\n    this._run(false);\n  }\n\n  _run(shouldUpdateSnapshot) {\n    const testAssertion = this._testAssertions[0];\n\n    this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);\n  }\n\n  run(failedSnapshotTestAssertions, onConfigChange) {\n    if (!failedSnapshotTestAssertions.length) {\n      return;\n    }\n\n    this._testAssertions = [...failedSnapshotTestAssertions];\n    this._countPaths = this._testAssertions.length;\n    this._updateTestRunnerConfig = onConfigChange;\n    this._isActive = true;\n\n    this._run(false);\n  }\n\n}\n\nexports.default = SnapshotInteractiveMode;","map":null,"metadata":{},"sourceType":"script"}