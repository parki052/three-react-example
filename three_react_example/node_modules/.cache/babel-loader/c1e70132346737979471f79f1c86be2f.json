{"ast":null,"code":"'use strict';\n\nmodule.exports = StackUtils;\n\nfunction StackUtils(opts) {\n  if (!(this instanceof StackUtils)) {\n    throw new Error('StackUtils constructor must be called with new');\n  }\n\n  opts = opts || {};\n  this._cwd = (opts.cwd || process.cwd()).replace(/\\\\/g, '/');\n  this._internals = opts.internals || [];\n  this._wrapCallSite = opts.wrapCallSite || false;\n}\n\nmodule.exports.nodeInternals = nodeInternals;\n\nfunction nodeInternals() {\n  if (!module.exports.natives) {\n    module.exports.natives = Object.keys(process.binding('natives'));\n    module.exports.natives.push('bootstrap_node', 'node', 'internal/bootstrap/node');\n  }\n\n  return module.exports.natives.map(function (n) {\n    return new RegExp('\\\\(' + n + '\\\\.js:\\\\d+:\\\\d+\\\\)$');\n  }).concat([/\\s*at (bootstrap_)?node\\.js:\\d+:\\d+?$/, /\\(internal\\/[^:]+:\\d+:\\d+\\)$/, /\\/\\.node-spawn-wrap-\\w+-\\w+\\/node:\\d+:\\d+\\)?$/]);\n}\n\nStackUtils.prototype.clean = function (stack) {\n  if (!Array.isArray(stack)) {\n    stack = stack.split('\\n');\n  }\n\n  if (!/^\\s*at /.test(stack[0]) && /^\\s*at /.test(stack[1])) {\n    stack = stack.slice(1);\n  }\n\n  var outdent = false;\n  var lastNonAtLine = null;\n  var result = [];\n  stack.forEach(function (st) {\n    st = st.replace(/\\\\/g, '/');\n\n    var isInternal = this._internals.some(function (internal) {\n      return internal.test(st);\n    });\n\n    if (isInternal) {\n      return null;\n    }\n\n    var isAtLine = /^\\s*at /.test(st);\n\n    if (outdent) {\n      st = st.replace(/\\s+$/, '').replace(/^(\\s+)at /, '$1');\n    } else {\n      st = st.trim();\n\n      if (isAtLine) {\n        st = st.substring(3);\n      }\n    }\n\n    st = st.replace(this._cwd + '/', '');\n\n    if (st) {\n      if (isAtLine) {\n        if (lastNonAtLine) {\n          result.push(lastNonAtLine);\n          lastNonAtLine = null;\n        }\n\n        result.push(st);\n      } else {\n        outdent = true;\n        lastNonAtLine = st;\n      }\n    }\n  }, this);\n  stack = result.join('\\n').trim();\n\n  if (stack) {\n    return stack + '\\n';\n  }\n\n  return '';\n};\n\nStackUtils.prototype.captureString = function (limit, fn) {\n  if (typeof limit === 'function') {\n    fn = limit;\n    limit = Infinity;\n  }\n\n  if (!fn) {\n    fn = this.captureString;\n  }\n\n  var limitBefore = Error.stackTraceLimit;\n\n  if (limit) {\n    Error.stackTraceLimit = limit;\n  }\n\n  var obj = {};\n  Error.captureStackTrace(obj, fn);\n  var stack = obj.stack;\n  Error.stackTraceLimit = limitBefore;\n  return this.clean(stack);\n};\n\nStackUtils.prototype.capture = function (limit, fn) {\n  if (typeof limit === 'function') {\n    fn = limit;\n    limit = Infinity;\n  }\n\n  if (!fn) {\n    fn = this.capture;\n  }\n\n  var prepBefore = Error.prepareStackTrace;\n  var limitBefore = Error.stackTraceLimit;\n  var wrapCallSite = this._wrapCallSite;\n\n  Error.prepareStackTrace = function (obj, site) {\n    if (wrapCallSite) {\n      return site.map(wrapCallSite);\n    }\n\n    return site;\n  };\n\n  if (limit) {\n    Error.stackTraceLimit = limit;\n  }\n\n  var obj = {};\n  Error.captureStackTrace(obj, fn);\n  var stack = obj.stack;\n  Error.prepareStackTrace = prepBefore;\n  Error.stackTraceLimit = limitBefore;\n  return stack;\n};\n\nStackUtils.prototype.at = function at(fn) {\n  if (!fn) {\n    fn = at;\n  }\n\n  var site = this.capture(1, fn)[0];\n\n  if (!site) {\n    return {};\n  }\n\n  var res = {\n    line: site.getLineNumber(),\n    column: site.getColumnNumber()\n  };\n\n  this._setFile(res, site.getFileName());\n\n  if (site.isConstructor()) {\n    res.constructor = true;\n  }\n\n  if (site.isEval()) {\n    res.evalOrigin = site.getEvalOrigin();\n  } // Node v10 stopped with the isNative() on callsites, apparently\n\n  /* istanbul ignore next */\n\n\n  if (site.isNative()) {\n    res.native = true;\n  }\n\n  var typename = null;\n\n  try {\n    typename = site.getTypeName();\n  } catch (er) {}\n\n  if (typename && typename !== 'Object' && typename !== '[object Object]') {\n    res.type = typename;\n  }\n\n  var fname = site.getFunctionName();\n\n  if (fname) {\n    res.function = fname;\n  }\n\n  var meth = site.getMethodName();\n\n  if (meth && fname !== meth) {\n    res.method = meth;\n  }\n\n  return res;\n};\n\nStackUtils.prototype._setFile = function (result, filename) {\n  if (filename) {\n    filename = filename.replace(/\\\\/g, '/');\n\n    if (filename.indexOf(this._cwd + '/') === 0) {\n      filename = filename.substr(this._cwd.length + 1);\n    }\n\n    result.file = filename;\n  }\n};\n\nvar re = new RegExp('^' + // Sometimes we strip out the '    at' because it's noisy\n'(?:\\\\s*at )?' + // $1 = ctor if 'new'\n'(?:(new) )?' + // $2 = function name (can be literally anything)\n// May contain method at the end as [as xyz]\n'(?:(.*?) \\\\()?' + // (eval at <anonymous> (file.js:1:1),\n// $3 = eval origin\n// $4:$5:$6 are eval file/line/col, but not normally reported\n'(?:eval at ([^ ]+) \\\\((.+?):(\\\\d+):(\\\\d+)\\\\), )?' + // file:line:col\n// $7:$8:$9\n// $10 = 'native' if native\n'(?:(.+?):(\\\\d+):(\\\\d+)|(native))' + // maybe close the paren, then end\n// if $11 is ), then we only allow balanced parens in the filename\n// any imbalance is placed on the fname.  This is a heuristic, and\n// bound to be incorrect in some edge cases.  The bet is that\n// having weird characters in method names is more common than\n// having weird characters in filenames, which seems reasonable.\n'(\\\\)?)$');\nvar methodRe = /^(.*?) \\[as (.*?)\\]$/;\n\nStackUtils.prototype.parseLine = function parseLine(line) {\n  var match = line && line.match(re);\n\n  if (!match) {\n    return null;\n  }\n\n  var ctor = match[1] === 'new';\n  var fname = match[2];\n  var evalOrigin = match[3];\n  var evalFile = match[4];\n  var evalLine = Number(match[5]);\n  var evalCol = Number(match[6]);\n  var file = match[7];\n  var lnum = match[8];\n  var col = match[9];\n  var native = match[10] === 'native';\n  var closeParen = match[11] === ')';\n  var res = {};\n\n  if (lnum) {\n    res.line = Number(lnum);\n  }\n\n  if (col) {\n    res.column = Number(col);\n  }\n\n  if (closeParen && file) {\n    // make sure parens are balanced\n    // if we have a file like \"asdf) [as foo] (xyz.js\", then odds are\n    // that the fname should be += \" (asdf) [as foo]\" and the file\n    // should be just \"xyz.js\"\n    // walk backwards from the end to find the last unbalanced (\n    var closes = 0;\n\n    for (var i = file.length - 1; i > 0; i--) {\n      if (file.charAt(i) === ')') {\n        closes++;\n      } else if (file.charAt(i) === '(' && file.charAt(i - 1) === ' ') {\n        closes--;\n\n        if (closes === -1 && file.charAt(i - 1) === ' ') {\n          var before = file.substr(0, i - 1);\n          var after = file.substr(i + 1);\n          file = after;\n          fname += ' (' + before;\n          break;\n        }\n      }\n    }\n  }\n\n  if (fname) {\n    var methodMatch = fname.match(methodRe);\n\n    if (methodMatch) {\n      fname = methodMatch[1];\n      var meth = methodMatch[2];\n    }\n  }\n\n  this._setFile(res, file);\n\n  if (ctor) {\n    res.constructor = true;\n  }\n\n  if (evalOrigin) {\n    res.evalOrigin = evalOrigin;\n    res.evalLine = evalLine;\n    res.evalColumn = evalCol;\n    res.evalFile = evalFile && evalFile.replace(/\\\\/g, '/');\n  }\n\n  if (native) {\n    res.native = true;\n  }\n\n  if (fname) {\n    res.function = fname;\n  }\n\n  if (meth && fname !== meth) {\n    res.method = meth;\n  }\n\n  return res;\n};\n\nvar bound = new StackUtils();\nObject.keys(StackUtils.prototype).forEach(function (key) {\n  StackUtils[key] = bound[key].bind(bound);\n});","map":null,"metadata":{},"sourceType":"script"}