{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = setFromArgv;\n\nvar _utils = require('./utils');\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst specialArgs = ['_', '$0', 'h', 'help', 'config'];\n\nfunction setFromArgv(options, argv) {\n  const argvToOptions = Object.keys(argv).filter(key => argv[key] !== undefined && specialArgs.indexOf(key) === -1).reduce((options, key) => {\n    switch (key) {\n      case 'coverage':\n        options.collectCoverage = argv[key];\n        break;\n\n      case 'json':\n        options.useStderr = argv[key];\n        break;\n\n      case 'watchAll':\n        options.watch = false;\n        options.watchAll = argv[key];\n        break;\n\n      case 'env':\n        options.testEnvironment = argv[key];\n        break;\n\n      case 'config':\n        break;\n\n      case 'coverageThreshold':\n      case 'globals':\n      case 'moduleNameMapper':\n      case 'transform':\n      case 'haste':\n        const str = argv[key];\n\n        if ((0, _utils.isJSONString)(str)) {\n          options[key] = JSON.parse(str);\n        }\n\n        break;\n\n      default:\n        options[key] = argv[key];\n    }\n\n    return options;\n  }, {});\n  return _objectSpread({}, options, (0, _utils.isJSONString)(argv.config) ? JSON.parse(argv.config) : null, argvToOptions);\n}","map":null,"metadata":{},"sourceType":"script"}