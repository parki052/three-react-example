{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\n\nclass App extends Component {\n  componentDidMount() {\n    window.addEventListener('resize', onWindowResize, false);\n\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"white\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    let animate = function () {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","App","componentDidMount","window","addEventListener","onWindowResize","camera","aspect","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","scene","Scene","PerspectiveCamera","WebGLRenderer","mount","appendChild","domElement","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","animate","requestAnimationFrame","render","ref","rootElement","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC3BI,EAAAA,iBAAiB,GAAE;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAyB,QAAzB,EAAmCC,cAAnC,EAAmD,KAAnD;;AAEA,UAAMA,cAAc,GAAG,MAAM;AAC5BC,MAAAA,MAAM,CAACC,MAAP,GAAgBJ,MAAM,CAACK,UAAP,GAAoBL,MAAM,CAACM,WAA3C;AACAH,MAAAA,MAAM,CAACI,sBAAP;AAEAC,MAAAA,QAAQ,CAACC,OAAT,CAAkBT,MAAM,CAACK,UAAzB,EAAqCL,MAAM,CAACM,WAA5C;AAEA,KAND;;AAOA,QAAII,KAAK,GAAG,IAAIb,KAAK,CAACc,KAAV,EAAZ;AACA,QAAIR,MAAM,GAAG,IAAIN,KAAK,CAACe,iBAAV,CAA4B,EAA5B,EAAgCZ,MAAM,CAACK,UAAP,GAAkBL,MAAM,CAACM,WAAzD,EAAsE,GAAtE,EAA2E,IAA3E,CAAb;AACA,QAAIE,QAAQ,GAAG,IAAIX,KAAK,CAACgB,aAAV,EAAf;AAEAL,IAAAA,QAAQ,CAACC,OAAT,CAAkBT,MAAM,CAACK,UAAzB,EAAqCL,MAAM,CAACM,WAA5C;AACA,SAAKQ,KAAL,CAAWC,WAAX,CAAwBP,QAAQ,CAACQ,UAAjC;AAEA,QAAIC,aAAa,GAAG,IAAIpB,KAAK,CAACqB,WAAV,CAAuB,EAAvB,EAA2B,CAA3B,EAA8B,EAA9B,CAApB;AACA,QAAIC,aAAa,GAAG,IAAItB,KAAK,CAACuB,oBAAV,EAApB;AACA,QAAIC,KAAK,GAAG,IAAIxB,KAAK,CAACyB,IAAV,CAAeL,aAAf,EAA8BE,aAA9B,CAAZ;AAEA,QAAII,cAAc,GAAG,IAAI1B,KAAK,CAAC2B,cAAV,CAAyB,CAAzB,EAA4B,EAA5B,EAAgC,CAAhC,EAAmC,CAAnC,CAArB;AACA,QAAIC,cAAc,GAAG,IAAI5B,KAAK,CAACuB,oBAAV,EAArB;AACA,QAAIM,MAAM,GAAG,IAAI7B,KAAK,CAACyB,IAAV,CAAeC,cAAf,EAA+BE,cAA/B,CAAb;AAEA,QAAIE,KAAK,GAAG,IAAI9B,KAAK,CAAC+B,YAAV,CAAuB,OAAvB,CAAZ;AAEAlB,IAAAA,KAAK,CAACmB,GAAN,CAAUF,KAAV;AACAjB,IAAAA,KAAK,CAACmB,GAAN,CAAUR,KAAV;AACAX,IAAAA,KAAK,CAACmB,GAAN,CAAUH,MAAV;AACAvB,IAAAA,MAAM,CAAC2B,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACA5B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBE,CAAhB,GAAoB,CAApB;;AAEA,QAAIC,OAAO,GAAG,YAAU;AACvBC,MAAAA,qBAAqB,CAACD,OAAD,CAArB;AAEAzB,MAAAA,QAAQ,CAAC2B,MAAT,CAAgBzB,KAAhB,EAAuBP,MAAvB;AACA,KAJD;;AAKA8B,IAAAA,OAAO;AACP;;AACDE,EAAAA,MAAM,GAAG;AACL,WACG;AAAK,MAAA,GAAG,EAAEC,GAAG,IAAK,KAAKtB,KAAL,GAAasB,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH;AAGF;;AA7CyB;;AA+C5B,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACA3C,QAAQ,CAACuC,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBE,WAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nclass App extends Component {\n\tcomponentDidMount(){\n\t\twindow.addEventListener( 'resize', onWindowResize, false);\n\n\t\tconst onWindowResize = () => {\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\trenderer.setSize( window.innerWidth, window.innerHeight);\n\n\t\t}\n\t\tlet scene = new Three.Scene();\n\t\tlet camera = new Three.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);\n\t\tlet renderer = new Three.WebGLRenderer();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight);\n\t\tthis.mount.appendChild( renderer.domElement)\n\n\t\tlet floorGeometry = new Three.BoxGeometry( 10, 1, 10);\n\t\tlet floorMaterial = new Three.MeshStandardMaterial();\n\t\tlet floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n\t\tlet circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n\t\tlet circleMaterial = new Three.MeshStandardMaterial();\n\t\tlet circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n\t\tlet light = new Three.AmbientLight(\"white\");\n\n\t\tscene.add(light);\n\t\tscene.add(floor);\n\t\tscene.add(circle);\n\t\tcamera.position.z = 5;\n\t\tcamera.position.y = 2;\n\n\t\tlet animate = function(){\n\t\t\trequestAnimationFrame(animate);\n\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\t\tanimate();\n\t}\n\trender() {\n    \treturn (\n      \t\t<div ref={ref => (this.mount = ref)}/>\n    \t);\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}