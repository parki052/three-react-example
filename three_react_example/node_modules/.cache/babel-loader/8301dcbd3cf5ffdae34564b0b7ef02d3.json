{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\n\nvar _isRegExpSupported = _interopRequireDefault(require('./isRegExpSupported'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Negative look behind is only supported in Node 9+\n\n\nconst NOT_A_DOT = (0, _isRegExpSupported.default)('(?<!\\\\.\\\\s*)') ? '(?<!\\\\.\\\\s*)' : '(?:^|[^.]\\\\s*)';\n\nconst CAPTURE_STRING_LITERAL = pos => \"([`'\\\"])([^'\\\"`]*?)(?:\\\\\".concat(pos, \")\");\n\nconst WORD_SEPARATOR = '\\\\b';\nconst LEFT_PARENTHESIS = '\\\\(';\nconst RIGHT_PARENTHESIS = '\\\\)';\nconst WHITESPACE = '\\\\s*';\nconst OPTIONAL_COMMA = '(:?,\\\\s*)?';\n\nfunction createRegExp(parts, flags) {\n  return new RegExp(parts.join(''), flags);\n}\n\nfunction alternatives(...parts) {\n  return \"(?:\".concat(parts.join('|'), \")\");\n}\n\nfunction functionCallStart(...names) {\n  return [NOT_A_DOT, WORD_SEPARATOR, alternatives(...names), WHITESPACE, LEFT_PARENTHESIS, WHITESPACE];\n}\n\nconst BLOCK_COMMENT_RE = /\\/\\*[^]*?\\*\\//g;\nconst LINE_COMMENT_RE = /\\/\\/.*/g;\nconst REQUIRE_OR_DYNAMIC_IMPORT_RE = createRegExp([...functionCallStart('require', 'import'), CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS], 'g');\nconst IMPORT_OR_EXPORT_RE = createRegExp(['\\\\b(?:import|export)\\\\s+(?!type(?:of)?\\\\s+)(?:[^\\'\"]+\\\\s+from\\\\s+)?', CAPTURE_STRING_LITERAL(1)], 'g');\nconst JEST_EXTENSIONS_RE = createRegExp([...functionCallStart('require\\\\s*\\\\.\\\\s*(?:requireActual|requireMock)', 'jest\\\\s*\\\\.\\\\s*(?:requireActual|requireMock|genMockFromModule)'), CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS], 'g');\n\nfunction extract(code) {\n  const dependencies = new Set();\n\n  const addDependency = (match, _, dep) => {\n    dependencies.add(dep);\n    return match;\n  };\n\n  code.replace(BLOCK_COMMENT_RE, '').replace(LINE_COMMENT_RE, '').replace(IMPORT_OR_EXPORT_RE, addDependency).replace(REQUIRE_OR_DYNAMIC_IMPORT_RE, addDependency).replace(JEST_EXTENSIONS_RE, addDependency);\n  return dependencies;\n}","map":null,"metadata":{},"sourceType":"script"}