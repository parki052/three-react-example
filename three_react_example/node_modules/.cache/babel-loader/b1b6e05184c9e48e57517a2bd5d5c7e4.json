{"ast":null,"code":"'use strict';\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function _exit() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function _throat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = _interopRequireDefault(require('jest-worker'));\n\n  _jestWorker = function _jestWorker() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nvar _testWorker = require('./testWorker');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst TEST_WORKER_PATH = require.resolve('./testWorker');\n/* eslint-disable-next-line no-redeclare */\n\n\nclass TestRunner {\n  constructor(globalConfig, context) {\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    this._globalConfig = globalConfig;\n    this._context = context || {};\n  }\n\n  runTests(tests, watcher, onStart, onResult, onFailure, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield options.serial ? _this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure) : _this._createParallelTestRun(tests, watcher, onStart, onResult, onFailure);\n    })();\n  }\n\n  _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      process.env.JEST_WORKER_ID = '1';\n      const mutex = (0, _throat().default)(1);\n      return tests.reduce((promise, test) => mutex(() => promise.then(\n      /*#__PURE__*/\n      _asyncToGenerator(function* () {\n        if (watcher.isInterrupted()) {\n          throw new CancelRun();\n        }\n\n        yield onStart(test);\n        return (0, _runTest.default)(test.path, _this2._globalConfig, test.context.config, test.context.resolver, _this2._context);\n      })).then(result => onResult(test, result)).catch(err => onFailure(test, err))), Promise.resolve());\n    })();\n  }\n\n  _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const resolvers = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          const test = _step.value;\n\n          if (!resolvers.has(test.context.config.name)) {\n            resolvers.set(test.context.config.name, {\n              config: test.context.config,\n              serializableModuleMap: test.context.moduleMap.toJSON()\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      const worker = new (_jestWorker().default)(TEST_WORKER_PATH, {\n        exposedMethods: ['worker'],\n        forkOptions: {\n          stdio: 'pipe'\n        },\n        maxRetries: 3,\n        numWorkers: _this3._globalConfig.maxWorkers,\n        setupArgs: [{\n          serializableResolvers: Array.from(resolvers.values())\n        }]\n      });\n      if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n      if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n      const mutex = (0, _throat().default)(_this3._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n      // the start time of individual tests.\n\n      const runTestInWorker = test => mutex(\n      /*#__PURE__*/\n      _asyncToGenerator(function* () {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n\n        yield onStart(test);\n        return worker.worker({\n          config: test.context.config,\n          context: _objectSpread({}, _this3._context, {\n            changedFiles: _this3._context.changedFiles && Array.from(_this3._context.changedFiles)\n          }),\n          globalConfig: _this3._globalConfig,\n          path: test.path\n        });\n      }));\n\n      const onError =\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(function* (err, test) {\n          yield onFailure(test, err);\n\n          if (err.type === 'ProcessTerminatedError') {\n            console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');\n            (0, _exit().default)(1);\n          }\n        });\n\n        return function onError(_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      const onInterrupt = new Promise((_, reject) => {\n        watcher.on('change', state => {\n          if (state.interrupted) {\n            reject(new CancelRun());\n          }\n        });\n      });\n      const runAllTests = Promise.all(tests.map(test => runTestInWorker(test).then(testResult => onResult(test, testResult)).catch(error => onError(error, test))));\n\n      const cleanup = () => worker.end();\n\n      return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n    })();\n  }\n\n}\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n\n}\n\nmodule.exports = TestRunner;","map":null,"metadata":{},"sourceType":"script"}