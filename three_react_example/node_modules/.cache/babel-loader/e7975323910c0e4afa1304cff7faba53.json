{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\three_react\\\\src\\\\index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\n\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.el.appendChild(renderer.domElement);\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n    let light = new Three.AmbientLight(\"blue\");\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    let animate = function () {\n      fitCanvasToDisplaySize(false, renderer, camera);\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.el = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\index.js"],"names":["React","Component","ReactDOM","Three","RGBA_ASTC_10x5_Format","App","componentDidMount","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","el","appendChild","domElement","floorGeometry","BoxGeometry","floorMaterial","MeshStandardMaterial","floor","Mesh","circleGeometry","CircleGeometry","circleMaterial","circle","light","AmbientLight","add","position","z","y","fitCanvasToDisplaySize","force","canvas","width","clientWidth","height","clientHeight","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","ref","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Three from \"three\";\nimport \"./index.css\";\nimport { RGBA_ASTC_10x5_Format } from \"three\";\nclass App extends Component {\n  componentDidMount() {\n    let scene = new Three.Scene();\n    let camera = new Three.PerspectiveCamera(75, 1, 1, 1000);\n    let renderer = new Three.WebGLRenderer();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.el.appendChild(renderer.domElement);\n\n    let floorGeometry = new Three.BoxGeometry(10, 1, 10);\n    let floorMaterial = new Three.MeshStandardMaterial();\n    let floor = new Three.Mesh(floorGeometry, floorMaterial);\n\n    let circleGeometry = new Three.CircleGeometry(1, 50, 1, 1);\n    let circleMaterial = new Three.MeshStandardMaterial();\n    let circle = new Three.Mesh(circleGeometry, circleMaterial);\n\n    let light = new Three.AmbientLight(\"blue\");\n\n    scene.add(light);\n    scene.add(floor);\n    scene.add(circle);\n    camera.position.z = 5;\n    camera.position.y = 2;\n\n    function fitCanvasToDisplaySize(force, renderer, camera) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      if (force || canvas.width !== width || canvas.height !== height) {\n        renderer.setSize(width, height, false);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n      }\n    }\n\n    let animate = function() {\n      fitCanvasToDisplaySize(false, renderer, camera);\n      requestAnimationFrame(animate);\n\n      renderer.render(scene, camera);\n    };\n\n    fitCanvasToDisplaySize(true, renderer, camera);\n    requestAnimationFrame(animate);\n  }\n  render() {\n    return <div ref={ref => (this.el = ref)}/>;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}