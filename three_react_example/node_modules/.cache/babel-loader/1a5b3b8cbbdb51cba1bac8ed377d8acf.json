{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.buildSnapshotResolver = exports.isSnapshotPath = exports.DOT_EXTENSION = exports.EXTENSION = void 0;\n\nvar _path = _interopRequireDefault(require('path'));\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst EXTENSION = 'snap';\nexports.EXTENSION = EXTENSION;\nconst DOT_EXTENSION = '.' + EXTENSION;\nexports.DOT_EXTENSION = DOT_EXTENSION;\n\nconst isSnapshotPath = path => path.endsWith(DOT_EXTENSION);\n\nexports.isSnapshotPath = isSnapshotPath;\nconst cache = new Map();\n\nconst buildSnapshotResolver = config => {\n  const key = config.rootDir;\n\n  if (!cache.has(key)) {\n    cache.set(key, createSnapshotResolver(config.snapshotResolver));\n  }\n\n  return cache.get(key);\n};\n\nexports.buildSnapshotResolver = buildSnapshotResolver;\n\nfunction createSnapshotResolver(snapshotResolverPath) {\n  return typeof snapshotResolverPath === 'string' ? createCustomSnapshotResolver(snapshotResolverPath) : createDefaultSnapshotResolver();\n}\n\nfunction createDefaultSnapshotResolver() {\n  return {\n    resolveSnapshotPath: testPath => _path.default.join(_path.default.join(_path.default.dirname(testPath), '__snapshots__'), _path.default.basename(testPath) + DOT_EXTENSION),\n    resolveTestPath: snapshotPath => _path.default.resolve(_path.default.dirname(snapshotPath), '..', _path.default.basename(snapshotPath, DOT_EXTENSION)),\n    testPathForConsistencyCheck: _path.default.posix.join('consistency_check', '__tests__', 'example.test.js')\n  };\n}\n\nfunction createCustomSnapshotResolver(snapshotResolverPath) {\n  const custom = require(snapshotResolverPath);\n\n  const keys = [['resolveSnapshotPath', 'function'], ['resolveTestPath', 'function'], ['testPathForConsistencyCheck', 'string']];\n  keys.forEach(([propName, requiredType]) => {\n    if (typeof custom[propName] !== requiredType) {\n      throw new TypeError(mustImplement(propName, requiredType));\n    }\n  });\n  const customResolver = {\n    resolveSnapshotPath: testPath => custom.resolveSnapshotPath(testPath, DOT_EXTENSION),\n    resolveTestPath: snapshotPath => custom.resolveTestPath(snapshotPath, DOT_EXTENSION),\n    testPathForConsistencyCheck: custom.testPathForConsistencyCheck\n  };\n  verifyConsistentTransformations(customResolver);\n  return customResolver;\n}\n\nfunction mustImplement(propName, requiredType) {\n  return _chalk.default.bold(\"Custom snapshot resolver must implement a `\".concat(propName, \"` as a \").concat(requiredType, \".\")) + '\\nDocumentation: https://facebook.github.io/jest/docs/en/configuration.html#snapshotResolver';\n}\n\nfunction verifyConsistentTransformations(custom) {\n  const resolvedSnapshotPath = custom.resolveSnapshotPath(custom.testPathForConsistencyCheck);\n  const resolvedTestPath = custom.resolveTestPath(resolvedSnapshotPath);\n\n  if (resolvedTestPath !== custom.testPathForConsistencyCheck) {\n    throw new Error(_chalk.default.bold(\"Custom snapshot resolver functions must transform paths consistently, i.e. expects resolveTestPath(resolveSnapshotPath('\".concat(custom.testPathForConsistencyCheck, \"')) === \").concat(resolvedTestPath)));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}