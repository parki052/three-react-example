{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _jestWatcher() {\n  const data = require('jest-watcher');\n\n  _jestWatcher = function _jestWatcher() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _TestPathPatternPrompt = _interopRequireDefault(require('../TestPathPatternPrompt'));\n\nvar _active_filters_message = _interopRequireDefault(require('../lib/active_filters_message'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass TestPathPatternPlugin extends _jestWatcher().BaseWatchPlugin {\n  constructor(options) {\n    super(options);\n\n    _defineProperty(this, '_prompt', void 0);\n\n    _defineProperty(this, 'isInternal', void 0);\n\n    this._prompt = new (_jestWatcher().Prompt)();\n    this.isInternal = true;\n  }\n\n  getUsageInfo() {\n    return {\n      key: 'p',\n      prompt: 'filter by a filename regex pattern'\n    };\n  }\n\n  onKey(key) {\n    this._prompt.put(key);\n  }\n\n  run(globalConfig, updateConfigAndRun) {\n    return new Promise((res, rej) => {\n      const testPathPatternPrompt = new _TestPathPatternPrompt.default(this._stdout, this._prompt);\n      testPathPatternPrompt.run(value => {\n        updateConfigAndRun({\n          mode: 'watch',\n          testPathPattern: value\n        });\n        res();\n      }, rej, {\n        header: (0, _active_filters_message.default)(globalConfig)\n      });\n    });\n  }\n\n}\n\nvar _default = TestPathPatternPlugin;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}