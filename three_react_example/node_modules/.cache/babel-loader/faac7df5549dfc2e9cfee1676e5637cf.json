{"ast":null,"code":"import * as Three from \"three\";\nexport const buildScene = () => {};\nexport const fitCanvasToDisplaySize = (force, renderer, camera) => {\n  if (!renderer) return;\n  const canvas = renderer.domElement;\n  const width = canvas.clientWidth;\n  const height = canvas.clientHeight;\n\n  if (force || canvas.width !== width || canvas.height !== height) {\n    renderer.setSize(width, height, false);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n};\nexport const animate = (scene, renderer, camera) => {\n  if (!renderer) return;\n  fitCanvasToDisplaySize(false, renderer, camera);\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n};\nexport const run = () => {\n  animate(scene, renderer, camera);\n  fitCanvasToDisplaySize(true, renderer, camera);\n  requestAnimationFrame(animate);\n};","map":{"version":3,"sources":["C:\\Repos\\three_react\\src\\App\\initialization.js"],"names":["Three","buildScene","fitCanvasToDisplaySize","force","renderer","camera","canvas","domElement","width","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","animate","scene","render","requestAnimationFrame","run"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,CAE/B,CAFM;AAIP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,KAA6B;AAC/D,MAAG,CAACD,QAAJ,EAAc;AACd,QAAME,MAAM,GAAGF,QAAQ,CAACG,UAAxB;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,WAArB;AACA,QAAMC,MAAM,GAAGJ,MAAM,CAACK,YAAtB;;AAEA,MAAIR,KAAK,IAAIG,MAAM,CAACE,KAAP,KAAiBA,KAA1B,IAAmCF,MAAM,CAACI,MAAP,KAAkBA,MAAzD,EAAiE;AAC/DN,IAAAA,QAAQ,CAACQ,OAAT,CAAiBJ,KAAjB,EAAwBE,MAAxB,EAAgC,KAAhC;AACAL,IAAAA,MAAM,CAACQ,MAAP,GAAgBL,KAAK,GAAGE,MAAxB;AACAL,IAAAA,MAAM,CAACS,sBAAP;AACD;AACJ,CAXM;AAaP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQZ,QAAR,EAAkBC,MAAlB,KAA6B;AAChD,MAAG,CAACD,QAAJ,EAAc;AACdF,EAAAA,sBAAsB,CAAC,KAAD,EAAQE,QAAR,EAAkBC,MAAlB,CAAtB;AAEAD,EAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB,EAAuBX,MAAvB;AACAa,EAAAA,qBAAqB,CAACH,OAAD,CAArB;AACH,CANM;AAQP,OAAO,MAAMI,GAAG,GAAG,MAAM;AACrBJ,EAAAA,OAAO,CAACC,KAAD,EAAQZ,QAAR,EAAkBC,MAAlB,CAAP;AACAH,EAAAA,sBAAsB,CAAC,IAAD,EAAOE,QAAP,EAAiBC,MAAjB,CAAtB;AACAa,EAAAA,qBAAqB,CAACH,OAAD,CAArB;AACH,CAJM","sourcesContent":["import * as Three from \"three\";\r\n\r\nexport const buildScene = () => {\r\n\r\n}\r\n\r\nexport const fitCanvasToDisplaySize = (force, renderer, camera) => {\r\n    if(!renderer) return;\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n\r\n    if (force || canvas.width !== width || canvas.height !== height) {\r\n      renderer.setSize(width, height, false);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n    }   \r\n}\r\n\r\nexport const animate = (scene, renderer, camera) => {\r\n    if(!renderer) return;\r\n    fitCanvasToDisplaySize(false, renderer, camera);\r\n\r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nexport const run = () => {\r\n    animate(scene, renderer, camera);\r\n    fitCanvasToDisplaySize(true, renderer, camera);\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}