{"ast":null,"code":"var parse = require('spdx-expression-parse');\n\nvar correct = require('spdx-correct');\n\nvar genericWarning = 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"';\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return startsWith('LicenseRef', license) || startsWith('DocumentRef', license);\n  } else {\n    return usesLicenseRef(ast.left) || usesLicenseRef(ast.right);\n  }\n}\n\nmodule.exports = function (argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match;\n\n    if (argument === 'UNLICENSED' || argument === 'UNLICENCED') {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n\n      if (argument.trim().length !== 0) {\n        var corrected = correct(argument);\n\n        if (corrected) {\n          result.warnings.push('license is similar to the valid expression \"' + corrected + '\"');\n        }\n      }\n\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}