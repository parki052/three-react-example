{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = nodeModulesPaths;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _realpathNative() {\n  const data = require('realpath-native');\n\n  _realpathNative = function _realpathNative() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Adapted from: https://github.com/substack/node-resolve\n */\n\n\nfunction nodeModulesPaths(basedir, options) {\n  const modules = options && options.moduleDirectory ? Array.from(options.moduleDirectory) : ['node_modules']; // ensure that `basedir` is an absolute path at this point,\n  // resolving against the process' current working directory\n\n  const basedirAbs = _path().default.resolve(basedir);\n\n  let prefix = '/';\n\n  if (/^([A-Za-z]:)/.test(basedirAbs)) {\n    prefix = '';\n  } else if (/^\\\\\\\\/.test(basedirAbs)) {\n    prefix = '\\\\\\\\';\n  } // The node resolution algorithm (as implemented by NodeJS and TypeScript)\n  // traverses parents of the physical path, not the symlinked path\n\n\n  let physicalBasedir;\n\n  try {\n    physicalBasedir = (0, _realpathNative().sync)(basedirAbs);\n  } catch (err) {\n    // realpath can throw, e.g. on mapped drives\n    physicalBasedir = basedirAbs;\n  }\n\n  const paths = [physicalBasedir];\n\n  let parsed = _path().default.parse(physicalBasedir);\n\n  while (parsed.dir !== paths[paths.length - 1]) {\n    paths.push(parsed.dir);\n    parsed = _path().default.parse(parsed.dir);\n  }\n\n  const dirs = paths.reduce((dirs, aPath) => dirs.concat(modules.map(moduleDir => _path().default.isAbsolute(moduleDir) ? aPath === basedirAbs ? moduleDir : '' : _path().default.join(prefix, aPath, moduleDir))), []).filter(dir => dir !== '');\n  return options.paths ? dirs.concat(options.paths) : dirs;\n}","map":null,"metadata":{},"sourceType":"script"}