{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _util() {\n  const data = _interopRequireDefault(require('util'));\n\n  _util = function _util() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require('pretty-format'));\n\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError('Invalid attempt to destructure non-iterable instance');\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i['return'] != null) _i['return']();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nconst SUPPORTED_PLACEHOLDERS = /%[sdifjoOp%]/g;\nconst PRETTY_PLACEHOLDER = '%p';\nconst INDEX_PLACEHOLDER = '%#';\nconst PLACEHOLDER_PREFIX = '%';\nconst JEST_EACH_PLACEHOLDER_ESCAPE = '@@__JEST_EACH_PLACEHOLDER_ESCAPE__@@';\n\nvar _default = (title, arrayTable) => normaliseTable(arrayTable).map((row, index) => ({\n  arguments: row,\n  title: formatTitle(title, row, index)\n}));\n\nexports.default = _default;\n\nconst normaliseTable = table => isTable(table) ? table : table.map(colToRow);\n\nconst isTable = table => table.every(Array.isArray);\n\nconst colToRow = col => [col];\n\nconst formatTitle = (title, row, rowIndex) => row.reduce((formattedTitle, value) => {\n  const _getMatchingPlacehold = getMatchingPlaceholders(formattedTitle),\n        _getMatchingPlacehold2 = _slicedToArray(_getMatchingPlacehold, 1),\n        placeholder = _getMatchingPlacehold2[0];\n\n  const normalisedValue = normalisePlaceholderValue(value);\n  if (!placeholder) return formattedTitle;\n  if (placeholder === PRETTY_PLACEHOLDER) return interpolatePrettyPlaceholder(formattedTitle, normalisedValue);\n  return _util().default.format(formattedTitle, normalisedValue);\n}, interpolateTitleIndex(title, rowIndex)).replace(new RegExp(JEST_EACH_PLACEHOLDER_ESCAPE, 'g'), PLACEHOLDER_PREFIX);\n\nconst normalisePlaceholderValue = value => typeof value === 'string' && SUPPORTED_PLACEHOLDERS.test(value) ? value.replace(PLACEHOLDER_PREFIX, JEST_EACH_PLACEHOLDER_ESCAPE) : value;\n\nconst getMatchingPlaceholders = title => title.match(SUPPORTED_PLACEHOLDERS) || [];\n\nconst interpolateTitleIndex = (title, index) => title.replace(INDEX_PLACEHOLDER, index.toString());\n\nconst interpolatePrettyPlaceholder = (title, value) => title.replace(PRETTY_PLACEHOLDER, (0, _prettyFormat().default)(value, {\n  maxDepth: 1,\n  min: true\n}));","map":null,"metadata":{},"sourceType":"script"}