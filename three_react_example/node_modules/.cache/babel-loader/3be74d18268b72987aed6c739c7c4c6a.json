{"ast":null,"code":"/**\n * Wrapper for the notifu 1.6 (http://www.paralint.com/projects/notifu/)\n\nUsage\n/t <value>      The type of message to display values are:\n                    info      The message is an informational message\n                    warn      The message is an warning message\n                    error     The message is an error message\n/d <value>      The number of milliseconds to display (omit or 0 for infinit)\n/p <value>      The title (or prompt) of the ballon\n/m <value>      The message text\n/i <value>      Specify an icon to use (\"parent\" uses the icon of the parent process)\n/e              Enable ballon tips in the registry (for this user only)\n/q              Do not play a sound when the tooltip is displayed\n/w              Show the tooltip even if the user is in the quiet period that follows his very first login (Windows 7 and up)\n/xp             Use IUserNotification interface event when IUserNotification2 is available\n\n// Kill codes:\n  2 = Timeout\n  3 = Clicked\n  4 = Closed or faded out\n\n */\nvar path = require('path');\n\nvar notifier = path.resolve(__dirname, '../vendor/notifu/notifu');\n\nvar checkGrowl = require('../lib/checkGrowl');\n\nvar utils = require('../lib/utils');\n\nvar Toaster = require('./toaster');\n\nvar Growl = require('./growl');\n\nvar os = require('os');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar hasGrowl = void 0;\nmodule.exports = WindowsBalloon;\n\nfunction WindowsBalloon(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof WindowsBalloon)) {\n    return new WindowsBalloon(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(WindowsBalloon, EventEmitter);\n\nfunction noop() {}\n\nWindowsBalloon.prototype.notify = function (options, callback) {\n  var fallback;\n  var notifierOptions = this.options;\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(this, options, callback, function (data) {\n    if (data === 'activate') {\n      return 'click';\n    }\n\n    if (data === 'timeout') {\n      return 'timeout';\n    }\n\n    return false;\n  });\n\n  if (!!this.options.withFallback && utils.isWin8()) {\n    fallback = fallback || new Toaster(notifierOptions);\n    return fallback.notify(options, callback);\n  }\n\n  if (!!this.options.withFallback && (!utils.isLessThanWin8() || hasGrowl === true)) {\n    fallback = fallback || new Growl(notifierOptions);\n    return fallback.notify(options, callback);\n  }\n\n  if (!this.options.withFallback || hasGrowl === false) {\n    doNotification(options, notifierOptions, actionJackedCallback);\n    return this;\n  }\n\n  checkGrowl(notifierOptions, function (_, hasGrowlResult) {\n    hasGrowl = hasGrowlResult;\n\n    if (hasGrowl) {\n      fallback = fallback || new Growl(notifierOptions);\n      return fallback.notify(options, callback);\n    }\n\n    doNotification(options, notifierOptions, actionJackedCallback);\n  });\n  return this;\n};\n\nvar allowedArguments = ['t', 'd', 'p', 'm', 'i', 'e', 'q', 'w', 'xp'];\n\nfunction doNotification(options, notifierOptions, callback) {\n  var is64Bit = os.arch() === 'x64';\n  options = options || {};\n  options = utils.mapToNotifu(options);\n  options.p = options.p || 'Node Notification:';\n  var fullNotifierPath = notifier + (is64Bit ? '64' : '') + '.exe';\n  var localNotifier = notifierOptions.customPath || fullNotifierPath;\n\n  if (!options.m) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  var argsList = utils.constructArgumentList(options, {\n    wrapper: '',\n    noEscape: true,\n    explicitTrue: true,\n    allowedArguments: allowedArguments\n  });\n\n  if (options.wait) {\n    return utils.fileCommand(localNotifier, argsList, function (error, data) {\n      var action = fromErrorCodeToAction(error.code);\n      if (action === 'error') return callback(error, data);\n      return callback(null, action);\n    });\n  }\n\n  utils.immediateFileCommand(localNotifier, argsList, callback);\n}\n\nfunction fromErrorCodeToAction(errorCode) {\n  switch (errorCode) {\n    case 2:\n      return 'timeout';\n\n    case 3:\n    case 6:\n    case 7:\n      return 'activate';\n\n    case 4:\n      return 'close';\n\n    default:\n      return 'error';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}