{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function _jestUtil() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError('Invalid attempt to destructure non-iterable instance');\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') return Array.from(iter);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nconst ARROW = ' \\u203A ';\nconst DOWN_ARROW = ' \\u21B3 ';\nconst DOT = ' \\u2022 ';\n\nconst FAIL_COLOR = _chalk().default.bold.red;\n\nconst OBSOLETE_COLOR = _chalk().default.bold.yellow;\n\nconst SNAPSHOT_ADDED = _chalk().default.bold.green;\n\nconst SNAPSHOT_NOTE = _chalk().default.dim;\n\nconst SNAPSHOT_REMOVED = _chalk().default.bold.green;\n\nconst SNAPSHOT_SUMMARY = _chalk().default.bold;\n\nconst SNAPSHOT_UPDATED = _chalk().default.bold.green;\n\nvar _default = (snapshots, globalConfig, updateCommand) => {\n  const summary = [];\n  summary.push(SNAPSHOT_SUMMARY('Snapshot Summary'));\n\n  if (snapshots.added) {\n    summary.push(SNAPSHOT_ADDED(ARROW + (0, _jestUtil().pluralize)('snapshot', snapshots.added) + ' written ') + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesAdded), \".\"));\n  }\n\n  if (snapshots.unmatched) {\n    summary.push(FAIL_COLOR(\"\".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unmatched), \" failed\")) + \" from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesUnmatched), \". \") + SNAPSHOT_NOTE('Inspect your code changes or ' + updateCommand + ' to update them.'));\n  }\n\n  if (snapshots.updated) {\n    summary.push(SNAPSHOT_UPDATED(ARROW + (0, _jestUtil().pluralize)('snapshot', snapshots.updated) + ' updated ') + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesUpdated), \".\"));\n  }\n\n  if (snapshots.filesRemoved) {\n    if (snapshots.didUpdate) {\n      summary.push(SNAPSHOT_REMOVED(\"\".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot file', snapshots.filesRemoved), \" removed \")) + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesRemoved), \".\"));\n    } else {\n      summary.push(OBSOLETE_COLOR(\"\".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot file', snapshots.filesRemoved), \" obsolete \")) + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesRemoved), \". \") + SNAPSHOT_NOTE(\"To remove \".concat(snapshots.filesRemoved === 1 ? 'it' : 'them all', \", \").concat(updateCommand, \".\")));\n    }\n  }\n\n  if (snapshots.filesRemovedList && snapshots.filesRemovedList.length) {\n    const _snapshots$filesRemov = _toArray(snapshots.filesRemovedList),\n          head = _snapshots$filesRemov[0],\n          tail = _snapshots$filesRemov.slice(1);\n\n    summary.push(\"  \".concat(DOWN_ARROW, \" \").concat(DOT).concat((0, _utils.formatTestPath)(globalConfig, head)));\n    tail.forEach(key => {\n      summary.push(\"      \".concat(DOT).concat((0, _utils.formatTestPath)(globalConfig, key)));\n    });\n  }\n\n  if (snapshots.unchecked) {\n    if (snapshots.didUpdate) {\n      summary.push(SNAPSHOT_REMOVED(\"\".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unchecked), \" removed \")) + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.uncheckedKeysByFile.length), \".\"));\n    } else {\n      summary.push(OBSOLETE_COLOR(\"\".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unchecked), \" obsolete \")) + \"from \".concat((0, _jestUtil().pluralize)('test suite', snapshots.uncheckedKeysByFile.length), \". \") + SNAPSHOT_NOTE(\"To remove \".concat(snapshots.unchecked === 1 ? 'it' : 'them all', \", \").concat(updateCommand, \".\")));\n    }\n\n    snapshots.uncheckedKeysByFile.forEach(uncheckedFile => {\n      summary.push(\"  \".concat(DOWN_ARROW).concat((0, _utils.formatTestPath)(globalConfig, uncheckedFile.filePath)));\n      uncheckedFile.keys.forEach(key => {\n        summary.push(\"      \".concat(DOT).concat(key));\n      });\n    });\n  }\n\n  return summary;\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}