{"ast":null,"code":"var shellwords = require('shellwords');\n\nvar cp = require('child_process');\n\nvar semver = require('semver');\n\nvar isWSL = require('is-wsl');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar os = require('os');\n\nvar fs = require('fs');\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nmodule.exports.clone = clone;\n\nvar escapeQuotes = function (str) {\n  if (typeof str === 'string') {\n    return str.replace(/([\"$`\\\\])/g, '\\\\$1');\n  } else {\n    return str;\n  }\n};\n\nvar inArray = function (arr, val) {\n  return arr.indexOf(val) !== -1;\n};\n\nvar notifySendFlags = {\n  u: 'urgency',\n  urgency: 'urgency',\n  t: 'expire-time',\n  time: 'expire-time',\n  timeout: 'expire-time',\n  e: 'expire-time',\n  expire: 'expire-time',\n  'expire-time': 'expire-time',\n  i: 'icon',\n  icon: 'icon',\n  c: 'category',\n  category: 'category',\n  subtitle: 'category',\n  h: 'hint',\n  hint: 'hint'\n};\n\nmodule.exports.command = function (notifier, options, cb) {\n  notifier = shellwords.escape(notifier);\n\n  if (process.env.DEBUG && process.env.DEBUG.indexOf('notifier') !== -1) {\n    console.info('node-notifier debug info (command):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n\n  return cp.exec(notifier + ' ' + options.join(' '), function (error, stdout, stderr) {\n    if (error) return cb(error);\n    cb(stderr, stdout);\n  });\n};\n\nmodule.exports.fileCommand = function (notifier, options, cb) {\n  if (process.env.DEBUG && process.env.DEBUG.indexOf('notifier') !== -1) {\n    console.info('node-notifier debug info (fileCommand):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n\n  return cp.execFile(notifier, options, function (error, stdout, stderr) {\n    if (error) return cb(error, stdout);\n    cb(stderr, stdout);\n  });\n};\n\nmodule.exports.fileCommandJson = function (notifier, options, cb) {\n  if (process.env.DEBUG && process.env.DEBUG.indexOf('notifier') !== -1) {\n    console.info('node-notifier debug info (fileCommandJson):');\n    console.info('[notifier path]', notifier);\n    console.info('[notifier options]', options.join(' '));\n  }\n\n  return cp.execFile(notifier, options, function (error, stdout, stderr) {\n    if (error) return cb(error, stdout);\n    if (!stdout) return cb(error, {});\n\n    try {\n      var data = JSON.parse(stdout);\n      cb(stderr, data);\n    } catch (e) {\n      cb(e, stdout);\n    }\n  });\n};\n\nmodule.exports.immediateFileCommand = function (notifier, options, cb) {\n  if (process.env.DEBUG && process.env.DEBUG.indexOf('notifier') !== -1) {\n    console.info('node-notifier debug info (notifier):');\n    console.info('[notifier path]', notifier);\n  }\n\n  notifierExists(notifier, function (_, exists) {\n    if (!exists) {\n      return cb(new Error('Notifier (' + notifier + ') not found on system.'));\n    }\n\n    cp.execFile(notifier, options);\n    cb();\n  });\n};\n\nfunction notifierExists(notifier, cb) {\n  return fs.stat(notifier, function (err, stat) {\n    if (!err) return cb(err, stat.isFile()); // Check if Windows alias\n\n    if (path.extname(notifier)) {\n      // Has extentioon, no need to check more\n      return cb(err, false);\n    } // Check if there is an exe file in the directory\n\n\n    return fs.stat(notifier + '.exe', function (err, stat) {\n      if (err) return cb(err, false);\n      cb(err, stat.isFile());\n    });\n  });\n}\n\nvar mapAppIcon = function (options) {\n  if (options.appIcon) {\n    options.icon = options.appIcon;\n    delete options.appIcon;\n  }\n\n  return options;\n};\n\nvar mapText = function (options) {\n  if (options.text) {\n    options.message = options.text;\n    delete options.text;\n  }\n\n  return options;\n};\n\nvar mapIconShorthand = function (options) {\n  if (options.i) {\n    options.icon = options.i;\n    delete options.i;\n  }\n\n  return options;\n};\n\nmodule.exports.mapToNotifySend = function (options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  for (var key in options) {\n    if (key === 'message' || key === 'title') continue;\n\n    if (options.hasOwnProperty(key) && notifySendFlags[key] !== key) {\n      options[notifySendFlags[key]] = options[key];\n      delete options[key];\n    }\n  }\n\n  return options;\n};\n\nmodule.exports.mapToGrowl = function (options) {\n  options = mapAppIcon(options);\n  options = mapIconShorthand(options);\n  options = mapText(options);\n\n  if (options.icon && !Buffer.isBuffer(options.icon)) {\n    try {\n      options.icon = fs.readFileSync(options.icon);\n    } catch (ex) {}\n  }\n\n  return options;\n};\n\nmodule.exports.mapToMac = function (options) {\n  options = mapIconShorthand(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    options.appIcon = options.icon;\n    delete options.icon;\n  }\n\n  if (options.sound === true) {\n    options.sound = 'Bottle';\n  }\n\n  if (options.sound === false) {\n    delete options.sound;\n  }\n\n  if (options.sound && options.sound.indexOf('Notification.') === 0) {\n    options.sound = 'Bottle';\n  }\n\n  if (options.wait === true) {\n    if (!options.timeout) {\n      options.timeout = 5;\n    }\n\n    delete options.wait;\n  }\n\n  options.json = true;\n  return options;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}\n\nfunction noop() {}\n\nmodule.exports.actionJackerDecorator = function (emitter, options, fn, mapper) {\n  options = clone(options);\n  fn = fn || noop;\n\n  if (typeof fn !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof fn);\n  }\n\n  return function (err, data) {\n    var resultantData = data;\n    var metadata = {}; // Allow for extra data if resultantData is an object\n\n    if (resultantData && typeof resultantData === 'object') {\n      metadata = resultantData;\n      resultantData = resultantData.activationType;\n    } // Sanitize the data\n\n\n    if (resultantData) {\n      resultantData = resultantData.toLowerCase().trim();\n\n      if (resultantData.match(/^activate|clicked$/)) {\n        resultantData = 'activate';\n      }\n    }\n\n    fn.apply(emitter, [err, resultantData, metadata]);\n    if (!mapper || !resultantData) return;\n    var key = mapper(resultantData);\n    if (!key) return;\n    emitter.emit(key, emitter, options, metadata);\n  };\n};\n\nmodule.exports.constructArgumentList = function (options, extra) {\n  var args = [];\n  extra = extra || {}; // Massive ugly setup. Default args\n\n  var initial = extra.initial || [];\n  var keyExtra = extra.keyExtra || '';\n  var allowedArguments = extra.allowedArguments || [];\n  var noEscape = extra.noEscape !== void 0;\n  var checkForAllowed = extra.allowedArguments !== void 0;\n  var explicitTrue = !!extra.explicitTrue;\n  var keepNewlines = !!extra.keepNewlines;\n  var wrapper = extra.wrapper === void 0 ? '\"' : extra.wrapper;\n\n  var escapeFn = function (arg) {\n    if (isArray(arg)) {\n      return removeNewLines(arg.join(','));\n    }\n\n    if (!noEscape) {\n      arg = escapeQuotes(arg);\n    }\n\n    if (typeof arg === 'string' && !keepNewlines) {\n      arg = removeNewLines(arg);\n    }\n\n    return wrapper + arg + wrapper;\n  };\n\n  initial.forEach(function (val) {\n    args.push(escapeFn(val));\n  });\n\n  for (var key in options) {\n    if (options.hasOwnProperty(key) && (!checkForAllowed || inArray(allowedArguments, key))) {\n      if (explicitTrue && options[key] === true) {\n        args.push('-' + keyExtra + key);\n      } else if (explicitTrue && options[key] === false) continue;else args.push('-' + keyExtra + key, escapeFn(options[key]));\n    }\n  }\n\n  return args;\n};\n\nfunction removeNewLines(str) {\n  var excapedNewline = process.platform === 'win32' ? '\\\\r\\\\n' : '\\\\n';\n  return str.replace(/\\r?\\n/g, excapedNewline);\n}\n/*\n---- Options ----\n[-t] <title string>     | Displayed on the first line of the toast.\n[-m] <message string>   | Displayed on the remaining lines, wrapped.\n[-p] <image URI>        | Display toast with an image, local files only.\n[-w]                    | Wait for toast to expire or activate.\n[-id] <id>              | sets the id for a notification to be able to close it later.\n[-s] <sound URI>        | Sets the sound of the notifications, for possible values see http://msdn.microsoft.com/en-us/library/windows/apps/hh761492.aspx.\n[-silent]               | Don't play a sound file when showing the notifications.\n[-appID] <App.ID>       | Don't create a shortcut but use the provided app id.\n-close <id>             | Closes a currently displayed notification, in order to be able to close a notification the parameter -w must be used to create the notification.\n*/\n\n\nvar allowedToasterFlags = ['t', 'm', 'p', 'w', 'id', 's', 'silent', 'appID', 'close', 'install'];\nvar toasterSoundPrefix = 'Notification.';\nvar toasterDefaultSound = 'Notification.Default';\n\nmodule.exports.mapToWin8 = function (options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    if (/^file:\\/+/.test(options.icon)) {\n      // should parse file protocol URL to path\n      options.p = new url.URL(options.icon).pathname.replace(/^\\/(\\w:\\/)/, '$1').replace(/\\//g, '\\\\');\n    } else {\n      options.p = options.icon;\n    }\n\n    delete options.icon;\n  }\n\n  if (options.message) {\n    // Remove escape char to debug \"HRESULT : 0xC00CE508\" exception\n    options.m = options.message.replace(/\\x1b/g, '');\n    delete options.message;\n  }\n\n  if (options.title) {\n    options.t = options.title;\n    delete options.title;\n  }\n\n  if (options.appName) {\n    options.appID = options.appName;\n    delete options.appName;\n  }\n\n  if (typeof options.remove !== 'undefined') {\n    options.close = options.remove;\n    delete options.remove;\n  }\n\n  if (options.quiet || options.silent) {\n    options.silent = options.quiet || options.silent;\n    delete options.quiet;\n  }\n\n  if (typeof options.sound !== 'undefined') {\n    options.s = options.sound;\n    delete options.sound;\n  }\n\n  if (options.s === false) {\n    options.silent = true;\n    delete options.s;\n  } // Silent takes precedence. Remove sound.\n\n\n  if (options.s && options.silent) {\n    delete options.s;\n  }\n\n  if (options.s === true) {\n    options.s = toasterDefaultSound;\n  }\n\n  if (options.s && options.s.indexOf(toasterSoundPrefix) !== 0) {\n    options.s = toasterDefaultSound;\n  }\n\n  if (options.wait) {\n    options.w = options.wait;\n    delete options.wait;\n  }\n\n  for (var key in options) {\n    // Check if is allowed. If not, delete!\n    if (options.hasOwnProperty(key) && allowedToasterFlags.indexOf(key) === -1) {\n      delete options[key];\n    }\n  }\n\n  return options;\n};\n\nmodule.exports.mapToNotifu = function (options) {\n  options = mapAppIcon(options);\n  options = mapText(options);\n\n  if (options.icon) {\n    options.i = options.icon;\n    delete options.icon;\n  }\n\n  if (options.message) {\n    options.m = options.message;\n    delete options.message;\n  }\n\n  if (options.title) {\n    options.p = options.title;\n    delete options.title;\n  }\n\n  if (options.time) {\n    options.d = options.time;\n    delete options.time;\n  }\n\n  if (options.q !== false) {\n    options.q = true;\n  } else {\n    delete options.q;\n  }\n\n  if (options.quiet === false) {\n    delete options.q;\n    delete options.quiet;\n  }\n\n  if (options.sound) {\n    delete options.q;\n    delete options.sound;\n  }\n\n  if (options.t) {\n    options.d = options.t;\n    delete options.t;\n  }\n\n  if (options.type) {\n    options.t = sanitizeNotifuTypeArgument(options.type);\n    delete options.type;\n  }\n\n  return options;\n};\n\nmodule.exports.isMac = function () {\n  return os.type() === 'Darwin';\n};\n\nmodule.exports.isMountainLion = function () {\n  return os.type() === 'Darwin' && semver.satisfies(garanteeSemverFormat(os.release()), '>=12.0.0');\n};\n\nmodule.exports.isWin8 = function () {\n  return os.type() === 'Windows_NT' && semver.satisfies(garanteeSemverFormat(os.release()), '>=6.2.9200');\n};\n\nmodule.exports.isWSL = function () {\n  return isWSL;\n};\n\nmodule.exports.isLessThanWin8 = function () {\n  return os.type() === 'Windows_NT' && semver.satisfies(garanteeSemverFormat(os.release()), '<6.2.9200');\n};\n\nfunction garanteeSemverFormat(version) {\n  if (version.split('.').length === 2) {\n    version += '.0';\n  }\n\n  return version;\n}\n\nfunction sanitizeNotifuTypeArgument(type) {\n  if (typeof type === 'string' || type instanceof String) {\n    if (type.toLowerCase() === 'info') return 'info';\n    if (type.toLowerCase() === 'warn') return 'warn';\n    if (type.toLowerCase() === 'error') return 'error';\n  }\n\n  return 'info';\n}","map":null,"metadata":{},"sourceType":"script"}