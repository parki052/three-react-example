{"ast":null,"code":"/**\n * A Node.js wrapper for terminal-notify (with fallback).\n */\nvar utils = require('../lib/utils');\n\nvar Growl = require('./growl');\n\nvar path = require('path');\n\nvar notifier = path.join(__dirname, '../vendor/mac.noindex/terminal-notifier.app/Contents/MacOS/terminal-notifier');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar errorMessageOsX = 'You need Mac OS X 10.8 or above to use NotificationCenter,' + ' or use Growl fallback with constructor option {withFallback: true}.';\nmodule.exports = NotificationCenter;\n\nfunction NotificationCenter(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof NotificationCenter)) {\n    return new NotificationCenter(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(NotificationCenter, EventEmitter);\nvar activeId = null;\n\nfunction noop() {}\n\nNotificationCenter.prototype.notify = function (options, callback) {\n  var fallbackNotifier;\n  var id = identificator();\n  options = utils.clone(options || {});\n  activeId = id;\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof fn);\n  }\n\n  var actionJackedCallback = utils.actionJackerDecorator(this, options, callback, function (data) {\n    if (activeId !== id) return false;\n\n    if (data === 'activate') {\n      return 'click';\n    }\n\n    if (data === 'timeout') {\n      return 'timeout';\n    }\n\n    if (data === 'replied') {\n      return 'replied';\n    }\n\n    return false;\n  });\n  options = utils.mapToMac(options);\n\n  if (!options.message && !options.group && !options.list && !options.remove) {\n    callback(new Error('Message, group, remove or list property is required.'));\n    return this;\n  }\n\n  var argsList = utils.constructArgumentList(options);\n\n  if (utils.isMountainLion()) {\n    utils.fileCommandJson(this.options.customPath || notifier, argsList, actionJackedCallback);\n    return this;\n  }\n\n  if (fallbackNotifier || !!this.options.withFallback) {\n    fallbackNotifier = fallbackNotifier || new Growl(this.options);\n    return fallbackNotifier.notify(options, callback);\n  }\n\n  callback(new Error(errorMessageOsX));\n  return this;\n};\n\nfunction identificator() {\n  return {\n    _ref: 'val'\n  };\n}","map":null,"metadata":{},"sourceType":"script"}