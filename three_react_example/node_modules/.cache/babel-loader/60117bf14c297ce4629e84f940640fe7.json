{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = _interopRequireDefault(require('fs'));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _jsonlint = _interopRequireDefault(require('./vendor/jsonlint'));\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore: vendored\n// Read the configuration and set its `rootDir`\n// 1. If it's a `package.json` file, we look into its \"jest\" property\n// 2. For any other file, we just require it.\n\n\nvar _default = configPath => {\n  const isJSON = configPath.endsWith('.json');\n  let configObject;\n\n  try {\n    configObject = require(configPath);\n  } catch (error) {\n    if (isJSON) {\n      throw new Error(\"Jest: Failed to parse config file \".concat(configPath, \"\\n\") + \"  \".concat(_jsonlint.default.errors(_fs().default.readFileSync(configPath, 'utf8'))));\n    } else {\n      throw error;\n    }\n  }\n\n  if (configPath.endsWith(_constants.PACKAGE_JSON)) {\n    // Event if there's no \"jest\" property in package.json we will still use\n    // an empty object.\n    configObject = configObject.jest || {};\n  }\n\n  if (configObject.rootDir) {\n    // We don't touch it if it has an absolute path specified\n    if (!_path().default.isAbsolute(configObject.rootDir)) {\n      // otherwise, we'll resolve it relative to the file's __dirname\n      configObject.rootDir = _path().default.resolve(_path().default.dirname(configPath), configObject.rootDir);\n    }\n  } else {\n    // If rootDir is not there, we'll set it to this file's __dirname\n    configObject.rootDir = _path().default.dirname(configPath);\n  }\n\n  return configObject;\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}